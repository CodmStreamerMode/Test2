--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88    @uniquadev
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER 
]=]

-- Instances: 220 | Scripts: 37 | Modules: 16
local G2L = {};

-- StarterGui.Exoliner
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["Name"] = [[Exoliner]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;

-- StarterGui.Exoliner.Main
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["Active"] = true;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(34, 33, 35);
G2L["2"]["Selectable"] = true;
G2L["2"]["Size"] = UDim2.new(0, 630, 0, 391);
G2L["2"]["Position"] = UDim2.new(0.1935, 0, 0.05833, 0);
G2L["2"]["BorderColor3"] = Color3.fromRGB(34, 33, 35);
G2L["2"]["Name"] = [[Main]];

-- StarterGui.Exoliner.Main.TopBar
G2L["3"] = Instance.new("Frame", G2L["2"]);
G2L["3"]["Active"] = true;
G2L["3"]["BackgroundColor3"] = Color3.fromRGB(47, 46, 47);
G2L["3"]["Selectable"] = true;
G2L["3"]["Size"] = UDim2.new(0, 630, 0, 21);
G2L["3"]["BorderColor3"] = Color3.fromRGB(47, 46, 47);
G2L["3"]["Name"] = [[TopBar]];

-- StarterGui.Exoliner.Main.TopBar.Close
G2L["4"] = Instance.new("TextButton", G2L["3"]);
G2L["4"]["BorderSizePixel"] = 0;
G2L["4"]["TextSize"] = 23;
G2L["4"]["TextColor3"] = Color3.fromRGB(152, 150, 152);
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(26, 26, 26);
G2L["4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["4"]["Size"] = UDim2.new(0, 17, 0, 16);
G2L["4"]["BackgroundTransparency"] = 1;
G2L["4"]["Name"] = [[Close]];
G2L["4"]["Text"] = [[x]];
G2L["4"]["Position"] = UDim2.new(0.97215, 0, -0.1161, 0);

-- StarterGui.Exoliner.Main.TopBar.Close.RippleEffect
G2L["5"] = Instance.new("ModuleScript", G2L["4"]);
G2L["5"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.TopBar.Close.RippleEffect.Circle
G2L["6"] = Instance.new("ImageLabel", G2L["5"]);
G2L["6"]["ZIndex"] = 10;
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["ImageTransparency"] = 0.5;
G2L["6"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["Image"] = [[rbxassetid://266543268]];
G2L["6"]["BackgroundTransparency"] = 1;
G2L["6"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.TopBar.Close.RippleEffect.RippleClick
G2L["7"] = Instance.new("LocalScript", G2L["5"]);
G2L["7"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.TopBar.Close.LocalScript
G2L["8"] = Instance.new("LocalScript", G2L["4"]);


-- StarterGui.Exoliner.Main.Bar
G2L["9"] = Instance.new("Frame", G2L["2"]);
G2L["9"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["9"]["Size"] = UDim2.new(0, 630, 0, 63);
G2L["9"]["Position"] = UDim2.new(0, 0, 0.05371, 0);
G2L["9"]["BorderColor3"] = Color3.fromRGB(41, 40, 42);
G2L["9"]["Name"] = [[Bar]];

-- StarterGui.Exoliner.Main.Bar.Title
G2L["a"] = Instance.new("TextLabel", G2L["9"]);
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a"]["TextSize"] = 47;
G2L["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["a"]["TextColor3"] = Color3.fromRGB(255, 180, 0);
G2L["a"]["BackgroundTransparency"] = 1;
G2L["a"]["Size"] = UDim2.new(0, 73, 0, 59);
G2L["a"]["Text"] = [[EXO]];
G2L["a"]["Name"] = [[Title]];
G2L["a"]["Position"] = UDim2.new(0.13184, 0, -0.00421, 0);

-- StarterGui.Exoliner.Main.Bar.Title
G2L["b"] = Instance.new("TextLabel", G2L["9"]);
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["TextSize"] = 27;
G2L["b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Light, Enum.FontStyle.Normal);
G2L["b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Size"] = UDim2.new(0, 73, 0, 59);
G2L["b"]["Text"] = [[- Script Execution Panel]];
G2L["b"]["Name"] = [[Title]];
G2L["b"]["Position"] = UDim2.new(0.52708, 0, -0.00421, 0);

-- StarterGui.Exoliner.Main.Bar.Title
G2L["c"] = Instance.new("TextLabel", G2L["9"]);
G2L["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["TextSize"] = 47;
G2L["c"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["BackgroundTransparency"] = 1;
G2L["c"]["Size"] = UDim2.new(0, 73, 0, 59);
G2L["c"]["Text"] = [[LINER]];
G2L["c"]["Name"] = [[Title]];
G2L["c"]["Position"] = UDim2.new(0.25698, 2, -0.002, 0);

-- StarterGui.Exoliner.Main.Bar.Title
G2L["d"] = Instance.new("TextLabel", G2L["9"]);
G2L["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["TextSize"] = 30;
G2L["d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d"]["BackgroundTransparency"] = 1;
G2L["d"]["Size"] = UDim2.new(0, 73, 0, 59);
G2L["d"]["Text"] = [[SWANS]];
G2L["d"]["Name"] = [[Title]];
G2L["d"]["Position"] = UDim2.new(0.01254, 2, -0.002, 0);

-- StarterGui.Exoliner.Main.LocalScript
G2L["e"] = Instance.new("LocalScript", G2L["2"]);


-- StarterGui.Exoliner.Main.Execute
G2L["f"] = Instance.new("TextButton", G2L["2"]);
G2L["f"]["BorderSizePixel"] = 0;
G2L["f"]["TextSize"] = 26;
G2L["f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["f"]["Size"] = UDim2.new(0, 143, 0, 32);
G2L["f"]["Name"] = [[Execute]];
G2L["f"]["Text"] = [[EXECUTE]];
G2L["f"]["Position"] = UDim2.new(0.00506, 0, 0.90744, 0);

-- StarterGui.Exoliner.Main.Execute.sdf
G2L["10"] = Instance.new("Script", G2L["f"]);
G2L["10"]["Name"] = [[sdf]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd
G2L["11"] = Instance.new("ModuleScript", G2L["10"]);
G2L["11"]["Name"] = [[lolxd]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaZ
G2L["12"] = Instance.new("ModuleScript", G2L["11"]);
G2L["12"]["Name"] = [[LuaZ]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaX
G2L["13"] = Instance.new("ModuleScript", G2L["11"]);
G2L["13"]["Name"] = [[LuaX]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaY
G2L["14"] = Instance.new("ModuleScript", G2L["11"]);
G2L["14"]["Name"] = [[LuaY]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaK
G2L["15"] = Instance.new("ModuleScript", G2L["11"]);
G2L["15"]["Name"] = [[LuaK]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaU
G2L["16"] = Instance.new("ModuleScript", G2L["11"]);
G2L["16"]["Name"] = [[LuaU]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.LuaP
G2L["17"] = Instance.new("ModuleScript", G2L["11"]);
G2L["17"]["Name"] = [[LuaP]];

-- StarterGui.Exoliner.Main.Execute.sdf.lolxd.Rerubi
G2L["18"] = Instance.new("ModuleScript", G2L["11"]);
G2L["18"]["Name"] = [[Rerubi]];

-- StarterGui.Exoliner.Main.Execute.LocalScript
G2L["19"] = Instance.new("LocalScript", G2L["f"]);


-- StarterGui.Exoliner.Main.Execute.LocalScript.RemoteEvent
G2L["1a"] = Instance.new("RemoteEvent", G2L["19"]);


-- StarterGui.Exoliner.Main.Execute.LocalScript.RemoteEvent.Script
G2L["1b"] = Instance.new("Script", G2L["1a"]);


-- StarterGui.Exoliner.Main.Execute.LocalScript.Script
G2L["1c"] = Instance.new("Script", G2L["19"]);


-- StarterGui.Exoliner.Main.Execute.LocalScript.RemoteEvent2
G2L["1d"] = Instance.new("RemoteEvent", G2L["19"]);
G2L["1d"]["Name"] = [[RemoteEvent2]];

-- StarterGui.Exoliner.Main.Execute.RippleEffect
G2L["1e"] = Instance.new("ModuleScript", G2L["f"]);
G2L["1e"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.Execute.RippleEffect.Circle
G2L["1f"] = Instance.new("ImageLabel", G2L["1e"]);
G2L["1f"]["ZIndex"] = 10;
G2L["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1f"]["ImageTransparency"] = 0.5;
G2L["1f"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1f"]["Image"] = [[rbxassetid://266543268]];
G2L["1f"]["BackgroundTransparency"] = 1;
G2L["1f"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.Execute.RippleEffect.RippleClick
G2L["20"] = Instance.new("LocalScript", G2L["1e"]);
G2L["20"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.Execute.nice
G2L["21"] = Instance.new("RemoteEvent", G2L["f"]);
G2L["21"]["Name"] = [[nice]];

-- StarterGui.Exoliner.Main.Execute.R6
G2L["22"] = Instance.new("ModuleScript", G2L["f"]);
G2L["22"]["Name"] = [[R6]];

-- StarterGui.Exoliner.Main.Execute.R6. 
G2L["23"] = Instance.new("Model", G2L["22"]);
-- [ERROR] cannot convert WorldPivot, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["23"]["Name"] = [[ ]];
-- [ERROR] cannot convert PrimaryPart, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Animate
G2L["24"] = Instance.new("LocalScript", G2L["23"]);
G2L["24"]["Name"] = [[Animate]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.ScaleDampeningPercent
G2L["25"] = Instance.new("NumberValue", G2L["24"]);
G2L["25"]["Name"] = [[ScaleDampeningPercent]];
G2L["25"]["Value"] = 0.4;

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.sit
G2L["26"] = Instance.new("StringValue", G2L["24"]);
G2L["26"]["Name"] = [[sit]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.sit.SitAnim
G2L["27"] = Instance.new("Animation", G2L["26"]);
G2L["27"]["Name"] = [[SitAnim]];
G2L["27"]["AnimationId"] = [[http://www.roblox.com/asset/?id=178130996]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.fall
G2L["28"] = Instance.new("StringValue", G2L["24"]);
G2L["28"]["Name"] = [[fall]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.fall.FallAnim
G2L["29"] = Instance.new("Animation", G2L["28"]);
G2L["29"]["Name"] = [[FallAnim]];
G2L["29"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180436148]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.toolnone
G2L["2a"] = Instance.new("StringValue", G2L["24"]);
G2L["2a"]["Name"] = [[toolnone]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.toolnone.ToolNoneAnim
G2L["2b"] = Instance.new("Animation", G2L["2a"]);
G2L["2b"]["Name"] = [[ToolNoneAnim]];
G2L["2b"]["AnimationId"] = [[http://www.roblox.com/asset/?id=182393478]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.climb
G2L["2c"] = Instance.new("StringValue", G2L["24"]);
G2L["2c"]["Name"] = [[climb]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.climb.ClimbAnim
G2L["2d"] = Instance.new("Animation", G2L["2c"]);
G2L["2d"]["Name"] = [[ClimbAnim]];
G2L["2d"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180436334]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.jump
G2L["2e"] = Instance.new("StringValue", G2L["24"]);
G2L["2e"]["Name"] = [[jump]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.jump.JumpAnim
G2L["2f"] = Instance.new("Animation", G2L["2e"]);
G2L["2f"]["Name"] = [[JumpAnim]];
G2L["2f"]["AnimationId"] = [[http://www.roblox.com/asset/?id=125750702]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.run
G2L["30"] = Instance.new("StringValue", G2L["24"]);
G2L["30"]["Name"] = [[run]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.run.RunAnim
G2L["31"] = Instance.new("Animation", G2L["30"]);
G2L["31"]["Name"] = [[RunAnim]];
G2L["31"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180426354]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.walk
G2L["32"] = Instance.new("StringValue", G2L["24"]);
G2L["32"]["Name"] = [[walk]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.walk.WalkAnim
G2L["33"] = Instance.new("Animation", G2L["32"]);
G2L["33"]["Name"] = [[WalkAnim]];
G2L["33"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180426354]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.idle
G2L["34"] = Instance.new("StringValue", G2L["24"]);
G2L["34"]["Name"] = [[idle]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.idle.Animation2
G2L["35"] = Instance.new("Animation", G2L["34"]);
G2L["35"]["Name"] = [[Animation2]];
G2L["35"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180435792]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.idle.Animation2.Weight
G2L["36"] = Instance.new("NumberValue", G2L["35"]);
G2L["36"]["Name"] = [[Weight]];
G2L["36"]["Value"] = 1;

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.idle.Animation1
G2L["37"] = Instance.new("Animation", G2L["34"]);
G2L["37"]["Name"] = [[Animation1]];
G2L["37"]["AnimationId"] = [[http://www.roblox.com/asset/?id=180435571]];

-- StarterGui.Exoliner.Main.Execute.R6. .Animate.idle.Animation1.Weight
G2L["38"] = Instance.new("NumberValue", G2L["37"]);
G2L["38"]["Name"] = [[Weight]];
G2L["38"]["Value"] = 9;

-- StarterGui.Exoliner.Main.Execute.R6. .Health
G2L["39"] = Instance.new("Script", G2L["23"]);
G2L["39"]["Name"] = [[Health]];

-- StarterGui.Exoliner.Main.Execute.R6. .Sound
G2L["3a"] = Instance.new("Script", G2L["23"]);
G2L["3a"]["Name"] = [[Sound]];

-- StarterGui.Exoliner.Main.Execute.R6. .Sound.LocalSound
G2L["3b"] = Instance.new("LocalScript", G2L["3a"]);
G2L["3b"]["Enabled"] = false;
G2L["3b"]["Name"] = [[LocalSound]];
G2L["3b"]["Disabled"] = true;

-- StarterGui.Exoliner.Main.Execute.R6. .HumanoidRootPart
G2L["3c"] = Instance.new("Part", G2L["23"]);
G2L["3c"]["BottomSurface"] = Enum.SurfaceType.Smooth;
G2L["3c"]["CanCollide"] = false;
G2L["3c"]["Transparency"] = 1;
G2L["3c"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["3c"]["TopSurface"] = Enum.SurfaceType.Smooth;
G2L["3c"]["Locked"] = true;
G2L["3c"]["Size"] = Vector3.new(2, 2, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["3c"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["3c"]["Name"] = [[HumanoidRootPart]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .HumanoidRootPart.RootJoint
G2L["3d"] = Instance.new("Motor6D", G2L["3c"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["3d"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["3d"]["Name"] = [[RootJoint]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .HumanoidRootPart.RootAttachment
G2L["3e"] = Instance.new("Attachment", G2L["3c"]);
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["3e"]["Name"] = [[RootAttachment]];
G2L["3e"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .HumanoidRootPart.CharacterSoundEvent
G2L["3f"] = Instance.new("RemoteEvent", G2L["3c"]);
G2L["3f"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Humanoid
G2L["40"] = Instance.new("Humanoid", G2L["23"]);


-- StarterGui.Exoliner.Main.Execute.R6. .Humanoid.Jump
G2L["41"] = Instance.new("LocalScript", G2L["40"]);
G2L["41"]["Name"] = [[Jump]];

-- StarterGui.Exoliner.Main.Execute.R6. .Humanoid.Respawn
G2L["42"] = Instance.new("Script", G2L["40"]);
G2L["42"]["Name"] = [[Respawn]];

-- StarterGui.Exoliner.Main.Execute.R6. .Humanoid.Animator
G2L["43"] = Instance.new("Animator", G2L["40"]);


-- StarterGui.Exoliner.Main.Execute.R6. .Right Leg
G2L["44"] = Instance.new("Part", G2L["23"]);
G2L["44"]["BottomSurface"] = Enum.SurfaceType.Smooth;
G2L["44"]["CanCollide"] = false;
G2L["44"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["44"]["Locked"] = true;
G2L["44"]["Size"] = Vector3.new(1, 2, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["44"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["44"]["Name"] = [[Right Leg]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Right Leg.RightFootAttachment
G2L["45"] = Instance.new("Attachment", G2L["44"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["45"]["Name"] = [[RightFootAttachment]];
G2L["45"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Right Leg.CharacterSoundEvent
G2L["46"] = Instance.new("RemoteEvent", G2L["44"]);
G2L["46"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Left Leg
G2L["47"] = Instance.new("Part", G2L["23"]);
G2L["47"]["BottomSurface"] = Enum.SurfaceType.Smooth;
G2L["47"]["CanCollide"] = false;
G2L["47"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["47"]["Locked"] = true;
G2L["47"]["Size"] = Vector3.new(1, 2, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["47"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["47"]["Name"] = [[Left Leg]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Left Leg.LeftFootAttachment
G2L["48"] = Instance.new("Attachment", G2L["47"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["48"]["Name"] = [[LeftFootAttachment]];
G2L["48"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Left Leg.CharacterSoundEvent
G2L["49"] = Instance.new("RemoteEvent", G2L["47"]);
G2L["49"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Right Arm
G2L["4a"] = Instance.new("Part", G2L["23"]);
G2L["4a"]["CanCollide"] = false;
G2L["4a"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["4a"]["Locked"] = true;
G2L["4a"]["Size"] = Vector3.new(1, 2, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4a"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["4a"]["Name"] = [[Right Arm]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Right Arm.RightGripAttachment
G2L["4b"] = Instance.new("Attachment", G2L["4a"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4b"]["Name"] = [[RightGripAttachment]];
G2L["4b"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Right Arm.RightShoulderAttachment
G2L["4c"] = Instance.new("Attachment", G2L["4a"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4c"]["Name"] = [[RightShoulderAttachment]];
G2L["4c"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Right Arm.CharacterSoundEvent
G2L["4d"] = Instance.new("RemoteEvent", G2L["4a"]);
G2L["4d"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Left Arm
G2L["4e"] = Instance.new("Part", G2L["23"]);
G2L["4e"]["CanCollide"] = false;
G2L["4e"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["4e"]["Locked"] = true;
G2L["4e"]["Size"] = Vector3.new(1, 2, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4e"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["4e"]["Name"] = [[Left Arm]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Left Arm.LeftGripAttachment
G2L["4f"] = Instance.new("Attachment", G2L["4e"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["4f"]["Name"] = [[LeftGripAttachment]];
G2L["4f"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Left Arm.LeftShoulderAttachment
G2L["50"] = Instance.new("Attachment", G2L["4e"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["50"]["Name"] = [[LeftShoulderAttachment]];
G2L["50"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Left Arm.CharacterSoundEvent
G2L["51"] = Instance.new("RemoteEvent", G2L["4e"]);
G2L["51"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Torso
G2L["52"] = Instance.new("Part", G2L["23"]);
G2L["52"]["RightSurface"] = Enum.SurfaceType.Weld;
G2L["52"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["52"]["Locked"] = true;
G2L["52"]["Size"] = Vector3.new(2, 2, 1);
G2L["52"]["LeftSurface"] = Enum.SurfaceType.Weld;
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["52"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["52"]["Name"] = [[Torso]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.Neck
G2L["53"] = Instance.new("Motor6D", G2L["52"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["53"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["53"]["Name"] = [[Neck]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.Left Hip
G2L["54"] = Instance.new("Motor6D", G2L["52"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["54"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["54"]["Name"] = [[Left Hip]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.Right Hip
G2L["55"] = Instance.new("Motor6D", G2L["52"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["55"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["55"]["Name"] = [[Right Hip]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.Left Shoulder
G2L["56"] = Instance.new("Motor6D", G2L["52"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["56"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["56"]["Name"] = [[Left Shoulder]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.Right Shoulder
G2L["57"] = Instance.new("Motor6D", G2L["52"]);
-- [ERROR] cannot convert Part1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["57"]["MaxVelocity"] = 0.1;
-- [ERROR] cannot convert C1, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert C0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["57"]["Name"] = [[Right Shoulder]];
-- [ERROR] cannot convert Part0, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.WaistBackAttachment
G2L["58"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["58"]["Name"] = [[WaistBackAttachment]];
G2L["58"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.WaistCenterAttachment
G2L["59"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["59"]["Name"] = [[WaistCenterAttachment]];
G2L["59"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.WaistFrontAttachment
G2L["5a"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5a"]["Name"] = [[WaistFrontAttachment]];
G2L["5a"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.RightCollarAttachment
G2L["5b"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5b"]["Name"] = [[RightCollarAttachment]];
G2L["5b"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.LeftCollarAttachment
G2L["5c"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5c"]["Name"] = [[LeftCollarAttachment]];
G2L["5c"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.BodyBackAttachment
G2L["5d"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5d"]["Name"] = [[BodyBackAttachment]];
G2L["5d"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.BodyFrontAttachment
G2L["5e"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5e"]["Name"] = [[BodyFrontAttachment]];
G2L["5e"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.NeckAttachment
G2L["5f"] = Instance.new("Attachment", G2L["52"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["5f"]["Name"] = [[NeckAttachment]];
G2L["5f"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.roblox
G2L["60"] = Instance.new("Decal", G2L["52"]);
G2L["60"]["Name"] = [[roblox]];

-- StarterGui.Exoliner.Main.Execute.R6. .Torso.CharacterSoundEvent
G2L["61"] = Instance.new("RemoteEvent", G2L["52"]);
G2L["61"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head
G2L["62"] = Instance.new("Part", G2L["23"]);
G2L["62"]["Color"] = Color3.fromRGB(174, 174, 174);
G2L["62"]["TopSurface"] = Enum.SurfaceType.Smooth;
G2L["62"]["Locked"] = true;
G2L["62"]["Size"] = Vector3.new(2, 1, 1);
-- [ERROR] cannot convert BrickColor, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["62"]["Rotation"] = Vector3.new(0, -69.787, 0);
G2L["62"]["Name"] = [[Head]];
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"

-- StarterGui.Exoliner.Main.Execute.R6. .Head.face
G2L["63"] = Instance.new("Decal", G2L["62"]);
G2L["63"]["Name"] = [[face]];
G2L["63"]["Texture"] = [[rbxassetid://144080495]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Climbing
G2L["64"] = Instance.new("Sound", G2L["62"]);
G2L["64"]["RollOffMaxDistance"] = 150;
G2L["64"]["Volume"] = 0.65;
G2L["64"]["Looped"] = true;
G2L["64"]["Name"] = [[Climbing]];
G2L["64"]["RollOffMinDistance"] = 5;
G2L["64"]["SoundId"] = [[rbxasset://sounds/action_footsteps_plastic.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Climbing.CharacterSoundEvent
G2L["65"] = Instance.new("RemoteEvent", G2L["64"]);
G2L["65"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Swimming
G2L["66"] = Instance.new("Sound", G2L["62"]);
G2L["66"]["PlaybackSpeed"] = 1.6;
G2L["66"]["RollOffMaxDistance"] = 150;
G2L["66"]["Volume"] = 0.65;
G2L["66"]["Looped"] = true;
G2L["66"]["Name"] = [[Swimming]];
G2L["66"]["RollOffMinDistance"] = 5;
G2L["66"]["SoundId"] = [[rbxasset://sounds/action_swim.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Swimming.CharacterSoundEvent
G2L["67"] = Instance.new("RemoteEvent", G2L["66"]);
G2L["67"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Running
G2L["68"] = Instance.new("Sound", G2L["62"]);
G2L["68"]["TimePosition"] = 0.83446;
G2L["68"]["PlaybackSpeed"] = 1.85;
G2L["68"]["RollOffMaxDistance"] = 150;
G2L["68"]["Volume"] = 0.65;
G2L["68"]["Looped"] = true;
G2L["68"]["Name"] = [[Running]];
G2L["68"]["RollOffMinDistance"] = 5;
G2L["68"]["SoundId"] = [[rbxasset://sounds/action_footsteps_plastic.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Running.CharacterSoundEvent
G2L["69"] = Instance.new("RemoteEvent", G2L["68"]);
G2L["69"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Splash
G2L["6a"] = Instance.new("Sound", G2L["62"]);
G2L["6a"]["RollOffMaxDistance"] = 150;
G2L["6a"]["Volume"] = 0.65;
G2L["6a"]["Name"] = [[Splash]];
G2L["6a"]["RollOffMinDistance"] = 5;
G2L["6a"]["SoundId"] = [[rbxasset://sounds/impact_water.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Splash.CharacterSoundEvent
G2L["6b"] = Instance.new("RemoteEvent", G2L["6a"]);
G2L["6b"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Landing
G2L["6c"] = Instance.new("Sound", G2L["62"]);
G2L["6c"]["RollOffMaxDistance"] = 150;
G2L["6c"]["Volume"] = 0.65;
G2L["6c"]["Name"] = [[Landing]];
G2L["6c"]["RollOffMinDistance"] = 5;
G2L["6c"]["SoundId"] = [[rbxasset://sounds/action_jump_land.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Landing.CharacterSoundEvent
G2L["6d"] = Instance.new("RemoteEvent", G2L["6c"]);
G2L["6d"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Jumping
G2L["6e"] = Instance.new("Sound", G2L["62"]);
G2L["6e"]["RollOffMaxDistance"] = 150;
G2L["6e"]["Volume"] = 0.65;
G2L["6e"]["Name"] = [[Jumping]];
G2L["6e"]["RollOffMinDistance"] = 5;
G2L["6e"]["SoundId"] = [[rbxasset://sounds/action_jump.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Jumping.CharacterSoundEvent
G2L["6f"] = Instance.new("RemoteEvent", G2L["6e"]);
G2L["6f"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.FreeFalling
G2L["70"] = Instance.new("Sound", G2L["62"]);
G2L["70"]["TimePosition"] = 0.11429;
G2L["70"]["RollOffMaxDistance"] = 150;
G2L["70"]["Volume"] = 0.65;
G2L["70"]["Looped"] = true;
G2L["70"]["Name"] = [[FreeFalling]];
G2L["70"]["RollOffMinDistance"] = 5;
G2L["70"]["SoundId"] = [[rbxasset://sounds/action_falling.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Died
G2L["71"] = Instance.new("Sound", G2L["62"]);
G2L["71"]["RollOffMaxDistance"] = 150;
G2L["71"]["Volume"] = 0.65;
G2L["71"]["Name"] = [[Died]];
G2L["71"]["RollOffMinDistance"] = 5;
G2L["71"]["SoundId"] = [[rbxasset://sounds/uuhhh.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Died.CharacterSoundEvent
G2L["72"] = Instance.new("RemoteEvent", G2L["71"]);
G2L["72"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.GettingUp
G2L["73"] = Instance.new("Sound", G2L["62"]);
G2L["73"]["RollOffMaxDistance"] = 150;
G2L["73"]["Volume"] = 0.65;
G2L["73"]["Name"] = [[GettingUp]];
G2L["73"]["RollOffMinDistance"] = 5;
G2L["73"]["SoundId"] = [[rbxasset://sounds/action_get_up.mp3]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.GettingUp.CharacterSoundEvent
G2L["74"] = Instance.new("RemoteEvent", G2L["73"]);
G2L["74"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.Execute.R6. .Head.FaceCenterAttachment
G2L["75"] = Instance.new("Attachment", G2L["62"]);
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["75"]["Name"] = [[FaceCenterAttachment]];
G2L["75"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Head.FaceFrontAttachment
G2L["76"] = Instance.new("Attachment", G2L["62"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["76"]["Name"] = [[FaceFrontAttachment]];
G2L["76"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Head.HatAttachment
G2L["77"] = Instance.new("Attachment", G2L["62"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["77"]["Name"] = [[HatAttachment]];
G2L["77"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Head.HairAttachment
G2L["78"] = Instance.new("Attachment", G2L["62"]);
-- [ERROR] cannot convert CFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
-- [ERROR] cannot convert WorldCFrame, please report to "https://github.com/uniquadev/GuiToLuaConverter/issues"
G2L["78"]["Name"] = [[HairAttachment]];
G2L["78"]["WorldAxis"] = Vector3.new(0.3455, 0, 0.93842);

-- StarterGui.Exoliner.Main.Execute.R6. .Head.Mesh
G2L["79"] = Instance.new("SpecialMesh", G2L["62"]);
G2L["79"]["Scale"] = Vector3.new(1.25, 1.25, 1.25);

-- StarterGui.Exoliner.Main.Execute.R6. .Head.CharacterSoundEvent
G2L["7a"] = Instance.new("RemoteEvent", G2L["62"]);
G2L["7a"]["Name"] = [[CharacterSoundEvent]];

-- StarterGui.Exoliner.Main.HideCodeBox
G2L["7b"] = Instance.new("TextButton", G2L["2"]);
G2L["7b"]["BorderSizePixel"] = 0;
G2L["7b"]["TextSize"] = 20;
G2L["7b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["7b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["7b"]["Size"] = UDim2.new(0, 27, 0, 24);
G2L["7b"]["Name"] = [[HideCodeBox]];
G2L["7b"]["BorderColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7b"]["Text"] = [[]];
G2L["7b"]["Position"] = UDim2.new(0.8656, 0, 0.91541, 0);

-- StarterGui.Exoliner.Main.HideCodeBox.RippleEffect
G2L["7c"] = Instance.new("ModuleScript", G2L["7b"]);
G2L["7c"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.HideCodeBox.RippleEffect.Circle
G2L["7d"] = Instance.new("ImageLabel", G2L["7c"]);
G2L["7d"]["ZIndex"] = 10;
G2L["7d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["7d"]["ImageTransparency"] = 0.5;
G2L["7d"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7d"]["Image"] = [[rbxassetid://266543268]];
G2L["7d"]["BackgroundTransparency"] = 1;
G2L["7d"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.HideCodeBox.RippleEffect.RippleClick
G2L["7e"] = Instance.new("LocalScript", G2L["7c"]);
G2L["7e"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.HideCodeBox.LocalScript
G2L["7f"] = Instance.new("LocalScript", G2L["7b"]);


-- StarterGui.Exoliner.Main.HideCodeBox.Tick
G2L["80"] = Instance.new("ImageLabel", G2L["7b"]);
G2L["80"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["80"]["Image"] = [[rbxassetid://4007963789]];
G2L["80"]["Size"] = UDim2.new(0, 27, 0, 24);
G2L["80"]["Visible"] = false;
G2L["80"]["BackgroundTransparency"] = 1;
G2L["80"]["Name"] = [[Tick]];

-- StarterGui.Exoliner.Main.TextLabel
G2L["81"] = Instance.new("TextLabel", G2L["2"]);
G2L["81"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["TextSize"] = 27;
G2L["81"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["81"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["81"]["BackgroundTransparency"] = 1;
G2L["81"]["Size"] = UDim2.new(0, 70, 0, 28);
G2L["81"]["Text"] = [[HIDE TEXT:]];
G2L["81"]["Position"] = UDim2.new(0.71111, 0, 0.91029, 0);

-- StarterGui.Exoliner.Main.Clear
G2L["82"] = Instance.new("TextButton", G2L["2"]);
G2L["82"]["BorderSizePixel"] = 0;
G2L["82"]["TextSize"] = 26;
G2L["82"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["82"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["82"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["82"]["Size"] = UDim2.new(0, 108, 0, 32);
G2L["82"]["Name"] = [[Clear]];
G2L["82"]["Text"] = [[CLEAR]];
G2L["82"]["Position"] = UDim2.new(0.24475, 0, 0.90744, 0);

-- StarterGui.Exoliner.Main.Clear.LocalScript
G2L["83"] = Instance.new("LocalScript", G2L["82"]);


-- StarterGui.Exoliner.Main.Clear.LocalScript.RemoteEvent
G2L["84"] = Instance.new("RemoteEvent", G2L["83"]);


-- StarterGui.Exoliner.Main.Clear.LocalScript.RemoteEvent.Script
G2L["85"] = Instance.new("Script", G2L["84"]);


-- StarterGui.Exoliner.Main.Clear.LocalScript.Script
G2L["86"] = Instance.new("Script", G2L["83"]);


-- StarterGui.Exoliner.Main.Clear.LocalScript.RemoteEvent2
G2L["87"] = Instance.new("RemoteEvent", G2L["83"]);
G2L["87"]["Name"] = [[RemoteEvent2]];

-- StarterGui.Exoliner.Main.Clear.RippleEffect
G2L["88"] = Instance.new("ModuleScript", G2L["82"]);
G2L["88"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.Clear.RippleEffect.Circle
G2L["89"] = Instance.new("ImageLabel", G2L["88"]);
G2L["89"]["ZIndex"] = 10;
G2L["89"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["89"]["ImageTransparency"] = 0.5;
G2L["89"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["89"]["Image"] = [[rbxassetid://266543268]];
G2L["89"]["BackgroundTransparency"] = 1;
G2L["89"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.Clear.RippleEffect.RippleClick
G2L["8a"] = Instance.new("LocalScript", G2L["88"]);
G2L["8a"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.Scripts
G2L["8b"] = Instance.new("TextButton", G2L["2"]);
G2L["8b"]["BorderSizePixel"] = 0;
G2L["8b"]["TextSize"] = 26;
G2L["8b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8b"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["8b"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["8b"]["Size"] = UDim2.new(0, 53, 0, 45);
G2L["8b"]["Name"] = [[Scripts]];
G2L["8b"]["Text"] = [[][]];
G2L["8b"]["Position"] = UDim2.new(0.913, 0, 0.22969, 0);

-- StarterGui.Exoliner.Main.Scripts.LocalScript
G2L["8c"] = Instance.new("LocalScript", G2L["8b"]);


-- StarterGui.Exoliner.Main.Scripts.LocalScript.RemoteEvent
G2L["8d"] = Instance.new("RemoteEvent", G2L["8c"]);


-- StarterGui.Exoliner.Main.Scripts.LocalScript.RemoteEvent.Script
G2L["8e"] = Instance.new("Script", G2L["8d"]);


-- StarterGui.Exoliner.Main.Scripts.LocalScript.Script
G2L["8f"] = Instance.new("Script", G2L["8c"]);


-- StarterGui.Exoliner.Main.Scripts.LocalScript.RemoteEvent2
G2L["90"] = Instance.new("RemoteEvent", G2L["8c"]);
G2L["90"]["Name"] = [[RemoteEvent2]];

-- StarterGui.Exoliner.Main.Scripts.RippleEffect
G2L["91"] = Instance.new("ModuleScript", G2L["8b"]);
G2L["91"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.Scripts.RippleEffect.Circle
G2L["92"] = Instance.new("ImageLabel", G2L["91"]);
G2L["92"]["ZIndex"] = 10;
G2L["92"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["92"]["ImageTransparency"] = 0.5;
G2L["92"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["92"]["Image"] = [[rbxassetid://266543268]];
G2L["92"]["BackgroundTransparency"] = 1;
G2L["92"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.Scripts.RippleEffect.RippleClick
G2L["93"] = Instance.new("LocalScript", G2L["91"]);
G2L["93"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.ScriptsClose
G2L["94"] = Instance.new("TextButton", G2L["2"]);
G2L["94"]["BorderSizePixel"] = 0;
G2L["94"]["TextSize"] = 26;
G2L["94"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["94"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["94"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["94"]["Size"] = UDim2.new(0, 53, 0, 45);
G2L["94"]["Name"] = [[ScriptsClose]];
G2L["94"]["Text"] = [[[]]];
G2L["94"]["Visible"] = false;
G2L["94"]["Position"] = UDim2.new(0.913, 0, 0.22969, 0);

-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript
G2L["95"] = Instance.new("LocalScript", G2L["94"]);


-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript.RemoteEvent
G2L["96"] = Instance.new("RemoteEvent", G2L["95"]);


-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript.RemoteEvent.Script
G2L["97"] = Instance.new("Script", G2L["96"]);


-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript.Script
G2L["98"] = Instance.new("Script", G2L["95"]);


-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript.RemoteEvent2
G2L["99"] = Instance.new("RemoteEvent", G2L["95"]);
G2L["99"]["Name"] = [[RemoteEvent2]];

-- StarterGui.Exoliner.Main.ScriptsClose.RippleEffect
G2L["9a"] = Instance.new("ModuleScript", G2L["94"]);
G2L["9a"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.ScriptsClose.RippleEffect.Circle
G2L["9b"] = Instance.new("ImageLabel", G2L["9a"]);
G2L["9b"]["ZIndex"] = 10;
G2L["9b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9b"]["ImageTransparency"] = 0.5;
G2L["9b"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["9b"]["Image"] = [[rbxassetid://266543268]];
G2L["9b"]["BackgroundTransparency"] = 1;
G2L["9b"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.ScriptsClose.RippleEffect.RippleClick
G2L["9c"] = Instance.new("LocalScript", G2L["9a"]);
G2L["9c"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.Scroll
G2L["9d"] = Instance.new("ScrollingFrame", G2L["2"]);
G2L["9d"]["ZIndex"] = 3;
G2L["9d"]["BorderSizePixel"] = 0;
G2L["9d"]["CanvasSize"] = UDim2.new(0, 0, 0, 5000);
G2L["9d"]["ElasticBehavior"] = Enum.ElasticBehavior.Always;
G2L["9d"]["TopImage"] = [[rbxassetid://148970562]];
G2L["9d"]["MidImage"] = [[rbxassetid://148970562]];
G2L["9d"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["9d"]["Name"] = [[Scroll]];
G2L["9d"]["HorizontalScrollBarInset"] = Enum.ScrollBarInset.ScrollBar;
G2L["9d"]["BottomImage"] = [[rbxassetid://148970562]];
G2L["9d"]["Size"] = UDim2.new(0, 569, 0, 260);
G2L["9d"]["Position"] = UDim2.new(0.0054, 0, 0.23154, 0);
G2L["9d"]["BorderColor3"] = Color3.fromRGB(0, 255, 116);
G2L["9d"]["ScrollBarThickness"] = 3;

-- StarterGui.Exoliner.Main.Scroll.CodeBox
G2L["9e"] = Instance.new("TextBox", G2L["9d"]);
G2L["9e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9e"]["PlaceholderColor3"] = Color3.fromRGB(205, 205, 205);
G2L["9e"]["ZIndex"] = 3;
G2L["9e"]["BorderSizePixel"] = 0;
G2L["9e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["9e"]["TextWrapped"] = true;
G2L["9e"]["TextSize"] = 14;
G2L["9e"]["Name"] = [[CodeBox]];
G2L["9e"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["9e"]["BackgroundColor3"] = Color3.fromRGB(57, 57, 57);
G2L["9e"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9e"]["MultiLine"] = true;
G2L["9e"]["ClearTextOnFocus"] = false;
G2L["9e"]["Size"] = UDim2.new(0.87379, 0, 4114.5835, 0);
G2L["9e"]["Position"] = UDim2.new(0, 36, 0, 0);
G2L["9e"]["Text"] = [[print("its back? how omg")]];
G2L["9e"]["BackgroundTransparency"] = 1;

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Comments_
G2L["9f"] = Instance.new("TextLabel", G2L["9e"]);
G2L["9f"]["ZIndex"] = 5;
G2L["9f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["9f"]["TextTransparency"] = 1;
G2L["9f"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["9f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["9f"]["TextSize"] = 14;
G2L["9f"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["9f"]["TextColor3"] = Color3.fromRGB(87, 87, 87);
G2L["9f"]["BackgroundTransparency"] = 1;
G2L["9f"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["9f"]["ClipsDescendants"] = true;
G2L["9f"]["Text"] = [[]];
G2L["9f"]["Name"] = [[Comments_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Globals_
G2L["a0"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a0"]["ZIndex"] = 5;
G2L["a0"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a0"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a0"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a0"]["TextSize"] = 14;
G2L["a0"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a0"]["TextColor3"] = Color3.fromRGB(133, 215, 248);
G2L["a0"]["BackgroundTransparency"] = 1;
G2L["a0"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a0"]["ClipsDescendants"] = true;
G2L["a0"]["Text"] = [[]];
G2L["a0"]["Name"] = [[Globals_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Keywords_
G2L["a1"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a1"]["ZIndex"] = 5;
G2L["a1"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a1"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a1"]["TextSize"] = 14;
G2L["a1"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a1"]["TextColor3"] = Color3.fromRGB(249, 110, 125);
G2L["a1"]["BackgroundTransparency"] = 1;
G2L["a1"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a1"]["ClipsDescendants"] = true;
G2L["a1"]["Text"] = [[]];
G2L["a1"]["Name"] = [[Keywords_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Numbers_
G2L["a2"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a2"]["ZIndex"] = 4;
G2L["a2"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a2"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a2"]["TextSize"] = 14;
G2L["a2"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a2"]["TextColor3"] = Color3.fromRGB(255, 199, 0);
G2L["a2"]["BackgroundTransparency"] = 1;
G2L["a2"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a2"]["ClipsDescendants"] = true;
G2L["a2"]["Text"] = [[]];
G2L["a2"]["Name"] = [[Numbers_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.RemoteHighlight_
G2L["a3"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a3"]["ZIndex"] = 5;
G2L["a3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a3"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a3"]["TextSize"] = 14;
G2L["a3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a3"]["TextColor3"] = Color3.fromRGB(12, 255, 204);
G2L["a3"]["BackgroundTransparency"] = 1;
G2L["a3"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a3"]["ClipsDescendants"] = true;
G2L["a3"]["Text"] = [[]];
G2L["a3"]["Name"] = [[RemoteHighlight_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Strings_
G2L["a4"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a4"]["ZIndex"] = 5;
G2L["a4"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a4"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a4"]["TextSize"] = 14;
G2L["a4"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a4"]["TextColor3"] = Color3.fromRGB(174, 242, 150);
G2L["a4"]["BackgroundTransparency"] = 1;
G2L["a4"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a4"]["ClipsDescendants"] = true;
G2L["a4"]["Text"] = [[]];
G2L["a4"]["Name"] = [[Strings_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Tokens_
G2L["a5"] = Instance.new("TextLabel", G2L["9e"]);
G2L["a5"]["ZIndex"] = 5;
G2L["a5"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a5"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a5"]["TextSize"] = 14;
G2L["a5"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a5"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a5"]["BackgroundTransparency"] = 1;
G2L["a5"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["a5"]["ClipsDescendants"] = true;
G2L["a5"]["Text"] = [[]];
G2L["a5"]["Name"] = [[Tokens_]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Hide
G2L["a6"] = Instance.new("Frame", G2L["9e"]);
G2L["a6"]["ZIndex"] = 29;
G2L["a6"]["BorderSizePixel"] = 0;
G2L["a6"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["a6"]["Size"] = UDim2.new(1.07849, 0, 0, 1048);
G2L["a6"]["Position"] = UDim2.new(-0.00661, 0, 0, 0);
G2L["a6"]["BorderColor3"] = Color3.fromRGB(41, 40, 42);
G2L["a6"]["Name"] = [[Hide]];
G2L["a6"]["BackgroundTransparency"] = 1;

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Hide.HideText
G2L["a7"] = Instance.new("TextLabel", G2L["a6"]);
G2L["a7"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a7"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["a7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a7"]["TextSize"] = 14;
G2L["a7"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["a7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a7"]["BackgroundTransparency"] = 1;
G2L["a7"]["Size"] = UDim2.new(0, 536, 0, 1048);
G2L["a7"]["Text"] = [[]];
G2L["a7"]["Name"] = [[HideText]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.Auto Indent
G2L["a8"] = Instance.new("LocalScript", G2L["9e"]);
G2L["a8"]["Name"] = [[Auto Indent]];

-- StarterGui.Exoliner.Main.Scroll.CodeBox.LocalScript
G2L["a9"] = Instance.new("LocalScript", G2L["9e"]);


-- StarterGui.Exoliner.Main.Scroll.SmoothScroll
G2L["aa"] = Instance.new("LocalScript", G2L["9d"]);
G2L["aa"]["Name"] = [[SmoothScroll]];

-- StarterGui.Exoliner.Main.Scroll.SmoothScroll.InputFrame
G2L["ab"] = Instance.new("ObjectValue", G2L["aa"]);
G2L["ab"]["Name"] = [[InputFrame]];

-- StarterGui.Exoliner.Main.Scroll.SmoothScroll.SmoothingEnabled
G2L["ac"] = Instance.new("BoolValue", G2L["aa"]);
G2L["ac"]["Name"] = [[SmoothingEnabled]];
G2L["ac"]["Value"] = true;

-- StarterGui.Exoliner.Main.Scroll.SmoothScroll.SmoothingFactor
G2L["ad"] = Instance.new("NumberValue", G2L["aa"]);
G2L["ad"]["Name"] = [[SmoothingFactor]];
G2L["ad"]["Value"] = 0.2;

-- StarterGui.Exoliner.Main.Scroll.LocalScript
G2L["ae"] = Instance.new("LocalScript", G2L["9d"]);


-- StarterGui.Exoliner.Main.Scroll.Lines
G2L["af"] = Instance.new("TextLabel", G2L["9d"]);
G2L["af"]["ZIndex"] = 4;
G2L["af"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["af"]["BackgroundColor3"] = Color3.fromRGB(26, 26, 26);
G2L["af"]["TextSize"] = 15;
G2L["af"]["FontFace"] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L["af"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["af"]["BackgroundTransparency"] = 1;
G2L["af"]["Size"] = UDim2.new(-0.01, 30, 1, 0);
G2L["af"]["BorderColor3"] = Color3.fromRGB(26, 26, 26);
G2L["af"]["Text"] = [[1]];
G2L["af"]["Name"] = [[Lines]];

-- StarterGui.Exoliner.Main.Command
G2L["b0"] = Instance.new("TextButton", G2L["2"]);
G2L["b0"]["BorderSizePixel"] = 0;
G2L["b0"]["TextSize"] = 26;
G2L["b0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b0"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["b0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b0"]["Size"] = UDim2.new(0, 108, 0, 32);
G2L["b0"]["Name"] = [[Command]];
G2L["b0"]["Text"] = [[CMD BAR]];
G2L["b0"]["Position"] = UDim2.new(0.43363, 0, 0.90744, 0);

-- StarterGui.Exoliner.Main.Command.LocalScript
G2L["b1"] = Instance.new("LocalScript", G2L["b0"]);


-- StarterGui.Exoliner.Main.Command.RippleEffect
G2L["b2"] = Instance.new("ModuleScript", G2L["b0"]);
G2L["b2"]["Name"] = [[RippleEffect]];

-- StarterGui.Exoliner.Main.Command.RippleEffect.Circle
G2L["b3"] = Instance.new("ImageLabel", G2L["b2"]);
G2L["b3"]["ZIndex"] = 10;
G2L["b3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b3"]["ImageTransparency"] = 0.5;
G2L["b3"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b3"]["Image"] = [[rbxassetid://266543268]];
G2L["b3"]["BackgroundTransparency"] = 1;
G2L["b3"]["Name"] = [[Circle]];

-- StarterGui.Exoliner.Main.Command.RippleEffect.RippleClick
G2L["b4"] = Instance.new("LocalScript", G2L["b2"]);
G2L["b4"]["Name"] = [[RippleClick]];

-- StarterGui.Exoliner.Main.Settings
G2L["b5"] = Instance.new("Frame", G2L["2"]);
G2L["b5"]["Visible"] = false;
G2L["b5"]["BorderSizePixel"] = 0;
G2L["b5"]["BackgroundColor3"] = Color3.fromRGB(34, 33, 35);
G2L["b5"]["Size"] = UDim2.new(0, 630, 0, 151);
G2L["b5"]["Position"] = UDim2.new(0, 0, 1.03351, 0);
G2L["b5"]["Name"] = [[Settings]];

-- StarterGui.Exoliner.Main.Settings.TextLabel
G2L["b6"] = Instance.new("TextLabel", G2L["b5"]);
G2L["b6"]["BorderSizePixel"] = 0;
G2L["b6"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["b6"]["TextSize"] = 30;
G2L["b6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b6"]["Size"] = UDim2.new(0, 630, 0, 36);
G2L["b6"]["Text"] = [[Settings]];

-- StarterGui.Exoliner.Main.Settings.Title
G2L["b7"] = Instance.new("TextLabel", G2L["b5"]);
G2L["b7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b7"]["TextSize"] = 30;
G2L["b7"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b7"]["BackgroundTransparency"] = 1;
G2L["b7"]["Size"] = UDim2.new(0, 73, 0, 36);
G2L["b7"]["Text"] = [[SWANS]];
G2L["b7"]["Name"] = [[Title]];
G2L["b7"]["Position"] = UDim2.new(0.01254, 2, -0.00285, 0);

-- StarterGui.Exoliner.Main.Settings.exo
G2L["b8"] = Instance.new("TextLabel", G2L["b5"]);
G2L["b8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b8"]["TextSize"] = 47;
G2L["b8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b8"]["TextColor3"] = Color3.fromRGB(255, 180, 0);
G2L["b8"]["BackgroundTransparency"] = 1;
G2L["b8"]["Size"] = UDim2.new(0, 73, 0, 36);
G2L["b8"]["Text"] = [[EXO]];
G2L["b8"]["Name"] = [[exo]];
G2L["b8"]["Position"] = UDim2.new(0.13184, 0, -0.00421, 0);

-- StarterGui.Exoliner.Main.Settings.Title
G2L["b9"] = Instance.new("TextLabel", G2L["b5"]);
G2L["b9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["TextSize"] = 47;
G2L["b9"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["b9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b9"]["BackgroundTransparency"] = 1;
G2L["b9"]["Size"] = UDim2.new(0, 73, 0, 36);
G2L["b9"]["Text"] = [[LINER]];
G2L["b9"]["Name"] = [[Title]];
G2L["b9"]["Position"] = UDim2.new(0.25698, 2, -0.00285, 0);

-- StarterGui.Exoliner.Main.Settings.e
G2L["ba"] = Instance.new("TextLabel", G2L["b5"]);
G2L["ba"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["TextSize"] = 30;
G2L["ba"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["ba"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ba"]["BackgroundTransparency"] = 1;
G2L["ba"]["Size"] = UDim2.new(0, 265, 0, 42);
G2L["ba"]["Text"] = [[ Coming soon...]];
G2L["ba"]["Name"] = [[e]];
G2L["ba"]["Position"] = UDim2.new(0.24429, 2, 0.46735, 0);

-- StarterGui.Exoliner.Main.SettingsButton
G2L["bb"] = Instance.new("ImageButton", G2L["2"]);
G2L["bb"]["BorderSizePixel"] = 0;
G2L["bb"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["bb"]["Image"] = [[http://www.roblox.com/asset/?id=485882401]];
G2L["bb"]["Size"] = UDim2.new(0, 53, 0, 45);
G2L["bb"]["Name"] = [[SettingsButton]];
G2L["bb"]["Position"] = UDim2.new(0.913, 0, 0.36061, 0);

-- StarterGui.Exoliner.Main.SettingsButton.LocalScript
G2L["bc"] = Instance.new("LocalScript", G2L["bb"]);


-- StarterGui.Exoliner.Main.LocalScript
G2L["bd"] = Instance.new("LocalScript", G2L["2"]);


-- StarterGui.Exoliner.Scripts
G2L["be"] = Instance.new("Frame", G2L["1"]);
G2L["be"]["BackgroundColor3"] = Color3.fromRGB(34, 33, 35);
G2L["be"]["Size"] = UDim2.new(0, 248, 0, 391);
G2L["be"]["Position"] = UDim2.new(0.022, 0, 1, 0);
G2L["be"]["BorderColor3"] = Color3.fromRGB(34, 33, 35);
G2L["be"]["Name"] = [[Scripts]];

-- StarterGui.Exoliner.Scripts.TopBar
G2L["bf"] = Instance.new("Frame", G2L["be"]);
G2L["bf"]["Active"] = true;
G2L["bf"]["BackgroundColor3"] = Color3.fromRGB(47, 46, 47);
G2L["bf"]["Selectable"] = true;
G2L["bf"]["Size"] = UDim2.new(0, 248, 0, 21);
G2L["bf"]["Position"] = UDim2.new(0, 0, 0, 0);
G2L["bf"]["BorderColor3"] = Color3.fromRGB(47, 46, 47);
G2L["bf"]["Name"] = [[TopBar]];

-- StarterGui.Exoliner.Scripts.Bar
G2L["c0"] = Instance.new("Frame", G2L["be"]);
G2L["c0"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c0"]["Size"] = UDim2.new(0, 248, 0, 63);
G2L["c0"]["Position"] = UDim2.new(0, 0, 0.05371, 0);
G2L["c0"]["BorderColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c0"]["Name"] = [[Bar]];

-- StarterGui.Exoliner.Scripts.Bar.SCRIPTS
G2L["c1"] = Instance.new("TextLabel", G2L["c0"]);
G2L["c1"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["TextSize"] = 47;
G2L["c1"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c1"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c1"]["BackgroundTransparency"] = 1;
G2L["c1"]["Size"] = UDim2.new(0, 73, 0, 59);
G2L["c1"]["Text"] = [[SCRIPTS]];
G2L["c1"]["Name"] = [[SCRIPTS]];
G2L["c1"]["Position"] = UDim2.new(0.1689, 0, -0.00421, 0);

-- StarterGui.Exoliner.Scripts.Admin
G2L["c2"] = Instance.new("TextButton", G2L["be"]);
G2L["c2"]["TextWrapped"] = true;
G2L["c2"]["BorderSizePixel"] = 0;
G2L["c2"]["TextSize"] = 14;
G2L["c2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c2"]["TextScaled"] = true;
G2L["c2"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["c2"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["c2"]["Name"] = [[Admin]];
G2L["c2"]["Text"] = [[Some Admin]];
G2L["c2"]["Position"] = UDim2.new(-0.00594, 0, 0.47795, 0);

-- StarterGui.Exoliner.Scripts.Admin.LocalScript
G2L["c3"] = Instance.new("LocalScript", G2L["c2"]);


-- StarterGui.Exoliner.Scripts.Azurian
G2L["c4"] = Instance.new("TextButton", G2L["be"]);
G2L["c4"]["TextWrapped"] = true;
G2L["c4"]["BorderSizePixel"] = 0;
G2L["c4"]["TextSize"] = 14;
G2L["c4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c4"]["TextScaled"] = true;
G2L["c4"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["c4"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["c4"]["Name"] = [[Azurian]];
G2L["c4"]["Text"] = [[Azurian Gui]];
G2L["c4"]["Position"] = UDim2.new(-0.00374, 0, 0.289, 0);

-- StarterGui.Exoliner.Scripts.Azurian.LocalScript
G2L["c5"] = Instance.new("LocalScript", G2L["c4"]);


-- StarterGui.Exoliner.Scripts.Bad
G2L["c6"] = Instance.new("TextButton", G2L["be"]);
G2L["c6"]["TextWrapped"] = true;
G2L["c6"]["BorderSizePixel"] = 0;
G2L["c6"]["TextSize"] = 14;
G2L["c6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c6"]["TextScaled"] = true;
G2L["c6"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["c6"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["c6"]["Name"] = [[Bad]];
G2L["c6"]["Text"] = [[Bad Gui]];
G2L["c6"]["Position"] = UDim2.new(-0.00997, 0, 0.75864, 0);

-- StarterGui.Exoliner.Scripts.Bad.LocalScript
G2L["c7"] = Instance.new("LocalScript", G2L["c6"]);


-- StarterGui.Exoliner.Scripts.Ban
G2L["c8"] = Instance.new("TextButton", G2L["be"]);
G2L["c8"]["TextWrapped"] = true;
G2L["c8"]["BorderSizePixel"] = 0;
G2L["c8"]["TextSize"] = 14;
G2L["c8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c8"]["TextScaled"] = true;
G2L["c8"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["c8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["c8"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["c8"]["Name"] = [[Ban]];
G2L["c8"]["Text"] = [[Mr Bean Lag]];
G2L["c8"]["Position"] = UDim2.new(0.00029, 0, 0.71176, 0);

-- StarterGui.Exoliner.Scripts.Ban.LocalScript
G2L["c9"] = Instance.new("LocalScript", G2L["c8"]);


-- StarterGui.Exoliner.Scripts.Glitcher
G2L["ca"] = Instance.new("TextButton", G2L["be"]);
G2L["ca"]["TextWrapped"] = true;
G2L["ca"]["BorderSizePixel"] = 0;
G2L["ca"]["TextSize"] = 14;
G2L["ca"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ca"]["TextScaled"] = true;
G2L["ca"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["ca"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["ca"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["ca"]["Name"] = [[Glitcher]];
G2L["ca"]["Text"] = [[AOM Glitcher]];
G2L["ca"]["Position"] = UDim2.new(0.00219, 0, 0.66524, 0);

-- StarterGui.Exoliner.Scripts.Glitcher.LocalScript
G2L["cb"] = Instance.new("LocalScript", G2L["ca"]);


-- StarterGui.Exoliner.Scripts.Chat
G2L["cc"] = Instance.new("TextButton", G2L["be"]);
G2L["cc"]["TextWrapped"] = true;
G2L["cc"]["BorderSizePixel"] = 0;
G2L["cc"]["TextSize"] = 14;
G2L["cc"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["cc"]["TextScaled"] = true;
G2L["cc"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["cc"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["cc"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["cc"]["Name"] = [[Chat]];
G2L["cc"]["Text"] = [[Chat Bypass]];
G2L["cc"]["Position"] = UDim2.new(0.00014, 0, 0.61888, 0);

-- StarterGui.Exoliner.Scripts.Chat.LocalScript
G2L["cd"] = Instance.new("LocalScript", G2L["cc"]);


-- StarterGui.Exoliner.Scripts.Cop
G2L["ce"] = Instance.new("TextButton", G2L["be"]);
G2L["ce"]["TextWrapped"] = true;
G2L["ce"]["BorderSizePixel"] = 0;
G2L["ce"]["TextSize"] = 14;
G2L["ce"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["ce"]["TextScaled"] = true;
G2L["ce"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["ce"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["ce"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["ce"]["Name"] = [[Cop]];
G2L["ce"]["Text"] = [[Cop]];
G2L["ce"]["Position"] = UDim2.new(-0.00594, 0, 0.57193, 0);

-- StarterGui.Exoliner.Scripts.Cop.LocalScript
G2L["cf"] = Instance.new("LocalScript", G2L["ce"]);


-- StarterGui.Exoliner.Scripts.Dex
G2L["d0"] = Instance.new("TextButton", G2L["be"]);
G2L["d0"]["TextWrapped"] = true;
G2L["d0"]["BorderSizePixel"] = 0;
G2L["d0"]["TextSize"] = 14;
G2L["d0"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d0"]["TextScaled"] = true;
G2L["d0"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["d0"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["d0"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["d0"]["Name"] = [[Dex]];
G2L["d0"]["Text"] = [[Dark Dex]];
G2L["d0"]["Position"] = UDim2.new(-0.00594, 0, 0.43056, 0);

-- StarterGui.Exoliner.Scripts.Dex.LocalScript
G2L["d1"] = Instance.new("LocalScript", G2L["d0"]);


-- StarterGui.Exoliner.Scripts.Dreaming
G2L["d2"] = Instance.new("TextButton", G2L["be"]);
G2L["d2"]["TextWrapped"] = true;
G2L["d2"]["BorderSizePixel"] = 0;
G2L["d2"]["TextSize"] = 14;
G2L["d2"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d2"]["TextScaled"] = true;
G2L["d2"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["d2"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["d2"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["d2"]["Name"] = [[Dreaming]];
G2L["d2"]["Text"] = [[Dreaming Gui]];
G2L["d2"]["Position"] = UDim2.new(0, 0, 0.24106, 0);

-- StarterGui.Exoliner.Scripts.Dreaming.LocalScript
G2L["d3"] = Instance.new("LocalScript", G2L["d2"]);


-- StarterGui.Exoliner.Scripts.Guns
G2L["d4"] = Instance.new("TextButton", G2L["be"]);
G2L["d4"]["TextWrapped"] = true;
G2L["d4"]["BorderSizePixel"] = 0;
G2L["d4"]["TextSize"] = 14;
G2L["d4"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d4"]["TextScaled"] = true;
G2L["d4"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["d4"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["d4"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["d4"]["Name"] = [[Guns]];
G2L["d4"]["Text"] = [[Guns]];
G2L["d4"]["Position"] = UDim2.new(0.00013, 0, 0.38162, 0);

-- StarterGui.Exoliner.Scripts.Guns.LocalScript
G2L["d5"] = Instance.new("LocalScript", G2L["d4"]);


-- StarterGui.Exoliner.Scripts.IY
G2L["d6"] = Instance.new("TextButton", G2L["be"]);
G2L["d6"]["TextWrapped"] = true;
G2L["d6"]["BorderSizePixel"] = 0;
G2L["d6"]["TextSize"] = 14;
G2L["d6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d6"]["TextScaled"] = true;
G2L["d6"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["d6"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["d6"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["d6"]["Name"] = [[IY]];
G2L["d6"]["Text"] = [[Infinite Yield]];
G2L["d6"]["Position"] = UDim2.new(0.00212, 0, 0.52429, 0);

-- StarterGui.Exoliner.Scripts.IY.LocalScript
G2L["d7"] = Instance.new("LocalScript", G2L["d6"]);


-- StarterGui.Exoliner.Scripts.Shutdown
G2L["d8"] = Instance.new("TextButton", G2L["be"]);
G2L["d8"]["TextWrapped"] = true;
G2L["d8"]["BorderSizePixel"] = 0;
G2L["d8"]["TextSize"] = 14;
G2L["d8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["d8"]["TextScaled"] = true;
G2L["d8"]["BackgroundColor3"] = Color3.fromRGB(41, 40, 42);
G2L["d8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["d8"]["Size"] = UDim2.new(0, 247, 0, 19);
G2L["d8"]["Name"] = [[Shutdown]];
G2L["d8"]["Text"] = [[Shutdown Game]];
G2L["d8"]["Position"] = UDim2.new(-0.00389, 0, 0.33568, 0);

-- StarterGui.Exoliner.Scripts.Shutdown.LocalScript
G2L["d9"] = Instance.new("LocalScript", G2L["d8"]);


-- StarterGui.Exoliner.main
G2L["da"] = Instance.new("Script", G2L["1"]);
G2L["da"]["Name"] = [[main]];

-- StarterGui.Exoliner.Run
G2L["db"] = Instance.new("RemoteEvent", G2L["1"]);
G2L["db"]["Name"] = [[Run]];

-- StarterGui.Exoliner.LocalScript
G2L["dc"] = Instance.new("LocalScript", G2L["1"]);


-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["5"]] = {
Closure = function()
    local script = G2L["5"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														print("This place uses a model by Come0n.") --please do not remove!
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["11"]] = {
Closure = function()
    local script = G2L["11"];
--[[
	Credit to einsteinK.
	Credit to Stravant for LBI.
	
	Credit to the creators of all the other modules used in this.
	
	Sceleratis was here and decided modify some things.
	
	einsteinK was here again to fix a bug in LBI for if-statements
--]]

local waitDeps = {
	'Rerubi';
	'LuaK';
	'LuaP';
	'LuaU';
	'LuaX';
	'LuaY';
	'LuaZ';
}

for i,v in pairs(waitDeps) do script:WaitForChild(v) end

local luaX = require(script.LuaX)
local luaY = require(script.LuaY)
local luaZ = require(script.LuaZ)
local luaU = require(script.LuaU)
local rerubi = require(script.Rerubi)

luaX:init()
local LuaState = {}

getfenv().script = nil

return function(str,env)
	local f,writer,buff,name
	local env = env or getfenv(2)
	local name = (env.script and env.script:GetFullName())
	local ran,error = pcall(function()
		local zio = luaZ:init(luaZ:make_getS(str), nil)
		if not zio then return error() end
		local func = luaY:parser(LuaState, zio, nil, name or "nil")
		writer, buff = luaU:make_setS()
		luaU:dump(LuaState, func, writer, buff)
		f = rerubi(buff.data, env)
	end)
	
	if ran then
		return f,buff.data
	else
		return nil,error
	end
end
end;
};
G2L_MODULES[G2L["12"]] = {
Closure = function()
    local script = G2L["12"];
--[[--------------------------------------------------------------------

  lzio.lua
  Lua buffered streams in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * EOZ is implemented as a string, "EOZ"
-- * Format of z structure (ZIO)
--     z.n       -- bytes still unread
--     z.p       -- last read position position in buffer
--     z.reader  -- chunk reader function
--     z.data    -- additional data
-- * Current position, p, is now last read index instead of a pointer
--
-- Not implemented:
-- * luaZ_lookahead: used only in lapi.c:lua_load to detect binary chunk
-- * luaZ_read: used only in lundump.c:ezread to read +1 bytes
-- * luaZ_openspace: dropped; let Lua handle buffers as strings (used in
--   lundump.c:LoadString & lvm.c:luaV_concat)
-- * luaZ buffer macros: dropped; buffers are handled as strings
-- * lauxlib.c:getF reader implementation has an extraline flag to
--   skip over a shbang (#!) line, this is not implemented here
--
-- Added:
-- (both of the following are vaguely adapted from lauxlib.c)
-- * luaZ:make_getS: create Reader from a string
-- * luaZ:make_getF: create Reader that reads from a file
--
-- Changed in 5.1.x:
-- * Chunkreader renamed to Reader (ditto with Chunkwriter)
-- * Zio struct: no more name string, added Lua state for reader
--   (however, Yueliang readers do not require a Lua state)
----------------------------------------------------------------------]]

local luaZ = {}

------------------------------------------------------------------------
-- * reader() should return a string, or nil if nothing else to parse.
--   Additional data can be set only during stream initialization
-- * Readers are handled in lauxlib.c, see luaL_load(file|buffer|string)
-- * LUAL_BUFFERSIZE=BUFSIZ=512 in make_getF() (located in luaconf.h)
-- * Original Reader typedef:
--   const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);
-- * This Lua chunk reader implementation:
--   returns string or nil, no arguments to function
------------------------------------------------------------------------

------------------------------------------------------------------------
-- create a chunk reader from a source string
------------------------------------------------------------------------
function luaZ:make_getS(buff)
  local b = buff
  return function() -- chunk reader anonymous function here
    if not b then return nil end
    local data = b
    b = nil
    return data
  end
end

------------------------------------------------------------------------
-- create a chunk reader from a source file
------------------------------------------------------------------------
--[[
function luaZ:make_getF(filename)
  local LUAL_BUFFERSIZE = 512
  local h = io.open(filename, "r")
  if not h then return nil end
  return function() -- chunk reader anonymous function here
    if not h or io.type(h) == "closed file" then return nil end
    local buff = h:read(LUAL_BUFFERSIZE)
    if not buff then h:close(); h = nil end
    return buff
  end
end
--]]
------------------------------------------------------------------------
-- creates a zio input stream
-- returns the ZIO structure, z
------------------------------------------------------------------------
function luaZ:init(reader, data, name)
  if not reader then return end
  local z = {}
  z.reader = reader
  z.data = data or ""
  z.name = name
  -- set up additional data for reading
  if not data or data == "" then z.n = 0 else z.n = #data end
  z.p = 0
  return z
end

------------------------------------------------------------------------
-- fill up input buffer
------------------------------------------------------------------------
function luaZ:fill(z)
  local buff = z.reader()
  z.data = buff
  if not buff or buff == "" then return "EOZ" end
  z.n, z.p = #buff - 1, 1
  return string.sub(buff, 1, 1)
end

------------------------------------------------------------------------
-- get next character from the input stream
-- * local n, p are used to optimize code generation
------------------------------------------------------------------------
function luaZ:zgetc(z)
  local n, p = z.n, z.p + 1
  if n > 0 then
    z.n, z.p = n - 1, p
    return string.sub(z.data, p, p)
  else
    return self:fill(z)
  end
end

return luaZ
end;
};
G2L_MODULES[G2L["13"]] = {
Closure = function()
    local script = G2L["13"];
--[[--------------------------------------------------------------------

  llex.lua
  Lua lexical analyzer in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * intended to 'imitate' llex.c code; performance is not a concern
-- * tokens are strings; code structure largely retained
-- * deleted stuff (compared to llex.c) are noted, comments retained
-- * nextc() returns the currently read character to simplify coding
--   here; next() in llex.c does not return anything
-- * compatibility code is marked with "--#" comments
--
-- Added:
-- * luaX:chunkid (function luaO_chunkid from lobject.c)
-- * luaX:str2d (function luaO_str2d from lobject.c)
-- * luaX.LUA_QS used in luaX:lexerror (from luaconf.h)
-- * luaX.LUA_COMPAT_LSTR in luaX:read_long_string (from luaconf.h)
-- * luaX.MAX_INT used in luaX:inclinenumber (from llimits.h)
--
-- To use the lexer:
-- (1) luaX:init() to initialize the lexer
-- (2) luaX:setinput() to set the input stream to lex
-- (3) call luaX:next() or luaX:luaX:lookahead() to get tokens,
--     until "TK_EOS": luaX:next()
-- * since EOZ is returned as a string, be careful when regexp testing
--
-- Not implemented:
-- * luaX_newstring: not required by this Lua implementation
-- * buffer MAX_SIZET size limit (from llimits.h) test not implemented
--   in the interest of performance
-- * locale-aware number handling is largely redundant as Lua's
--   tonumber() function is already capable of this
--
-- Changed in 5.1.x:
-- * TK_NAME token order moved down
-- * string representation for TK_NAME, TK_NUMBER, TK_STRING changed
-- * token struct renamed to lower case (LS -> ls)
-- * LexState struct: removed nestlevel, added decpoint
-- * error message functions have been greatly simplified
-- * token2string renamed to luaX_tokens, exposed in llex.h
-- * lexer now handles all kinds of newlines, including CRLF
-- * shbang first line handling removed from luaX:setinput;
--   it is now done in lauxlib.c (luaL_loadfile)
-- * next(ls) macro renamed to nextc(ls) due to new luaX_next function
-- * EXTRABUFF and MAXNOCHECK removed due to lexer changes
-- * checkbuffer(ls, len) macro deleted
-- * luaX:read_numeral now has 3 support functions: luaX:trydecpoint,
--   luaX:buffreplace and (luaO_str2d from lobject.c) luaX:str2d
-- * luaX:read_numeral is now more promiscuous in slurping characters;
--   hexadecimal numbers was added, locale-aware decimal points too
-- * luaX:skip_sep is new; used by luaX:read_long_string
-- * luaX:read_long_string handles new-style long blocks, with some
--   optional compatibility code
-- * luaX:llex: parts changed to support new-style long blocks
-- * luaX:llex: readname functionality has been folded in
-- * luaX:llex: removed test for control characters
--
--------------------------------------------------------------------]]

local luaZ = require(script.Parent.LuaZ)

local luaX = {}

-- FIRST_RESERVED is not required as tokens are manipulated as strings
-- TOKEN_LEN deleted; maximum length of a reserved word not needed

------------------------------------------------------------------------
-- "ORDER RESERVED" deleted; enumeration in one place: luaX.RESERVED
------------------------------------------------------------------------

-- terminal symbols denoted by reserved words: TK_AND to TK_WHILE
-- other terminal symbols: TK_NAME to TK_EOS
luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

-- NUM_RESERVED is not required; number of reserved words

--[[--------------------------------------------------------------------
-- Instead of passing seminfo, the Token struct (e.g. ls.t) is passed
-- so that lexer functions can use its table element, ls.t.seminfo
--
-- SemInfo (struct no longer needed, a mixed-type value is used)
--
-- Token (struct of ls.t and ls.lookahead):
--   token  -- token symbol
--   seminfo  -- semantics information
--
-- LexState (struct of ls; ls is initialized by luaX:setinput):
--   current  -- current character (charint)
--   linenumber  -- input line counter
--   lastline  -- line of last token 'consumed'
--   t  -- current token (table: struct Token)
--   lookahead  -- look ahead token (table: struct Token)
--   fs  -- 'FuncState' is private to the parser
--   L -- LuaState
--   z  -- input stream
--   buff  -- buffer for tokens
--   source  -- current source name
--   decpoint -- locale decimal point
--   nestlevel  -- level of nested non-terminals
----------------------------------------------------------------------]]

-- luaX.tokens (was luaX_tokens) is now a hash; see luaX:init

luaX.MAXSRC = 80
luaX.MAX_INT = 2147483645       -- constants from elsewhere (see above)
luaX.LUA_QS = "'%s'"
luaX.LUA_COMPAT_LSTR = 1
--luaX.MAX_SIZET = 4294967293

------------------------------------------------------------------------
-- initialize lexer
-- * original luaX_init has code to create and register token strings
-- * luaX.tokens: TK_* -> token
-- * luaX.enums:  token -> TK_* (used in luaX:llex)
------------------------------------------------------------------------
function luaX:init()
  local tokens, enums = {}, {}
  for v in string.gmatch(self.RESERVED, "[^\n]+") do
    local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
    tokens[tok] = str
    enums[str] = tok
  end
  self.tokens = tokens
  self.enums = enums
end

------------------------------------------------------------------------
-- returns a suitably-formatted chunk name or id
-- * from lobject.c, used in llex.c and ldebug.c
-- * the result, out, is returned (was first argument)
------------------------------------------------------------------------
function luaX:chunkid(source, bufflen)
  local out
  local first = string.sub(source, 1, 1)
  if first == "=" then
    out = string.sub(source, 2, bufflen)  -- remove first char
  else  -- out = "source", or "...source"
    if first == "@" then
      source = string.sub(source, 2)  -- skip the '@'
      bufflen = bufflen - #" '...' "
      local l = #source
      out = ""
      if l > bufflen then
        source = string.sub(source, 1 + l - bufflen)  -- get last part of file name
        out = out.."..."
      end
      out = out..source
    else  -- out = [string "string"]
      local len = string.find(source, "[\n\r]")  -- stop at first newline
      len = len and (len - 1) or #source
      bufflen = bufflen - #(" [string \"...\"] ")
      if len > bufflen then len = bufflen end
      out = "[string \""
      if len < #source then  -- must truncate?
        out = out..string.sub(source, 1, len).."..."
      else
        out = out..source
      end
      out = out.."\"]"
    end
  end
  return out
end

--[[--------------------------------------------------------------------
-- Support functions for lexer
-- * all lexer errors eventually reaches lexerror:
     syntaxerror -> lexerror
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- look up token and return keyword if found (also called by parser)
------------------------------------------------------------------------
function luaX:token2str(ls, token)
  if string.sub(token, 1, 3) ~= "TK_" then
    if string.find(token, "%c") then
      return string.format("char(%d)", string.byte(token))
    end
    return token
  else
  end
    return self.tokens[token]
end

------------------------------------------------------------------------
-- throws a lexer error
-- * txtToken has been made local to luaX:lexerror
-- * can't communicate LUA_ERRSYNTAX, so it is unimplemented
------------------------------------------------------------------------
function luaX:lexerror(ls, msg, token)
  local function txtToken(ls, token)
    if token == "TK_NAME" or
       token == "TK_STRING" or
       token == "TK_NUMBER" then
      return ls.buff
    else
      return self:token2str(ls, token)
    end
  end
  local buff = self:chunkid(ls.source, self.MAXSRC)
  local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
  if token then
    msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
  end
  -- luaD_throw(ls->L, LUA_ERRSYNTAX)
  error(msg)
end

------------------------------------------------------------------------
-- throws a syntax error (mainly called by parser)
-- * ls.t.token has to be set by the function calling luaX:llex
--   (see luaX:next and luaX:lookahead elsewhere in this file)
------------------------------------------------------------------------
function luaX:syntaxerror(ls, msg)
  self:lexerror(ls, msg, ls.t.token)
end

------------------------------------------------------------------------
-- move on to next line
------------------------------------------------------------------------
function luaX:currIsNewline(ls)
  return ls.current == "\n" or ls.current == "\r"
end

function luaX:inclinenumber(ls)
  local old = ls.current
  -- lua_assert(currIsNewline(ls))
  self:nextc(ls)  -- skip '\n' or '\r'
  if self:currIsNewline(ls) and ls.current ~= old then
    self:nextc(ls)  -- skip '\n\r' or '\r\n'
  end
  ls.linenumber = ls.linenumber + 1
  if ls.linenumber >= self.MAX_INT then
    self:syntaxerror(ls, "chunk has too many lines")
  end
end

------------------------------------------------------------------------
-- initializes an input stream for lexing
-- * if ls (the lexer state) is passed as a table, then it is filled in,
--   otherwise it has to be retrieved as a return value
-- * LUA_MINBUFFER not used; buffer handling not required any more
------------------------------------------------------------------------
function luaX:setinput(L, ls, z, source)
  if not ls then ls = {} end  -- create struct
  if not ls.lookahead then ls.lookahead = {} end
  if not ls.t then ls.t = {} end
  ls.decpoint = "."
  ls.L = L
  ls.lookahead.token = "TK_EOS"  -- no look-ahead token
  ls.z = z
  ls.fs = nil
  ls.linenumber = 1
  ls.lastline = 1
  ls.source = source
  self:nextc(ls)  -- read first char
end

--[[--------------------------------------------------------------------
-- LEXICAL ANALYZER
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks if current character read is found in the set 'set'
------------------------------------------------------------------------
function luaX:check_next(ls, set)
  if not string.find(set, ls.current, 1, 1) then
    return false
  end
  self:save_and_next(ls)
  return true
end

------------------------------------------------------------------------
-- retrieve next token, checking the lookahead buffer if necessary
-- * note that the macro next(ls) in llex.c is now luaX:nextc
-- * utilized used in lparser.c (various places)
------------------------------------------------------------------------
function luaX:next(ls)
  ls.lastline = ls.linenumber
  if ls.lookahead.token ~= "TK_EOS" then  -- is there a look-ahead token?
    -- this must be copy-by-value
    ls.t.seminfo = ls.lookahead.seminfo  -- use this one
    ls.t.token = ls.lookahead.token
    ls.lookahead.token = "TK_EOS"  -- and discharge it
  else
    ls.t.token = self:llex(ls, ls.t)  -- read next token
  end
end

------------------------------------------------------------------------
-- fill in the lookahead buffer
-- * utilized used in lparser.c:constructor
------------------------------------------------------------------------
function luaX:lookahead(ls)
  -- lua_assert(ls.lookahead.token == "TK_EOS")
  ls.lookahead.token = self:llex(ls, ls.lookahead)
end

------------------------------------------------------------------------
-- gets the next character and returns it
-- * this is the next() macro in llex.c; see notes at the beginning
------------------------------------------------------------------------
function luaX:nextc(ls)
  local c = luaZ:zgetc(ls.z)
  ls.current = c
  return c
end

------------------------------------------------------------------------
-- saves the given character into the token buffer
-- * buffer handling code removed, not used in this implementation
-- * test for maximum token buffer length not used, makes things faster
------------------------------------------------------------------------

function luaX:save(ls, c)
  local buff = ls.buff
  -- if you want to use this, please uncomment luaX.MAX_SIZET further up
  --if #buff > self.MAX_SIZET then
  --  self:lexerror(ls, "lexical element too long")
  --end
  ls.buff = buff..c
end

------------------------------------------------------------------------
-- save current character into token buffer, grabs next character
-- * like luaX:nextc, returns the character read for convenience
------------------------------------------------------------------------
function luaX:save_and_next(ls)
  self:save(ls, ls.current)
  return self:nextc(ls)
end

------------------------------------------------------------------------
-- LUA_NUMBER
-- * luaX:read_numeral is the main lexer function to read a number
-- * luaX:str2d, luaX:buffreplace, luaX:trydecpoint are support functions
------------------------------------------------------------------------

------------------------------------------------------------------------
-- string to number converter (was luaO_str2d from lobject.c)
-- * returns the number, nil if fails (originally returns a boolean)
-- * conversion function originally lua_str2number(s,p), a macro which
--   maps to the strtod() function by default (from luaconf.h)
------------------------------------------------------------------------
function luaX:str2d(s)
  local result = tonumber(s)
  if result then return result end
  -- conversion failed
  if string.lower(string.sub(s, 1, 2)) == "0x" then  -- maybe an hexadecimal constant?
    result = tonumber(s, 16)
    if result then return result end  -- most common case
    -- Was: invalid trailing characters?
    -- In C, this function then skips over trailing spaces.
    -- true is returned if nothing else is found except for spaces.
    -- If there is still something else, then it returns a false.
    -- All this is not necessary using Lua's tonumber.
  end
  return nil
end

------------------------------------------------------------------------
-- single-character replacement, for locale-aware decimal points
------------------------------------------------------------------------
function luaX:buffreplace(ls, from, to)
  local result, buff = "", ls.buff
  for p = 1, #buff do
    local c = string.sub(buff, p, p)
    if c == from then c = to end
    result = result..c
  end
  ls.buff = result
end

------------------------------------------------------------------------
-- Attempt to convert a number by translating '.' decimal points to
-- the decimal point character used by the current locale. This is not
-- needed in Yueliang as Lua's tonumber() is already locale-aware.
-- Instead, the code is here in case the user implements localeconv().
------------------------------------------------------------------------
function luaX:trydecpoint(ls, Token)
  -- format error: try to update decimal point separator
  local old = ls.decpoint
  -- translate the following to Lua if you implement localeconv():
  -- struct lconv *cv = localeconv();
  -- ls->decpoint = (cv ? cv->decimal_point[0] : '.');
  self:buffreplace(ls, old, ls.decpoint)  -- try updated decimal separator
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then
    -- format error with correct decimal point: no more options
    self:buffreplace(ls, ls.decpoint, ".")  -- undo change (for error message)
    self:lexerror(ls, "malformed number", "TK_NUMBER")
  end
end

------------------------------------------------------------------------
-- main number conversion function
-- * "^%w$" needed in the scan in order to detect "EOZ"
------------------------------------------------------------------------
function luaX:read_numeral(ls, Token)
  -- lua_assert(string.find(ls.current, "%d"))
  repeat
    self:save_and_next(ls)
  until string.find(ls.current, "%D") and ls.current ~= "."
  if self:check_next(ls, "Ee") then  -- 'E'?
    self:check_next(ls, "+-")  -- optional exponent sign
  end
  while string.find(ls.current, "^%w$") or ls.current == "_" do
    self:save_and_next(ls)
  end
  self:buffreplace(ls, ".", ls.decpoint)  -- follow locale for decimal point
  local seminfo = self:str2d(ls.buff)
  Token.seminfo = seminfo
  if not seminfo then  -- format error?
    self:trydecpoint(ls, Token) -- try to update decimal point separator
  end
end

------------------------------------------------------------------------
-- count separators ("=") in a long string delimiter
-- * used by luaX:read_long_string
------------------------------------------------------------------------
function luaX:skip_sep(ls)
  local count = 0
  local s = ls.current
  -- lua_assert(s == "[" or s == "]")
  self:save_and_next(ls)
  while ls.current == "=" do
    self:save_and_next(ls)
    count = count + 1
  end
  return (ls.current == s) and count or (-count) - 1
end

------------------------------------------------------------------------
-- reads a long string or long comment
------------------------------------------------------------------------
function luaX:read_long_string(ls, Token, sep)
  local cont = 0
  self:save_and_next(ls)  -- skip 2nd '['
  if self:currIsNewline(ls) then  -- string starts with a newline?
    self:inclinenumber(ls)  -- skip it
  end
  while true do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, Token and "unfinished long string" or
                    "unfinished long comment", "TK_EOS")
    elseif c == "[" then
      --# compatibility code start
      if self.LUA_COMPAT_LSTR then
        if self:skip_sep(ls) == sep then
          self:save_and_next(ls)  -- skip 2nd '['
          cont = cont + 1
          --# compatibility code start
          if self.LUA_COMPAT_LSTR == 1 then
            if sep == 0 then
              self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
            end
          end
          --# compatibility code end
        end
      end
      --# compatibility code end
    elseif c == "]" then
      if self:skip_sep(ls) == sep then
        self:save_and_next(ls)  -- skip 2nd ']'
        --# compatibility code start
        if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
          cont = cont - 1
          if sep == 0 and cont >= 0 then break end
        end
        --# compatibility code end
        break
      end
    elseif self:currIsNewline(ls) then
      self:save(ls, "\n")
      self:inclinenumber(ls)
      if not Token then ls.buff = "" end -- avoid wasting space
    else  -- default
      if Token then
        self:save_and_next(ls)
      else
        self:nextc(ls)
      end
    end--if c
  end--while
  if Token then
    local p = 3 + sep
    Token.seminfo = string.sub(ls.buff, p, -p)
  end
end

------------------------------------------------------------------------
-- reads a string
-- * has been restructured significantly compared to the original C code
------------------------------------------------------------------------

function luaX:read_string(ls, del, Token)
  self:save_and_next(ls)
  while ls.current ~= del do
    local c = ls.current
    if c == "EOZ" then
      self:lexerror(ls, "unfinished string", "TK_EOS")
    elseif self:currIsNewline(ls) then
      self:lexerror(ls, "unfinished string", "TK_STRING")
    elseif c == "\\" then
      c = self:nextc(ls)  -- do not save the '\'
      if self:currIsNewline(ls) then  -- go through
        self:save(ls, "\n")
        self:inclinenumber(ls)
      elseif c ~= "EOZ" then -- will raise an error next loop
        -- escapes handling greatly simplified here:
        local i = string.find("abfnrtv", c, 1, 1)
        if i then
          self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
          self:nextc(ls)
        elseif not string.find(c, "%d") then
          self:save_and_next(ls)  -- handles \\, \", \', and \?
        else  -- \xxx
          c, i = 0, 0
          repeat
            c = 10 * c + ls.current
            self:nextc(ls)
            i = i + 1
          until i >= 3 or not string.find(ls.current, "%d")
          if c > 255 then  -- UCHAR_MAX
            self:lexerror(ls, "escape sequence too large", "TK_STRING")
          end
          self:save(ls, string.char(c))
        end
      end
    else
      self:save_and_next(ls)
    end--if c
  end--while
  self:save_and_next(ls)  -- skip delimiter
  Token.seminfo = string.sub(ls.buff, 2, -2)
end

------------------------------------------------------------------------
-- main lexer function
------------------------------------------------------------------------
function luaX:llex(ls, Token)
  ls.buff = ""
  while true do
    local c = ls.current
    ----------------------------------------------------------------
    if self:currIsNewline(ls) then
      self:inclinenumber(ls)
    ----------------------------------------------------------------
    elseif c == "-" then
      c = self:nextc(ls)
      if c ~= "-" then return "-" end
      -- else is a comment
      local sep = -1
      if self:nextc(ls) == '[' then
        sep = self:skip_sep(ls)
        ls.buff = ""  -- 'skip_sep' may dirty the buffer
      end
      if sep >= 0 then
        self:read_long_string(ls, nil, sep)  -- long comment
        ls.buff = ""
      else  -- else short comment
        while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
          self:nextc(ls)
        end
      end
    ----------------------------------------------------------------
    elseif c == "[" then
      local sep = self:skip_sep(ls)
      if sep >= 0 then
        self:read_long_string(ls, Token, sep)
        return "TK_STRING"
      elseif sep == -1 then
        return "["
      else
        self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
      end
    ----------------------------------------------------------------
    elseif c == "=" then
      c = self:nextc(ls)
      if c ~= "=" then return "="
      else self:nextc(ls); return "TK_EQ" end
    ----------------------------------------------------------------
    elseif c == "<" then
      c = self:nextc(ls)
      if c ~= "=" then return "<"
      else self:nextc(ls); return "TK_LE" end
    ----------------------------------------------------------------
    elseif c == ">" then
      c = self:nextc(ls)
      if c ~= "=" then return ">"
      else self:nextc(ls); return "TK_GE" end
    ----------------------------------------------------------------
    elseif c == "~" then
      c = self:nextc(ls)
      if c ~= "=" then return "~"
      else self:nextc(ls); return "TK_NE" end
    ----------------------------------------------------------------
    elseif c == "\"" or c == "'" then
      self:read_string(ls, c, Token)
      return "TK_STRING"
    ----------------------------------------------------------------
    elseif c == "." then
      c = self:save_and_next(ls)
      if self:check_next(ls, ".") then
        if self:check_next(ls, ".") then
          return "TK_DOTS"   -- ...
        else return "TK_CONCAT"   -- ..
        end
      elseif not string.find(c, "%d") then
        return "."
      else
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      end
    ----------------------------------------------------------------
    elseif c == "EOZ" then
      return "TK_EOS"
    ----------------------------------------------------------------
    else  -- default
      if string.find(c, "%s") then
        -- lua_assert(self:currIsNewline(ls))
        self:nextc(ls)
      elseif string.find(c, "%d") then
        self:read_numeral(ls, Token)
        return "TK_NUMBER"
      elseif string.find(c, "[_%a]") then
        -- identifier or reserved word
        repeat
          c = self:save_and_next(ls)
        until c == "EOZ" or not string.find(c, "[_%w]")
        local ts = ls.buff
        local tok = self.enums[ts]
        if tok then return tok end  -- reserved word?
        Token.seminfo = ts
        return "TK_NAME"
      else
        self:nextc(ls)
        return c  -- single-char tokens (+ - / ...)
      end
    ----------------------------------------------------------------
    end--if c
  end--while
end

return luaX
end;
};
G2L_MODULES[G2L["14"]] = {
Closure = function()
    local script = G2L["14"];
--[[--------------------------------------------------------------------

  lparser.lua
  Lua 5 parser in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * some unused C code that were not converted are kept as comments
-- * LUA_COMPAT_VARARG option changed into a comment block
-- * for value/size specific code added, look for 'NOTE: '
--
-- Not implemented:
-- * luaX_newstring not needed by this Lua implementation
-- * luaG_checkcode() in assert is not currently implemented
--
-- Added:
-- * some constants added from various header files
-- * luaY.LUA_QS used in error_expected, check_match (from luaconf.h)
-- * luaY:LUA_QL needed for error messages (from luaconf.h)
-- * luaY:growvector (from lmem.h) -- skeleton only, limit checking
-- * luaY.SHRT_MAX (from <limits.h>) for registerlocalvar
-- * luaY:newproto (from lfunc.c)
-- * luaY:int2fb (from lobject.c)
-- * NOTE: HASARG_MASK, for implementing a VARARG_HASARG bit operation
-- * NOTE: value-specific code for VARARG_NEEDSARG to replace a bitop
--
-- Changed in 5.1.x:
-- * various code changes are not detailed...
-- * names of constants may have changed, e.g. added a LUAI_ prefix
-- * struct expkind: added VKNUM, VVARARG; VCALL's info changed?
-- * struct expdesc: added nval
-- * struct FuncState: upvalues data type changed to upvaldesc
-- * macro hasmultret is new
-- * function checklimit moved to parser from lexer
-- * functions anchor_token, errorlimit, checknext are new
-- * checknext is new, equivalent to 5.0.x's check, see check too
-- * luaY:next and luaY:lookahead moved to lexer
-- * break keyword no longer skipped in luaY:breakstat
-- * function new_localvarstr replaced by new_localvarliteral
-- * registerlocalvar limits local variables to SHRT_MAX
-- * create_local deleted, new_localvarliteral used instead
-- * constant LUAI_MAXUPVALUES increased to 60
-- * constants MAXPARAMS, LUA_MAXPARSERLEVEL, MAXSTACK removed
-- * function interface changed: singlevaraux, singlevar
-- * enterlevel and leavelevel uses nCcalls to track call depth
-- * added a name argument to main entry function, luaY:parser
-- * function luaY_index changed to yindex
-- * luaY:int2fb()'s table size encoding format has been changed
-- * luaY:log2() no longer needed for table constructors
-- * function code_params deleted, functionality folded in parlist
-- * vararg flags handling (is_vararg) changes; also see VARARG_*
-- * LUA_COMPATUPSYNTAX section for old-style upvalues removed
-- * repeatstat() calls chunk() instead of block()
-- * function interface changed: cond, test_then_block
-- * while statement implementation considerably simplified; MAXEXPWHILE
--   and EXTRAEXP no longer required, no limits to the complexity of a
--   while condition
-- * repeat, forbody statement implementation has major changes,
--   mostly due to new scoping behaviour of local variables
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

--requires luaP, luaX, luaK
local luaY = {}
local luaX = require(script.Parent.LuaX)
local luaK = require(script.Parent.LuaK)(luaY)
local luaP = require(script.Parent.LuaP)

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumps to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- constants used by parser
-- * picks up duplicate values from luaX if required
------------------------------------------------------------------------

luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

luaY.SHRT_MAX = 32767 -- (from <limits.h>)
luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
  -- * INT_MAX-2 for 32-bit systems
luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

luaY.VARARG_HASARG = 1  -- (from lobject.h)
-- NOTE: HASARG_MASK is value-specific
luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
luaY.VARARG_ISVARARG = 2
-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
luaY.VARARG_NEEDSARG = 4

luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- LUA_QL describes how error messages quote program elements.
-- CHANGE it if you want a different appearance. (from luaconf.h)
------------------------------------------------------------------------
function luaY:LUA_QL(x)
  return "'"..x.."'"
end

------------------------------------------------------------------------
-- this is a stripped-down luaM_growvector (from lmem.h) which is a
-- macro based on luaM_growaux (in lmem.c); all the following does is
-- reproduce the size limit checking logic of the original function
-- so that error behaviour is identical; all arguments preserved for
-- convenience, even those which are unused
-- * set the t field to nil, since this originally does a sizeof(t)
-- * size (originally a pointer) is never updated, their final values
--   are set by luaY:close_func(), so overall things should still work
------------------------------------------------------------------------
function luaY:growvector(L, v, nelems, size, t, limit, e)
  if nelems >= limit then
    error(e)  -- was luaG_runerror
  end
end

------------------------------------------------------------------------
-- initialize a new function prototype structure (from lfunc.c)
-- * used only in open_func()
------------------------------------------------------------------------
function luaY:newproto(L)
  local f = {} -- Proto
  -- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
  f.k = {}
  f.sizek = 0
  f.p = {}
  f.sizep = 0
  f.code = {}
  f.sizecode = 0
  f.sizelineinfo = 0
  f.sizeupvalues = 0
  f.nups = 0
  f.upvalues = {}
  f.numparams = 0
  f.is_vararg = 0
  f.maxstacksize = 0
  f.lineinfo = {}
  f.sizelocvars = 0
  f.locvars = {}
  f.lineDefined = 0
  f.lastlinedefined = 0
  f.source = nil
  return f
end

------------------------------------------------------------------------
-- converts an integer to a "floating point byte", represented as
-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
-- eeeee != 0 and (xxx) otherwise.
------------------------------------------------------------------------
function luaY:int2fb(x)
  local e = 0  -- exponent
  while x >= 16 do
    x = math.floor((x + 1) / 2)
    e = e + 1
  end
  if x < 8 then
    return x
  else
    return ((e + 1) * 8) + (x - 8)
  end
end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- true of the kind of expression produces multiple return values
------------------------------------------------------------------------
function luaY:hasmultret(k)
  return k == "VCALL" or k == "VVARARG"
end

------------------------------------------------------------------------
-- convenience function to access active local i, returns entry
------------------------------------------------------------------------
function luaY:getlocvar(fs, i)
  return fs.f.locvars[ fs.actvar[i] ]
end

------------------------------------------------------------------------
-- check a limit, string m provided as an error message
------------------------------------------------------------------------
function luaY:checklimit(fs, v, l, m)
  if v > l then self:errorlimit(fs, l, m) end
end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumps out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- prototypes for recursive non-terminal functions
------------------------------------------------------------------------
-- prototypes deleted; not required in Lua

------------------------------------------------------------------------
-- reanchor if last token is has a constant string, see close_func()
-- * used only in close_func()
------------------------------------------------------------------------
function luaY:anchor_token(ls)
  if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
    -- not relevant to Lua implementation of parser
    -- local ts = ls.t.seminfo
    -- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
  end
end

------------------------------------------------------------------------
-- throws a syntax error if token expected is not there
------------------------------------------------------------------------
function luaY:error_expected(ls, token)
  luaX:syntaxerror(ls,
    string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
end

------------------------------------------------------------------------
-- prepares error message for display, for limits exceeded
-- * used only in checklimit()
------------------------------------------------------------------------
function luaY:errorlimit(fs, limit, what)
  local msg = (fs.f.linedefined == 0) and
    string.format("main function has more than %d %s", limit, what) or
    string.format("function at line %d has more than %d %s",
                  fs.f.linedefined, limit, what)
  luaX:lexerror(fs.ls, msg, 0)
end

------------------------------------------------------------------------
-- tests for a token, returns outcome
-- * return value changed to boolean
------------------------------------------------------------------------
function luaY:testnext(ls, c)
  if ls.t.token == c then
    luaX:next(ls)
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- check for existence of a token, throws error if not found
------------------------------------------------------------------------
function luaY:check(ls, c)
  if ls.t.token ~= c then
    self:error_expected(ls, c)
  end
end

------------------------------------------------------------------------
-- verify existence of a token, then skip it
------------------------------------------------------------------------
function luaY:checknext(ls, c)
  self:check(ls, c)
  luaX:next(ls)
end

------------------------------------------------------------------------
-- throws error if condition not matched
------------------------------------------------------------------------
function luaY:check_condition(ls, c, msg)
  if not c then luaX:syntaxerror(ls, msg) end
end

------------------------------------------------------------------------
-- verifies token conditions are met or else throw error
------------------------------------------------------------------------
function luaY:check_match(ls, what, who, where)
  if not self:testnext(ls, what) then
    if where == ls.linenumber then
      self:error_expected(ls, what)
    else
      luaX:syntaxerror(ls, string.format(
        self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
        luaX:token2str(ls, what), luaX:token2str(ls, who), where))
    end
  end
end

------------------------------------------------------------------------
-- expect that token is a name, return the name
------------------------------------------------------------------------
function luaY:str_checkname(ls)
  self:check(ls, "TK_NAME")
  local ts = ls.t.seminfo
  luaX:next(ls)
  return ts
end

------------------------------------------------------------------------
-- initialize a struct expdesc, expression description data structure
------------------------------------------------------------------------
function luaY:init_exp(e, k, i)
  e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
  e.k = k
  e.info = i
end

------------------------------------------------------------------------
-- adds given string s in string pool, sets e as VK
------------------------------------------------------------------------
function luaY:codestring(ls, e, s)
  self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
end

------------------------------------------------------------------------
-- consume a name token, adds it to string pool, sets e as VK
------------------------------------------------------------------------
function luaY:checkname(ls, e)
  self:codestring(ls, e, self:str_checkname(ls))
end

------------------------------------------------------------------------
-- creates struct entry for a local variable
-- * used only in new_localvar()
------------------------------------------------------------------------
function luaY:registerlocalvar(ls, varname)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
                  nil, self.SHRT_MAX, "too many local variables")
  -- loop to initialize empty f.locvar positions not required
  f.locvars[fs.nlocvars] = {} -- LocVar
  f.locvars[fs.nlocvars].varname = varname
  -- luaC_objbarrier(ls.L, f, varname) /* GC */
  local nlocvars = fs.nlocvars
  fs.nlocvars = fs.nlocvars + 1
  return nlocvars
end

------------------------------------------------------------------------
-- creates a new local variable given a name and an offset from nactvar
-- * used in fornum(), forlist(), parlist(), body()
------------------------------------------------------------------------
function luaY:new_localvarliteral(ls, v, n)
  self:new_localvar(ls, v, n)
end

------------------------------------------------------------------------
-- register a local variable, set in active variable list
------------------------------------------------------------------------
function luaY:new_localvar(ls, name, n)
  local fs = ls.fs
  self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
  fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
end

------------------------------------------------------------------------
-- adds nvars number of new local variables, set debug information
------------------------------------------------------------------------
function luaY:adjustlocalvars(ls, nvars)
  local fs = ls.fs
  fs.nactvar = fs.nactvar + nvars
  for i = nvars, 1, -1 do
    self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
  end
end

------------------------------------------------------------------------
-- removes a number of locals, set debug information
------------------------------------------------------------------------
function luaY:removevars(ls, tolevel)
  local fs = ls.fs
  while fs.nactvar > tolevel do
    fs.nactvar = fs.nactvar - 1
    self:getlocvar(fs, fs.nactvar).endpc = fs.pc
  end
end

------------------------------------------------------------------------
-- returns an existing upvalue index based on the given name, or
-- creates a new upvalue struct entry and returns the new index
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:indexupvalue(fs, name, v)
  local f = fs.f
  for i = 0, f.nups - 1 do
    if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
      assert(f.upvalues[i] == name)
      return i
    end
  end
  -- new one
  self:checklimit(fs, f.nups + 1, self.LUAI_MAXUPVALUES, "upvalues")
  self:growvector(fs.L, f.upvalues, f.nups, f.sizeupvalues,
                  nil, self.MAX_INT, "")
  -- loop to initialize empty f.upvalues positions not required
  f.upvalues[f.nups] = name
  -- luaC_objbarrier(fs->L, f, name); /* GC */
  assert(v.k == "VLOCAL" or v.k == "VUPVAL")
  -- this is a partial copy; only k & info fields used
  fs.upvalues[f.nups] = { k = v.k, info = v.info }
  local nups = f.nups
  f.nups = f.nups + 1
  return nups
end

------------------------------------------------------------------------
-- search the local variable namespace of the given fs for a match
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:searchvar(fs, n)
  for i = fs.nactvar - 1, 0, -1 do
    if n == self:getlocvar(fs, i).varname then
      return i
    end
  end
  return -1  -- not found
end

------------------------------------------------------------------------
-- * mark upvalue flags in function states up to a given level
-- * used only in singlevaraux()
------------------------------------------------------------------------
function luaY:markupval(fs, level)
  local bl = fs.bl
  while bl and bl.nactvar > level do bl = bl.previous end
  if bl then bl.upval = true end
end

------------------------------------------------------------------------
-- handle locals, globals and upvalues and related processing
-- * search mechanism is recursive, calls itself to search parents
-- * used only in singlevar()
------------------------------------------------------------------------
function luaY:singlevaraux(fs, n, var, base)
  if fs == nil then  -- no more levels?
    self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
    return "VGLOBAL"
  else
    local v = self:searchvar(fs, n)  -- look up at current level
    if v >= 0 then
      self:init_exp(var, "VLOCAL", v)
      if base == 0 then
        self:markupval(fs, v)  -- local will be used as an upval
      end
      return "VLOCAL"
    else  -- not found at current level; try upper one
      if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
        return "VGLOBAL"
      end
      var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
      var.k = "VUPVAL"  -- upvalue in this level
      return "VUPVAL"
    end--if v
  end--if fs
end

------------------------------------------------------------------------
-- consume a name token, creates a variable (global|local|upvalue)
-- * used in prefixexp(), funcname()
------------------------------------------------------------------------
function luaY:singlevar(ls, var)
  local varname = self:str_checkname(ls)
  local fs = ls.fs
  if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
    var.info = luaK:stringK(fs, varname)  -- info points to global name
  end
end

------------------------------------------------------------------------
-- adjust RHS to match LHS in an assignment
-- * used in assignment(), forlist(), localstat()
------------------------------------------------------------------------
function luaY:adjust_assign(ls, nvars, nexps, e)
  local fs = ls.fs
  local extra = nvars - nexps
  if self:hasmultret(e.k) then
    extra = extra + 1  -- includes call itself
    if extra <= 0 then extra = 0 end
    luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
    if extra > 1 then luaK:reserveregs(fs, extra - 1) end
  else
    if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
    if extra > 0 then
      local reg = fs.freereg
      luaK:reserveregs(fs, extra)
      luaK:_nil(fs, reg, extra)
    end
  end
end

------------------------------------------------------------------------
-- tracks and limits parsing depth, assert check at end of parsing
------------------------------------------------------------------------
function luaY:enterlevel(ls)
  ls.L.nCcalls = ls.L.nCcalls + 1
  if ls.L.nCcalls > self.LUAI_MAXCCALLS then
    luaX:lexerror(ls, "chunk has too many syntax levels", 0)
  end
end

------------------------------------------------------------------------
-- tracks parsing depth, a pair with luaY:enterlevel()
------------------------------------------------------------------------
function luaY:leavelevel(ls)
  ls.L.nCcalls = ls.L.nCcalls - 1
end

------------------------------------------------------------------------
-- enters a code unit, initializes elements
------------------------------------------------------------------------
function luaY:enterblock(fs, bl, isbreakable)
  bl.breaklist = luaK.NO_JUMP
  bl.isbreakable = isbreakable
  bl.nactvar = fs.nactvar
  bl.upval = false
  bl.previous = fs.bl
  fs.bl = bl
  assert(fs.freereg == fs.nactvar)
end

------------------------------------------------------------------------
-- leaves a code unit, close any upvalues
------------------------------------------------------------------------
function luaY:leaveblock(fs)
  local bl = fs.bl
  fs.bl = bl.previous
  self:removevars(fs.ls, bl.nactvar)
  if bl.upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  -- a block either controls scope or breaks (never both)
  assert(not bl.isbreakable or not bl.upval)
  assert(bl.nactvar == fs.nactvar)
  fs.freereg = fs.nactvar  -- free registers
  luaK:patchtohere(fs, bl.breaklist)
end

------------------------------------------------------------------------
-- implement the instantiation of a function prototype, append list of
-- upvalues after the instantiation instruction
-- * used only in body()
------------------------------------------------------------------------
function luaY:pushclosure(ls, func, v)
  local fs = ls.fs
  local f = fs.f
  self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
                  luaP.MAXARG_Bx, "constant table overflow")
  -- loop to initialize empty f.p positions not required
  f.p[fs.np] = func.f
  fs.np = fs.np + 1
  -- luaC_objbarrier(ls->L, f, func->f); /* C */
  self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
  for i = 0, func.f.nups - 1 do
    local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
    luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
  end
end

------------------------------------------------------------------------
-- opening of a function
------------------------------------------------------------------------
function luaY:open_func(ls, fs)
  local L = ls.L
  local f = self:newproto(ls.L)
  fs.f = f
  fs.prev = ls.fs  -- linked list of funcstates
  fs.ls = ls
  fs.L = L
  ls.fs = fs
  fs.pc = 0
  fs.lasttarget = -1
  fs.jpc = luaK.NO_JUMP
  fs.freereg = 0
  fs.nk = 0
  fs.np = 0
  fs.nlocvars = 0
  fs.nactvar = 0
  fs.bl = nil
  f.source = ls.source
  f.maxstacksize = 2  -- registers 0/1 are always valid
  fs.h = {}  -- constant table; was luaH_new call
  -- anchor table of constants and prototype (to avoid being collected)
  -- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
  -- setptvalue2s(L, L->top, f); incr_top(L);
end

------------------------------------------------------------------------
-- closing of a function
------------------------------------------------------------------------
function luaY:close_func(ls)
  local L = ls.L
  local fs = ls.fs
  local f = fs.f
  self:removevars(ls, 0)
  luaK:ret(fs, 0, 0)  -- final return
  -- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
  -- f->locvars, f->upvalues; not required for Lua table arrays
  f.sizecode = fs.pc
  f.sizelineinfo = fs.pc
  f.sizek = fs.nk
  f.sizep = fs.np
  f.sizelocvars = fs.nlocvars
  f.sizeupvalues = f.nups
  --assert(luaG_checkcode(f))  -- currently not implemented
  assert(fs.bl == nil)
  ls.fs = fs.prev
  -- the following is not required for this implementation; kept here
  -- for completeness
  -- L->top -= 2;  /* remove table and prototype from the stack */
  -- last token read was anchored in defunct function; must reanchor it
  if fs then self:anchor_token(ls) end
end

------------------------------------------------------------------------
-- parser initialization function
-- * note additional sub-tables needed for LexState, FuncState
------------------------------------------------------------------------
function luaY:parser(L, z, buff, name)
  local lexstate = {}  -- LexState
        lexstate.t = {}
        lexstate.lookahead = {}
  local funcstate = {}  -- FuncState
        funcstate.upvalues = {}
        funcstate.actvar = {}
  -- the following nCcalls initialization added for convenience
  L.nCcalls = 0
  lexstate.buff = buff
  luaX:setinput(L, lexstate, z, name)
  self:open_func(lexstate, funcstate)
  funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
  luaX:next(lexstate)  -- read first token
  self:chunk(lexstate)
  self:check(lexstate, "TK_EOS")
  self:close_func(lexstate)
  assert(funcstate.prev == nil)
  assert(funcstate.f.nups == 0)
  assert(lexstate.fs == nil)
  return funcstate.f
end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a function name suffix, for function call specifications
-- * used in primaryexp(), funcname()
------------------------------------------------------------------------
function luaY:field(ls, v)
  -- field -> ['.' | ':'] NAME
  local fs = ls.fs
  local key = {}  -- expdesc
  luaK:exp2anyreg(fs, v)
  luaX:next(ls)  -- skip the dot or colon
  self:checkname(ls, key)
  luaK:indexed(fs, v, key)
end

------------------------------------------------------------------------
-- parse a table indexing suffix, for constructors, expressions
-- * used in recfield(), primaryexp()
------------------------------------------------------------------------
function luaY:yindex(ls, v)
  -- index -> '[' expr ']'
  luaX:next(ls)  -- skip the '['
  self:expr(ls, v)
  luaK:exp2val(ls.fs, v)
  self:checknext(ls, "]")
end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parse a table record (hash) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:recfield(ls, cc)
  -- recfield -> (NAME | '['exp1']') = exp1
  local fs = ls.fs
  local reg = ls.fs.freereg
  local key, val = {}, {}  -- expdesc
  if ls.t.token == "TK_NAME" then
    self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
    self:checkname(ls, key)
  else  -- ls->t.token == '['
    self:yindex(ls, key)
  end
  cc.nh = cc.nh + 1
  self:checknext(ls, "=")
  local rkkey = luaK:exp2RK(fs, key)
  self:expr(ls, val)
  luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
  fs.freereg = reg  -- free registers
end

------------------------------------------------------------------------
-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
-- * used in constructor()
------------------------------------------------------------------------
function luaY:closelistfield(fs, cc)
  if cc.v.k == "VVOID" then return end  -- there is no list item
  luaK:exp2nextreg(fs, cc.v)
  cc.v.k = "VVOID"
  if cc.tostore == luaP.LFIELDS_PER_FLUSH then
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
    cc.tostore = 0  -- no more items pending
  end
end

------------------------------------------------------------------------
-- emit a set list instruction at the end of parsing list constructor
-- * used in constructor()
------------------------------------------------------------------------
function luaY:lastlistfield(fs, cc)
  if cc.tostore == 0 then return end
  if self:hasmultret(cc.v.k) then
    luaK:setmultret(fs, cc.v)
    luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
    cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
  else
    if cc.v.k ~= "VVOID" then
      luaK:exp2nextreg(fs, cc.v)
    end
    luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
  end
end

------------------------------------------------------------------------
-- parse a table list (array) field
-- * used in constructor()
------------------------------------------------------------------------
function luaY:listfield(ls, cc)
  self:expr(ls, cc.v)
  self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
  cc.na = cc.na + 1
  cc.tostore = cc.tostore + 1
end

------------------------------------------------------------------------
-- parse a table constructor
-- * used in funcargs(), simpleexp()
------------------------------------------------------------------------
function luaY:constructor(ls, t)
  -- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
  -- field -> recfield | listfield
  -- fieldsep -> ',' | ';'
  local fs = ls.fs
  local line = ls.linenumber
  local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
  local cc = {}  -- ConsControl
        cc.v = {}
  cc.na, cc.nh, cc.tostore = 0, 0, 0
  cc.t = t
  self:init_exp(t, "VRELOCABLE", pc)
  self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
  luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
  self:checknext(ls, "{")
  repeat
    assert(cc.v.k == "VVOID" or cc.tostore > 0)
    if ls.t.token == "}" then break end
    self:closelistfield(fs, cc)
    local c = ls.t.token

    if c == "TK_NAME" then  -- may be listfields or recfields
      luaX:lookahead(ls)
      if ls.lookahead.token ~= "=" then  -- expression?
        self:listfield(ls, cc)
      else
        self:recfield(ls, cc)
      end
    elseif c == "[" then  -- constructor_item -> recfield
      self:recfield(ls, cc)
    else  -- constructor_part -> listfield
      self:listfield(ls, cc)
    end
  until not self:testnext(ls, ",") and not self:testnext(ls, ";")
  self:check_match(ls, "}", "{", line)
  self:lastlistfield(fs, cc)
  luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
  luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
end

-- }======================================================================

------------------------------------------------------------------------
-- parse the arguments (parameters) of a function declaration
-- * used in body()
------------------------------------------------------------------------
function luaY:parlist(ls)
  -- parlist -> [ param { ',' param } ]
  local fs = ls.fs
  local f = fs.f
  local nparams = 0
  f.is_vararg = 0
  if ls.t.token ~= ")" then  -- is 'parlist' not empty?
    repeat
      local c = ls.t.token
      if c == "TK_NAME" then  -- param -> NAME
        self:new_localvar(ls, self:str_checkname(ls), nparams)
        nparams = nparams + 1
      elseif c == "TK_DOTS" then  -- param -> `...'
        luaX:next(ls)
-- [[
-- #if defined(LUA_COMPAT_VARARG)
        -- use `arg' as default name
        self:new_localvarliteral(ls, "arg", nparams)
        nparams = nparams + 1
        f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
-- #endif
--]]
        f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
      else
        luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
      end
    until f.is_vararg ~= 0 or not self:testnext(ls, ",")
  end--if
  self:adjustlocalvars(ls, nparams)
  -- NOTE: the following works only when HASARG_MASK is 2!
  f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
  luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
end

------------------------------------------------------------------------
-- parse function declaration body
-- * used in simpleexp(), localfunc(), funcstat()
------------------------------------------------------------------------
function luaY:body(ls, e, needself, line)
  -- body ->  '(' parlist ')' chunk END
  local new_fs = {}  -- FuncState
        new_fs.upvalues = {}
        new_fs.actvar = {}
  self:open_func(ls, new_fs)
  new_fs.f.lineDefined = line
  self:checknext(ls, "(")
  if needself then
    self:new_localvarliteral(ls, "self", 0)
    self:adjustlocalvars(ls, 1)
  end
  self:parlist(ls)
  self:checknext(ls, ")")
  self:chunk(ls)
  new_fs.f.lastlinedefined = ls.linenumber
  self:check_match(ls, "TK_END", "TK_FUNCTION", line)
  self:close_func(ls)
  self:pushclosure(ls, new_fs, e)
end

------------------------------------------------------------------------
-- parse a list of comma-separated expressions
-- * used is multiple locations
------------------------------------------------------------------------
function luaY:explist1(ls, v)
  -- explist1 -> expr { ',' expr }
  local n = 1  -- at least one expression
  self:expr(ls, v)
  while self:testnext(ls, ",") do
    luaK:exp2nextreg(ls.fs, v)
    self:expr(ls, v)
    n = n + 1
  end
  return n
end

------------------------------------------------------------------------
-- parse the parameters of a function call
-- * contrast with parlist(), used in function declarations
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:funcargs(ls, f)
  local fs = ls.fs
  local args = {}  -- expdesc
  local nparams
  local line = ls.linenumber
  local c = ls.t.token
  if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
    if line ~= ls.lastline then
      luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
    end
    luaX:next(ls)
    if ls.t.token == ")" then  -- arg list is empty?
      args.k = "VVOID"
    else
      self:explist1(ls, args)
      luaK:setmultret(fs, args)
    end
    self:check_match(ls, ")", "(", line)
  elseif c == "{" then  -- funcargs -> constructor
    self:constructor(ls, args)
  elseif c == "TK_STRING" then  -- funcargs -> STRING
    self:codestring(ls, args, ls.t.seminfo)
    luaX:next(ls)  -- must use 'seminfo' before 'next'
  else
    luaX:syntaxerror(ls, "function arguments expected")
    return
  end
  assert(f.k == "VNONRELOC")
  local base = f.info  -- base register for call
  if self:hasmultret(args.k) then
    nparams = self.LUA_MULTRET  -- open call
  else
    if args.k ~= "VVOID" then
      luaK:exp2nextreg(fs, args)  -- close last argument
    end
    nparams = fs.freereg - (base + 1)
  end
  self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
  luaK:fixline(fs, line)
  fs.freereg = base + 1  -- call remove function and arguments and leaves
                         -- (unless changed) one result
end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- parses an expression in parentheses or a single variable
-- * used in primaryexp()
------------------------------------------------------------------------
function luaY:prefixexp(ls, v)
  -- prefixexp -> NAME | '(' expr ')'
  local c = ls.t.token
  if c == "(" then
    local line = ls.linenumber
    luaX:next(ls)
    self:expr(ls, v)
    self:check_match(ls, ")", "(", line)
    luaK:dischargevars(ls.fs, v)
  elseif c == "TK_NAME" then
    self:singlevar(ls, v)
  else
    luaX:syntaxerror(ls, "unexpected symbol")
  end--if c
  return
end

------------------------------------------------------------------------
-- parses a prefixexp (an expression in parentheses or a single variable)
-- or a function call specification
-- * used in simpleexp(), assignment(), exprstat()
------------------------------------------------------------------------
function luaY:primaryexp(ls, v)
  -- primaryexp ->
  --    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
  local fs = ls.fs
  self:prefixexp(ls, v)
  while true do
    local c = ls.t.token
    if c == "." then  -- field
      self:field(ls, v)
    elseif c == "[" then  -- '[' exp1 ']'
      local key = {}  -- expdesc
      luaK:exp2anyreg(fs, v)
      self:yindex(ls, key)
      luaK:indexed(fs, v, key)
    elseif c == ":" then  -- ':' NAME funcargs
      local key = {}  -- expdesc
      luaX:next(ls)
      self:checkname(ls, key)
      luaK:_self(fs, v, key)
      self:funcargs(ls, v)
    elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
      luaK:exp2nextreg(fs, v)
      self:funcargs(ls, v)
    else
      return
    end--if c
  end--while
end

------------------------------------------------------------------------
-- parses general expression types, constants handled here
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:simpleexp(ls, v)
  -- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
  --              constructor | FUNCTION body | primaryexp
  local c = ls.t.token
  if c == "TK_NUMBER" then
    self:init_exp(v, "VKNUM", 0)
    v.nval = ls.t.seminfo
  elseif c == "TK_STRING" then
    self:codestring(ls, v, ls.t.seminfo)
  elseif c == "TK_NIL" then
    self:init_exp(v, "VNIL", 0)
  elseif c == "TK_TRUE" then
    self:init_exp(v, "VTRUE", 0)
  elseif c == "TK_FALSE" then
    self:init_exp(v, "VFALSE", 0)
  elseif c == "TK_DOTS" then  -- vararg
    local fs = ls.fs
    self:check_condition(ls, fs.f.is_vararg ~= 0,
                    "cannot use "..self:LUA_QL("...").." outside a vararg function");
    -- NOTE: the following substitutes for a bitop, but is value-specific
    local is_vararg = fs.f.is_vararg
    if is_vararg >= self.VARARG_NEEDSARG then
      fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
    end
    self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
  elseif c == "{" then  -- constructor
    self:constructor(ls, v)
    return
  elseif c == "TK_FUNCTION" then
    luaX:next(ls)
    self:body(ls, v, false, ls.linenumber)
    return
  else
    self:primaryexp(ls, v)
    return
  end--if c
  luaX:next(ls)
end

------------------------------------------------------------------------
-- Translates unary operators tokens if found, otherwise returns
-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
-- * used in subexpr()
------------------------------------------------------------------------
function luaY:getunopr(op)
  if op == "TK_NOT" then
    return "OPR_NOT"
  elseif op == "-" then
    return "OPR_MINUS"
  elseif op == "#" then
    return "OPR_LEN"
  else
    return "OPR_NOUNOPR"
  end
end

------------------------------------------------------------------------
-- Translates binary operator tokens if found, otherwise returns
-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
-- * used in subexpr()
------------------------------------------------------------------------
luaY.getbinopr_table = {
  ["+"] = "OPR_ADD",
  ["-"] = "OPR_SUB",
  ["*"] = "OPR_MUL",
  ["/"] = "OPR_DIV",
  ["%"] = "OPR_MOD",
  ["^"] = "OPR_POW",
  ["TK_CONCAT"] = "OPR_CONCAT",
  ["TK_NE"] = "OPR_NE",
  ["TK_EQ"] = "OPR_EQ",
  ["<"] = "OPR_LT",
  ["TK_LE"] = "OPR_LE",
  [">"] = "OPR_GT",
  ["TK_GE"] = "OPR_GE",
  ["TK_AND"] = "OPR_AND",
  ["TK_OR"] = "OPR_OR",
}
function luaY:getbinopr(op)
  local opr = self.getbinopr_table[op]
  if opr then return opr else return "OPR_NOBINOPR" end
end

------------------------------------------------------------------------
-- the following priority table consists of pairs of left/right values
-- for binary operators (was a static const struct); grep for ORDER OPR
-- * the following struct is replaced:
--   static const struct {
--     lu_byte left;  /* left priority for each binary operator */
--     lu_byte right; /* right priority */
--   } priority[] = {  /* ORDER OPR */
------------------------------------------------------------------------
luaY.priority = {
  {6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
  {10, 9}, {5, 4},                 -- power and concat (right associative)
  {3, 3}, {3, 3},                  -- equality
  {3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
  {2, 2}, {1, 1}                   -- logical (and/or)
}

luaY.UNARY_PRIORITY = 8  -- priority for unary operators

------------------------------------------------------------------------
-- Parse subexpressions. Includes handling of unary operators and binary
-- operators. A subexpr is given the rhs priority level of the operator
-- immediately left of it, if any (limit is -1 if none,) and if a binop
-- is found, limit is compared with the lhs priority level of the binop
-- in order to determine which executes first.
------------------------------------------------------------------------

------------------------------------------------------------------------
-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
-- where 'binop' is any binary operator with a priority higher than 'limit'
-- * for priority lookups with self.priority[], 1=left and 2=right
-- * recursively called
-- * used in expr()
------------------------------------------------------------------------
function luaY:subexpr(ls, v, limit)
  self:enterlevel(ls)
  local uop = self:getunopr(ls.t.token)
  if uop ~= "OPR_NOUNOPR" then
    luaX:next(ls)
    self:subexpr(ls, v, self.UNARY_PRIORITY)
    luaK:prefix(ls.fs, uop, v)
  else
    self:simpleexp(ls, v)
  end
  -- expand while operators have priorities higher than 'limit'
  local op = self:getbinopr(ls.t.token)
  while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
    local v2 = {}  -- expdesc
    luaX:next(ls)
    luaK:infix(ls.fs, op, v)
    -- read sub-expression with higher priority
    local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
    luaK:posfix(ls.fs, op, v, v2)
    op = nextop
  end
  self:leavelevel(ls)
  return op  -- return first untreated operator
end

------------------------------------------------------------------------
-- Expression parsing starts here. Function subexpr is entered with the
-- left operator (which is non-existent) priority of -1, which is lower
-- than all actual operators. Expr information is returned in parm v.
-- * used in multiple locations
------------------------------------------------------------------------
function luaY:expr(ls, v)
  self:subexpr(ls, v, 0)
end

-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- checks next token, used as a look-ahead
-- * returns boolean instead of 0|1
-- * used in retstat(), chunk()
------------------------------------------------------------------------
function luaY:block_follow(token)
  if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
     or token == "TK_UNTIL" or token == "TK_EOS" then
    return true
  else
    return false
  end
end

------------------------------------------------------------------------
-- parse a code block or unit
-- * used in multiple functions
------------------------------------------------------------------------
function luaY:block(ls)
  -- block -> chunk
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, false)
  self:chunk(ls)
  assert(bl.breaklist == luaK.NO_JUMP)
  self:leaveblock(fs)
end

------------------------------------------------------------------------
-- structure to chain all variables in the left-hand side of an
-- assignment
-- struct LHS_assign:
--   prev  -- (table: struct LHS_assign)
--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- check whether, in an assignment to a local variable, the local variable
-- is needed in a previous assignment (to a table). If so, save original
-- local value in a safe place and use this safe copy in the previous
-- assignment.
-- * used in assignment()
------------------------------------------------------------------------
function luaY:check_conflict(ls, lh, v)
  local fs = ls.fs
  local extra = fs.freereg  -- eventual position to save local variable
  local conflict = false
  while lh do
    if lh.v.k == "VINDEXED" then
      if lh.v.info == v.info then  -- conflict?
        conflict = true
        lh.v.info = extra  -- previous assignment will use safe copy
      end
      if lh.v.aux == v.info then  -- conflict?
        conflict = true
        lh.v.aux = extra  -- previous assignment will use safe copy
      end
    end
    lh = lh.prev
  end
  if conflict then
    luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
-- parse a variable assignment sequence
-- * recursively called
-- * used in exprstat()
------------------------------------------------------------------------
function luaY:assignment(ls, lh, nvars)
  local e = {}  -- expdesc
  -- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
  local c = lh.v.k
  self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
                       or c == "VINDEXED", "syntax error")
  if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
    local nv = {}  -- LHS_assign
          nv.v = {}
    nv.prev = lh
    self:primaryexp(ls, nv.v)
    if nv.v.k == "VLOCAL" then
      self:check_conflict(ls, lh, nv.v)
    end
    self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
                    "variables in assignment")
    self:assignment(ls, nv, nvars + 1)
  else  -- assignment -> '=' explist1
    self:checknext(ls, "=")
    local nexps = self:explist1(ls, e)
    if nexps ~= nvars then
      self:adjust_assign(ls, nvars, nexps, e)
      if nexps > nvars then
        ls.fs.freereg = ls.fs.freereg - (nexps - nvars)  -- remove extra values
      end
    else
      luaK:setoneret(ls.fs, e)  -- close last expression
      luaK:storevar(ls.fs, lh.v, e)
      return  -- avoid default
    end
  end
  self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
  luaK:storevar(ls.fs, lh.v, e)
end

------------------------------------------------------------------------
-- parse condition in a repeat statement or an if control structure
-- * used in repeatstat(), test_then_block()
------------------------------------------------------------------------
function luaY:cond(ls)
  -- cond -> exp
  local v = {}  -- expdesc
  self:expr(ls, v)  -- read condition
  if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
  luaK:goiftrue(ls.fs, v)
  return v.f
end

------------------------------------------------------------------------
-- parse a break statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:breakstat(ls)
  -- stat -> BREAK
  local fs = ls.fs
  local bl = fs.bl
  local upval = false
  while bl and not bl.isbreakable do
    if bl.upval then upval = true end
    bl = bl.previous
  end
  if not bl then
    luaX:syntaxerror(ls, "no loop to break")
  end
  if upval then
    luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
  end
  bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
end

------------------------------------------------------------------------
-- parse a while-do control structure, body processed by block()
-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
--   the function's implementation can be removed
-- * used in statements()
------------------------------------------------------------------------
function luaY:whilestat(ls, line)
  -- whilestat -> WHILE cond DO block END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  luaX:next(ls)  -- skip WHILE
  local whileinit = luaK:getlabel(fs)
  local condexit = self:cond(ls)
  self:enterblock(fs, bl, true)
  self:checknext(ls, "TK_DO")
  self:block(ls)
  luaK:patchlist(fs, luaK:jump(fs), whileinit)
  self:check_match(ls, "TK_END", "TK_WHILE", line)
  self:leaveblock(fs)
  luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
end

------------------------------------------------------------------------
-- parse a repeat-until control structure, body parsed by chunk()
-- * used in statements()
------------------------------------------------------------------------
function luaY:repeatstat(ls, line)
  -- repeatstat -> REPEAT block UNTIL cond
  local fs = ls.fs
  local repeat_init = luaK:getlabel(fs)
  local bl1, bl2 = {}, {}  -- BlockCnt
  self:enterblock(fs, bl1, true)  -- loop block
  self:enterblock(fs, bl2, false)  -- scope block
  luaX:next(ls)  -- skip REPEAT
  self:chunk(ls)
  self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
  local condexit = self:cond(ls)  -- read condition (inside scope block)
  if not bl2.upval then  -- no upvalues?
    self:leaveblock(fs)  -- finish scope
    luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
  else  -- complete semantics when there are upvalues
    self:breakstat(ls)  -- if condition then break
    luaK:patchtohere(ls.fs, condexit)  -- else...
    self:leaveblock(fs)  -- finish scope...
    luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
  end
  self:leaveblock(fs)  -- finish loop
end

------------------------------------------------------------------------
-- parse the single expressions needed in numerical for loops
-- * used in fornum()
------------------------------------------------------------------------
function luaY:exp1(ls)
  local e = {}  -- expdesc
  self:expr(ls, e)
  local k = e.k
  luaK:exp2nextreg(ls.fs, e)
  return k
end

------------------------------------------------------------------------
-- parse a for loop body for both versions of the for loop
-- * used in fornum(), forlist()
------------------------------------------------------------------------
function luaY:forbody(ls, base, line, nvars, isnum)
  -- forbody -> DO block
  local bl = {}  -- BlockCnt
  local fs = ls.fs
  self:adjustlocalvars(ls, 3)  -- control variables
  self:checknext(ls, "TK_DO")
  local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
                     or luaK:jump(fs)
  self:enterblock(fs, bl, false)  -- scope for declared variables
  self:adjustlocalvars(ls, nvars)
  luaK:reserveregs(fs, nvars)
  self:block(ls)
  self:leaveblock(fs)  -- end of scope for declared variables
  luaK:patchtohere(fs, prep)
  local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
                       or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
  luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
  luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
end

------------------------------------------------------------------------
-- parse a numerical for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:fornum(ls, varname, line)
  -- fornum -> NAME = exp1,exp1[,exp1] forbody
  local fs = ls.fs
  local base = fs.freereg
  self:new_localvarliteral(ls, "(for index)", 0)
  self:new_localvarliteral(ls, "(for limit)", 1)
  self:new_localvarliteral(ls, "(for step)", 2)
  self:new_localvar(ls, varname, 3)
  self:checknext(ls, '=')
  self:exp1(ls)  -- initial value
  self:checknext(ls, ",")
  self:exp1(ls)  -- limit
  if self:testnext(ls, ",") then
    self:exp1(ls)  -- optional step
  else  -- default step = 1
    luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
    luaK:reserveregs(fs, 1)
  end
  self:forbody(ls, base, line, 1, true)
end

------------------------------------------------------------------------
-- parse a generic for loop, calls forbody()
-- * used in forstat()
------------------------------------------------------------------------
function luaY:forlist(ls, indexname)
  -- forlist -> NAME {,NAME} IN explist1 forbody
  local fs = ls.fs
  local e = {}  -- expdesc
  local nvars = 0
  local base = fs.freereg
  -- create control variables
  self:new_localvarliteral(ls, "(for generator)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for state)", nvars)
  nvars = nvars + 1
  self:new_localvarliteral(ls, "(for control)", nvars)
  nvars = nvars + 1
  -- create declared variables
  self:new_localvar(ls, indexname, nvars)
  nvars = nvars + 1
  while self:testnext(ls, ",") do
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  end
  self:checknext(ls, "TK_IN")
  local line = ls.linenumber
  self:adjust_assign(ls, 3, self:explist1(ls, e), e)
  luaK:checkstack(fs, 3)  -- extra space to call generator
  self:forbody(ls, base, line, nvars - 3, false)
end

------------------------------------------------------------------------
-- initial parsing for a for loop, calls fornum() or forlist()
-- * used in statements()
------------------------------------------------------------------------
function luaY:forstat(ls, line)
  -- forstat -> FOR (fornum | forlist) END
  local fs = ls.fs
  local bl = {}  -- BlockCnt
  self:enterblock(fs, bl, true)  -- scope for loop and control variables
  luaX:next(ls)  -- skip `for'
  local varname = self:str_checkname(ls)  -- first variable name
  local c = ls.t.token
  if c == "=" then
    self:fornum(ls, varname, line)
  elseif c == "," or c == "TK_IN" then
    self:forlist(ls, varname)
  else
    luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
  end
  self:check_match(ls, "TK_END", "TK_FOR", line)
  self:leaveblock(fs)  -- loop scope (`break' jumps to this point)
end

------------------------------------------------------------------------
-- parse part of an if control structure, including the condition
-- * used in ifstat()
------------------------------------------------------------------------
function luaY:test_then_block(ls)
  -- test_then_block -> [IF | ELSEIF] cond THEN block
  luaX:next(ls)  -- skip IF or ELSEIF
  local condexit = self:cond(ls)
  self:checknext(ls, "TK_THEN")
  self:block(ls)  -- `then' part
  return condexit
end

------------------------------------------------------------------------
-- parse an if control structure
-- * used in statements()
------------------------------------------------------------------------
function luaY:ifstat(ls, line)
  -- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
  local fs = ls.fs
  local escapelist = luaK.NO_JUMP
  local flist = self:test_then_block(ls)  -- IF cond THEN block
  while ls.t.token == "TK_ELSEIF" do
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
  end
  if ls.t.token == "TK_ELSE" then
    escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
    luaK:patchtohere(fs, flist)
    luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
    self:block(ls)  -- 'else' part
  else
    escapelist = luaK:concat(fs, escapelist, flist)
  end
  luaK:patchtohere(fs, escapelist)
  self:check_match(ls, "TK_END", "TK_IF", line)
end

------------------------------------------------------------------------
-- parse a local function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localfunc(ls)
  local v, b = {}, {}  -- expdesc
  local fs = ls.fs
  self:new_localvar(ls, self:str_checkname(ls), 0)
  self:init_exp(v, "VLOCAL", fs.freereg)
  luaK:reserveregs(fs, 1)
  self:adjustlocalvars(ls, 1)
  self:body(ls, b, false, ls.linenumber)
  luaK:storevar(fs, v, b)
  -- debug information will only see the variable after this point!
  self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
end

------------------------------------------------------------------------
-- parse a local variable declaration statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:localstat(ls)
  -- stat -> LOCAL NAME {',' NAME} ['=' explist1]
  local nvars = 0
  local nexps
  local e = {}  -- expdesc
  repeat
    self:new_localvar(ls, self:str_checkname(ls), nvars)
    nvars = nvars + 1
  until not self:testnext(ls, ",")
  if self:testnext(ls, "=") then
    nexps = self:explist1(ls, e)
  else
    e.k = "VVOID"
    nexps = 0
  end
  self:adjust_assign(ls, nvars, nexps, e)
  self:adjustlocalvars(ls, nvars)
end

------------------------------------------------------------------------
-- parse a function name specification
-- * used in funcstat()
------------------------------------------------------------------------
function luaY:funcname(ls, v)
  -- funcname -> NAME {field} [':' NAME]
  local needself = false
  self:singlevar(ls, v)
  while ls.t.token == "." do
    self:field(ls, v)
  end
  if ls.t.token == ":" then
    needself = true
    self:field(ls, v)
  end
  return needself
end

------------------------------------------------------------------------
-- parse a function statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:funcstat(ls, line)
  -- funcstat -> FUNCTION funcname body
  local v, b = {}, {}  -- expdesc
  luaX:next(ls)  -- skip FUNCTION
  local needself = self:funcname(ls, v)
  self:body(ls, b, needself, line)
  luaK:storevar(ls.fs, v, b)
  luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
end

------------------------------------------------------------------------
-- parse a function call with no returns or an assignment statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:exprstat(ls)
  -- stat -> func | assignment
  local fs = ls.fs
  local v = {}  -- LHS_assign
        v.v = {}
  self:primaryexp(ls, v.v)
  if v.v.k == "VCALL" then  -- stat -> func
    luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
  else  -- stat -> assignment
    v.prev = nil
    self:assignment(ls, v, 1)
  end
end

------------------------------------------------------------------------
-- parse a return statement
-- * used in statements()
------------------------------------------------------------------------
function luaY:retstat(ls)
  -- stat -> RETURN explist
  local fs = ls.fs
  local e = {}  -- expdesc
  local first, nret  -- registers with returned values
  luaX:next(ls)  -- skip RETURN
  if self:block_follow(ls.t.token) or ls.t.token == ";" then
    first, nret = 0, 0  -- return no values
  else
    nret = self:explist1(ls, e)  -- optional return values
    if self:hasmultret(e.k) then
      luaK:setmultret(fs, e)
      if e.k == "VCALL" and nret == 1 then  -- tail call?
        luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
        assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
      end
      first = fs.nactvar
      nret = self.LUA_MULTRET  -- return all values
    else
      if nret == 1 then  -- only one single value?
        first = luaK:exp2anyreg(fs, e)
      else
        luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
        first = fs.nactvar  -- return all 'active' values
        assert(nret == fs.freereg - first)
      end
    end--if
  end--if
  luaK:ret(fs, first, nret)
end

------------------------------------------------------------------------
-- initial parsing for statements, calls a lot of functions
-- * returns boolean instead of 0|1
-- * used in chunk()
------------------------------------------------------------------------
function luaY:statement(ls)
  local line = ls.linenumber  -- may be needed for error messages
  local c = ls.t.token
  if c == "TK_IF" then  -- stat -> ifstat
    self:ifstat(ls, line)
    return false
  elseif c == "TK_WHILE" then  -- stat -> whilestat
    self:whilestat(ls, line)
    return false
  elseif c == "TK_DO" then  -- stat -> DO block END
    luaX:next(ls)  -- skip DO
    self:block(ls)
    self:check_match(ls, "TK_END", "TK_DO", line)
    return false
  elseif c == "TK_FOR" then  -- stat -> forstat
    self:forstat(ls, line)
    return false
  elseif c == "TK_REPEAT" then  -- stat -> repeatstat
    self:repeatstat(ls, line)
    return false
  elseif c == "TK_FUNCTION" then  -- stat -> funcstat
    self:funcstat(ls, line)
    return false
  elseif c == "TK_LOCAL" then  -- stat -> localstat
    luaX:next(ls)  -- skip LOCAL
    if self:testnext(ls, "TK_FUNCTION") then  -- local function?
      self:localfunc(ls)
    else
      self:localstat(ls)
    end
    return false
  elseif c == "TK_RETURN" then  -- stat -> retstat
    self:retstat(ls)
    return true  -- must be last statement
  elseif c == "TK_BREAK" then  -- stat -> breakstat
    luaX:next(ls)  -- skip BREAK
    self:breakstat(ls)
    return true  -- must be last statement
  else
    self:exprstat(ls)
    return false  -- to avoid warnings
  end--if c
end

------------------------------------------------------------------------
-- parse a chunk, which consists of a bunch of statements
-- * used in parser(), body(), block(), repeatstat()
------------------------------------------------------------------------
function luaY:chunk(ls)
  -- chunk -> { stat [';'] }
  local islast = false
  self:enterlevel(ls)
  while not islast and not self:block_follow(ls.t.token) do
    islast = self:statement(ls)
    self:testnext(ls, ";")
    assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
               ls.fs.freereg >= ls.fs.nactvar)
    ls.fs.freereg = ls.fs.nactvar  -- free registers
  end
  self:leavelevel(ls)
end

-- }======================================================================
return luaY
end;
};
G2L_MODULES[G2L["15"]] = {
Closure = function()
    local script = G2L["15"];
--[[--------------------------------------------------------------------

  lcode.lua
  Lua 5 code generator in Lua
  This file is part of Yueliang.

  Copyright (c) 2005-2007 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * one function manipulate a pointer argument with a simple data type
--   (can't be emulated by a table, ambiguous), now returns that value:
--   luaK:concat(fs, l1, l2)
-- * luaM_growvector uses the faux luaY:growvector, for limit checking
-- * some function parameters changed to boolean, additional code
--   translates boolean back to 1/0 for instruction fields
--
-- Not implemented:
-- * NOTE there is a failed assert in luaK:addk, a porting problem
--
-- Added:
-- * constant MAXSTACK from llimits.h
-- * luaK:ttisnumber(o) (from lobject.h)
-- * luaK:nvalue(o) (from lobject.h)
-- * luaK:setnilvalue(o) (from lobject.h)
-- * luaK:setnvalue(o, x) (from lobject.h)
-- * luaK:setbvalue(o, x) (from lobject.h)
-- * luaK:sethvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:setsvalue(o, x) (from lobject.h), parameter L deleted
-- * luaK:numadd, luaK:numsub, luaK:nummul, luaK:numdiv, luaK:nummod,
--   luaK:numpow, luaK:numunm, luaK:numisnan (from luaconf.h)
-- * copyexp(e1, e2) added in luaK:posfix to copy expdesc struct
--
-- Changed in 5.1.x:
-- * enum BinOpr has a new entry, OPR_MOD
-- * enum UnOpr has a new entry, OPR_LEN
-- * binopistest, unused in 5.0.x, has been deleted
-- * macro setmultret is new
-- * functions isnumeral, luaK_ret, boolK are new
-- * funcion nilK was named nil_constant in 5.0.x
-- * function interface changed: need_value, patchtestreg, concat
-- * TObject now a TValue
-- * functions luaK_setreturns, luaK_setoneret are new
-- * function luaK:setcallreturns deleted, to be replaced by:
--   luaK:setmultret, luaK:ret, luaK:setreturns, luaK:setoneret
-- * functions constfolding, codearith, codecomp are new
-- * luaK:codebinop has been deleted
-- * function luaK_setlist is new
-- * OPR_MULT renamed to OPR_MUL
----------------------------------------------------------------------]]

-- requires luaP, luaX, luaY
local luaK = {}
local luaP = require(script.Parent.LuaP)
local luaX = require(script.Parent.LuaX)

------------------------------------------------------------------------
-- constants used by code generator
------------------------------------------------------------------------
-- maximum stack for a Lua function
luaK.MAXSTACK = 250  -- (from llimits.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- emulation of TValue macros (these are from lobject.h)
-- * TValue is a table since lcode passes references around
-- * tt member field removed, using Lua's type() instead
-- * for setsvalue, sethvalue, parameter L (deleted here) in lobject.h
--   is used in an assert for testing, see checkliveness(g,obj)
------------------------------------------------------------------------
function luaK:ttisnumber(o)
  if o then return type(o.value) == "number" else return false end
end
function luaK:nvalue(o) return o.value end
function luaK:setnilvalue(o) o.value = nil end
function luaK:setsvalue(o, x) o.value = x end
luaK.setnvalue = luaK.setsvalue
luaK.sethvalue = luaK.setsvalue
luaK.setbvalue = luaK.setsvalue

------------------------------------------------------------------------
-- The luai_num* macros define the primitive operations over numbers.
-- * this is not the entire set of primitive operations from luaconf.h
-- * used in luaK:constfolding()
------------------------------------------------------------------------
function luaK:numadd(a, b) return a + b end
function luaK:numsub(a, b) return a - b end
function luaK:nummul(a, b) return a * b end
function luaK:numdiv(a, b) return a / b end
function luaK:nummod(a, b) return a % b end
  -- ((a) - floor((a)/(b))*(b)) /* actual, for reference */
function luaK:numpow(a, b) return a ^ b end
function luaK:numunm(a) return -a end
function luaK:numisnan(a) return not a == a end
  -- a NaN cannot equal another NaN

--[[--------------------------------------------------------------------
-- code generator functions
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- Marks the end of a patch list. It is an invalid value both as an absolute
-- address, and as a list link (would link an element to itself).
------------------------------------------------------------------------
luaK.NO_JUMP = -1

------------------------------------------------------------------------
-- grep "ORDER OPR" if you change these enums
------------------------------------------------------------------------
luaK.BinOpr = {
  OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
  OPR_CONCAT = 6,
  OPR_NE = 7, OPR_EQ = 8,
  OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
  OPR_AND = 13, OPR_OR = 14,
  OPR_NOBINOPR = 15,
}

-- * UnOpr is used by luaK:prefix's op argument, but not directly used
--   because the function receives the symbols as strings, e.g. "OPR_NOT"
luaK.UnOpr = {
  OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
}

------------------------------------------------------------------------
-- returns the instruction object for given e (expdesc), was a macro
------------------------------------------------------------------------
function luaK:getcode(fs, e)
  return fs.f.code[e.info]
end

------------------------------------------------------------------------
-- codes an instruction with a signed Bx (sBx) field, was a macro
-- * used in luaK:jump(), (lparser) luaY:forbody()
------------------------------------------------------------------------
function luaK:codeAsBx(fs, o, A, sBx)
  return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
end

------------------------------------------------------------------------
-- set the expdesc e instruction for multiple returns, was a macro
------------------------------------------------------------------------
function luaK:setmultret(fs, e)
  self:setreturns(fs, e, luaY.LUA_MULTRET)
end

------------------------------------------------------------------------
-- there is a jump if patch lists are not identical, was a macro
-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
------------------------------------------------------------------------
function luaK:hasjumps(e)
  return e.t ~= e.f
end

------------------------------------------------------------------------
-- true if the expression is a constant number (for constant folding)
-- * used in constfolding(), infix()
------------------------------------------------------------------------
function luaK:isnumeral(e)
  return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
end

------------------------------------------------------------------------
-- codes loading of nil, optimization done if consecutive locations
-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:_nil(fs, from, n)
  if fs.pc > fs.lasttarget then  -- no jumps to current position?
    if fs.pc == 0 then  -- function start?
      if from >= fs.nactvar then
        return  -- positions are already clean
      end
    else
      local previous = fs.f.code[fs.pc - 1]
      if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
        local pfrom = luaP:GETARG_A(previous)
        local pto = luaP:GETARG_B(previous)
        if pfrom <= from and from <= pto + 1 then  -- can connect both?
          if from + n - 1 > pto then
            luaP:SETARG_B(previous, from + n - 1)
          end
          return
        end
      end
    end
  end
  self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:jump(fs)
  local jpc = fs.jpc  -- save list of jumps to here
  fs.jpc = self.NO_JUMP
  local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
  j = self:concat(fs, j, jpc)  -- keep them on hold
  return j
end

------------------------------------------------------------------------
-- codes a RETURN instruction
-- * used in luaY:close_func(), luaY:retstat()
------------------------------------------------------------------------
function luaK:ret(fs, first, nret)
  self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codecomp()
------------------------------------------------------------------------
function luaK:condjump(fs, op, A, B, C)
  self:codeABC(fs, op, A, B, C)
  return self:jump(fs)
end

------------------------------------------------------------------------
--
-- * used in luaK:patchlistaux(), luaK:concat()
------------------------------------------------------------------------
function luaK:fixjump(fs, pc, dest)
  local jmp = fs.f.code[pc]
  local offset = dest - (pc + 1)
  assert(dest ~= self.NO_JUMP)
  if math.abs(offset) > luaP.MAXARG_sBx then
    luaX:syntaxerror(fs.ls, "control structure too long")
  end
  luaP:SETARG_sBx(jmp, offset)
end

------------------------------------------------------------------------
-- returns current 'pc' and marks it as a jump target (to avoid wrong
-- optimizations with consecutive instructions not in the same basic block).
-- * used in multiple locations
-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
------------------------------------------------------------------------
function luaK:getlabel(fs)
  fs.lasttarget = fs.pc
  return fs.pc
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
--   luaK:concat()
------------------------------------------------------------------------
function luaK:getjump(fs, pc)
  local offset = luaP:GETARG_sBx(fs.f.code[pc])
  if offset == self.NO_JUMP then  -- point to itself represents end of list
    return self.NO_JUMP  -- end of list
  else
    return (pc + 1) + offset  -- turn offset into absolute position
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
------------------------------------------------------------------------
function luaK:getjumpcontrol(fs, pc)
  local pi = fs.f.code[pc]
  local ppi = fs.f.code[pc - 1]
  if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
    return ppi
  else
    return pi
  end
end

------------------------------------------------------------------------
-- check whether list has any jump that do not produce a value
-- (or produce an inverted value)
-- * return value changed to boolean
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:need_value(fs, list)
  while list ~= self.NO_JUMP do
    local i = self:getjumpcontrol(fs, list)
    if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
    list = self:getjump(fs, list)
  end
  return false  -- not found
end

------------------------------------------------------------------------
--
-- * used in luaK:removevalues(), luaK:patchlistaux()
------------------------------------------------------------------------
function luaK:patchtestreg(fs, node, reg)
  local i = self:getjumpcontrol(fs, node)
  if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
    return false  -- cannot patch other instructions
  end
  if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
    luaP:SETARG_A(i, reg)
  else  -- no register to put value or register already has the value
    -- due to use of a table as i, i cannot be replaced by another table
    -- so the following is required; there is no change to ARG_C
    luaP:SET_OPCODE(i, "OP_TEST")
    local b = luaP:GETARG_B(i)
    luaP:SETARG_A(i, b)
    luaP:SETARG_B(i, 0)
    -- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
  end
  return true
end

------------------------------------------------------------------------
--
-- * used only in luaK:codenot()
------------------------------------------------------------------------
function luaK:removevalues(fs, list)
  while list ~= self.NO_JUMP do
    self:patchtestreg(fs, list, luaP.NO_REG)
    list = self:getjump(fs, list)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
  while list ~= self.NO_JUMP do
    local _next = self:getjump(fs, list)
    if self:patchtestreg(fs, list, reg) then
      self:fixjump(fs, list, vtarget)
    else
      self:fixjump(fs, list, dtarget)  -- jump to default target
    end
    list = _next
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:code()
------------------------------------------------------------------------
function luaK:dischargejpc(fs)
  self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
  fs.jpc = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
------------------------------------------------------------------------
function luaK:patchlist(fs, list, target)
  if target == fs.pc then
    self:patchtohere(fs, list)
  else
    assert(target < fs.pc)
    self:patchlistaux(fs, list, target, luaP.NO_REG, target)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:patchtohere(fs, list)
  self:getlabel(fs)
  fs.jpc = self:concat(fs, fs.jpc, list)
end

------------------------------------------------------------------------
-- * l1 was a pointer, now l1 is returned and callee assigns the value
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:concat(fs, l1, l2)
  if l2 == self.NO_JUMP then return l1
  elseif l1 == self.NO_JUMP then
    return l2
  else
    local list = l1
    local _next = self:getjump(fs, list)
    while _next ~= self.NO_JUMP do  -- find last element
      list = _next
      _next = self:getjump(fs, list)
    end
    self:fixjump(fs, list, l2)
  end
  return l1
end

------------------------------------------------------------------------
--
-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
------------------------------------------------------------------------
function luaK:checkstack(fs, n)
  local newstack = fs.freereg + n
  if newstack > fs.f.maxstacksize then
    if newstack >= self.MAXSTACK then
      luaX:syntaxerror(fs.ls, "function or expression too complex")
    end
    fs.f.maxstacksize = newstack
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:reserveregs(fs, n)
  self:checkstack(fs, n)
  fs.freereg = fs.freereg + n
end

------------------------------------------------------------------------
--
-- * used in luaK:freeexp(), luaK:dischargevars()
------------------------------------------------------------------------
function luaK:freereg(fs, reg)
  if not luaP:ISK(reg) and reg >= fs.nactvar then
    fs.freereg = fs.freereg - 1
    assert(reg == fs.freereg)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:freeexp(fs, e)
  if e.k == "VNONRELOC" then
    self:freereg(fs, e.info)
  end
end

------------------------------------------------------------------------
-- * TODO NOTE implementation is not 100% correct, since the assert fails
-- * luaH_set, setobj deleted; direct table access used instead
-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
------------------------------------------------------------------------
function luaK:addk(fs, k, v)
  local L = fs.L
  local idx = fs.h[k.value]
  --TValue *idx = luaH_set(L, fs->h, k); /* C */
  local f = fs.f
  if self:ttisnumber(idx) then
    --TODO this assert currently FAILS (last tested for 5.0.2)
    --assert(fs.f.k[self:nvalue(idx)] == v)
    --assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
    return self:nvalue(idx)
  else -- constant not found; create a new entry
    idx = {}
    self:setnvalue(idx, fs.nk)
    fs.h[k.value] = idx
    -- setnvalue(idx, cast_num(fs->nk)); /* C */
    luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
                    luaP.MAXARG_Bx, "constant table overflow")
    -- loop to initialize empty f.k positions not required
    f.k[fs.nk] = v
    -- setobj(L, &f->k[fs->nk], v); /* C */
    -- luaC_barrier(L, f, v); /* GC */
    local nk = fs.nk
    fs.nk = fs.nk + 1
    return nk
  end

end

------------------------------------------------------------------------
-- creates and sets a string object
-- * used in (lparser) luaY:codestring(), luaY:singlevar()
------------------------------------------------------------------------
function luaK:stringK(fs, s)
  local o = {}  -- TValue
  self:setsvalue(o, s)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a number object
-- * used in luaK:prefix() for negative (or negation of) numbers
-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
------------------------------------------------------------------------
function luaK:numberK(fs, r)
  local o = {}  -- TValue
  self:setnvalue(o, r)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a boolean object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:boolK(fs, b)
  local o = {}  -- TValue
  self:setbvalue(o, b)
  return self:addk(fs, o, o)
end

------------------------------------------------------------------------
-- creates and sets a nil object
-- * used only in luaK:exp2RK()
------------------------------------------------------------------------
function luaK:nilK(fs)
  local k, v = {}, {}  -- TValue
  self:setnilvalue(v)
  -- cannot use nil as key; instead use table itself to represent nil
  self:sethvalue(k, fs.h)
  return self:addk(fs, k, v)
end

------------------------------------------------------------------------
--
-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
------------------------------------------------------------------------
function luaK:setreturns(fs, e, nresults)
  if e.k == "VCALL" then  -- expression is an open function call?
    luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
    luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
    luaK:reserveregs(fs, 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
------------------------------------------------------------------------
function luaK:setoneret(fs, e)
  if e.k == "VCALL" then  -- expression is an open function call?
    e.k = "VNONRELOC"
    e.info = luaP:GETARG_A(self:getcode(fs, e))
  elseif e.k == "VVARARG" then
    luaP:SETARG_B(self:getcode(fs, e), 2)
    e.k = "VRELOCABLE"  -- can relocate its simple result
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:dischargevars(fs, e)
  local k = e.k
  if k == "VLOCAL" then
    e.k = "VNONRELOC"
  elseif k == "VUPVAL" then
    e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
    e.k = "VRELOCABLE"
  elseif k == "VGLOBAL" then
    e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
    e.k = "VRELOCABLE"
  elseif k == "VINDEXED" then
    self:freereg(fs, e.aux)
    self:freereg(fs, e.info)
    e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
    e.k = "VRELOCABLE"
  elseif k == "VVARARG" or k == "VCALL" then
    self:setoneret(fs, e)
  else
    -- there is one value available (somewhere)
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:exp2reg()
------------------------------------------------------------------------
function luaK:code_label(fs, A, b, jump)
  self:getlabel(fs)  -- those instructions may be jump targets
  return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
end

------------------------------------------------------------------------
--
-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
------------------------------------------------------------------------
function luaK:discharge2reg(fs, e, reg)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" then
    self:_nil(fs, reg, 1)
  elseif k == "VFALSE" or k == "VTRUE" then
    self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
  elseif k == "VK" then
    self:codeABx(fs, "OP_LOADK", reg, e.info)
  elseif k == "VKNUM" then
    self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
  elseif k == "VRELOCABLE" then
    local pc = self:getcode(fs, e)
    luaP:SETARG_A(pc, reg)
  elseif k == "VNONRELOC" then
    if reg ~= e.info then
      self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
    end
  else
    assert(e.k == "VVOID" or e.k == "VJMP")
    return  -- nothing to do...
  end
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:jumponcond(), luaK:codenot()
------------------------------------------------------------------------
function luaK:discharge2anyreg(fs, e)
  if e.k ~= "VNONRELOC" then
    self:reserveregs(fs, 1)
    self:discharge2reg(fs, e, fs.freereg - 1)
  end
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
------------------------------------------------------------------------
function luaK:exp2reg(fs, e, reg)
  self:discharge2reg(fs, e, reg)
  if e.k == "VJMP" then
    e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
  end
  if self:hasjumps(e) then
    local final  -- position after whole expression
    local p_f = self.NO_JUMP  -- position of an eventual LOAD false
    local p_t = self.NO_JUMP  -- position of an eventual LOAD true
    if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
      local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
      p_f = self:code_label(fs, reg, 0, 1)
      p_t = self:code_label(fs, reg, 1, 0)
      self:patchtohere(fs, fj)
    end
    final = self:getlabel(fs)
    self:patchlistaux(fs, e.f, final, reg, p_f)
    self:patchlistaux(fs, e.t, final, reg, p_t)
  end
  e.f, e.t = self.NO_JUMP, self.NO_JUMP
  e.info = reg
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2nextreg(fs, e)
  self:dischargevars(fs, e)
  self:freeexp(fs, e)
  self:reserveregs(fs, 1)
  self:exp2reg(fs, e, fs.freereg - 1)
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2anyreg(fs, e)
  self:dischargevars(fs, e)
  if e.k == "VNONRELOC" then
    if not self:hasjumps(e) then  -- exp is already in a register
      return e.info
    end
    if e.info >= fs.nactvar then  -- reg. is not a local?
      self:exp2reg(fs, e, e.info)  -- put value on it
      return e.info
    end
  end
  self:exp2nextreg(fs, e)  -- default
  return e.info
end

------------------------------------------------------------------------
--
-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
-- * used in (lparser) luaY:yindex()
------------------------------------------------------------------------
function luaK:exp2val(fs, e)
  if self:hasjumps(e) then
    self:exp2anyreg(fs, e)
  else
    self:dischargevars(fs, e)
  end
end

------------------------------------------------------------------------
--
-- * used in multiple locations
------------------------------------------------------------------------
function luaK:exp2RK(fs, e)
  self:exp2val(fs, e)
  local k = e.k
  if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
    if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
      -- converted from a 2-deep ternary operator expression
      if e.k == "VNIL" then
        e.info = self:nilK(fs)
      else
        e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
                                  or self:boolK(fs, e.k == "VTRUE")
      end
      e.k = "VK"
      return luaP:RKASK(e.info)
    end
  elseif k == "VK" then
    if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
      return luaP:RKASK(e.info)
    end
  else
    -- default
  end
  -- not a constant in the right range: put it in a register
  return self:exp2anyreg(fs, e)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:storevar(fs, var, ex)
  local k = var.k
  if k == "VLOCAL" then
    self:freeexp(fs, ex)
    self:exp2reg(fs, ex, var.info)
    return
  elseif k == "VUPVAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
  elseif k == "VGLOBAL" then
    local e = self:exp2anyreg(fs, ex)
    self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
  elseif k == "VINDEXED" then
    local e = self:exp2RK(fs, ex)
    self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
  else
    assert(0)  -- invalid var kind to store
  end
  self:freeexp(fs, ex)
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:primaryexp()
------------------------------------------------------------------------
function luaK:_self(fs, e, key)
  self:exp2anyreg(fs, e)
  self:freeexp(fs, e)
  local func = fs.freereg
  self:reserveregs(fs, 2)
  self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
  self:freeexp(fs, key)
  e.info = func
  e.k = "VNONRELOC"
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:codenot()
------------------------------------------------------------------------
function luaK:invertjump(fs, e)
  local pc = self:getjumpcontrol(fs, e.info)
  assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
             luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
             luaP:GET_OPCODE(pc) ~= "OP_TEST")
  luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:goiftrue(), luaK:goiffalse()
------------------------------------------------------------------------
function luaK:jumponcond(fs, e, cond)
  if e.k == "VRELOCABLE" then
    local ie = self:getcode(fs, e)
    if luaP:GET_OPCODE(ie) == "OP_NOT" then
      fs.pc = fs.pc - 1  -- remove previous OP_NOT
      return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
    end
    -- else go through
  end
  self:discharge2anyreg(fs, e)
  self:freeexp(fs, e)
  return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
end

------------------------------------------------------------------------
--
-- * used in luaK:infix(), (lparser) luaY:cond()
------------------------------------------------------------------------
function luaK:goiftrue(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VK" or k == "VKNUM" or k == "VTRUE" then
    pc = self.NO_JUMP  -- always true; do nothing
  elseif k == "VFALSE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    self:invertjump(fs, e)
    pc = e.info
  else
    pc = self:jumponcond(fs, e, false)
  end
  e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
  self:patchtohere(fs, e.t)
  e.t = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used in luaK:infix()
------------------------------------------------------------------------
function luaK:goiffalse(fs, e)
  local pc  -- pc of last jump
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE"then
    pc = self.NO_JUMP  -- always false; do nothing
  elseif k == "VTRUE" then
    pc = self:jump(fs)  -- always jump
  elseif k == "VJMP" then
    pc = e.info
  else
    pc = self:jumponcond(fs, e, true)
  end
  e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
  self:patchtohere(fs, e.f)
  e.f = self.NO_JUMP
end

------------------------------------------------------------------------
--
-- * used only in luaK:prefix()
------------------------------------------------------------------------
function luaK:codenot(fs, e)
  self:dischargevars(fs, e)
  local k = e.k
  if k == "VNIL" or k == "VFALSE" then
    e.k = "VTRUE"
  elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
    e.k = "VFALSE"
  elseif k == "VJMP" then
    self:invertjump(fs, e)
  elseif k == "VRELOCABLE" or k == "VNONRELOC" then
    self:discharge2anyreg(fs, e)
    self:freeexp(fs, e)
    e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
    e.k = "VRELOCABLE"
  else
    assert(0)  -- cannot happen
  end
  -- interchange true and false lists
  e.f, e.t = e.t, e.f
  self:removevalues(fs, e.f)
  self:removevalues(fs, e.t)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:field(), luaY:primaryexp()
------------------------------------------------------------------------
function luaK:indexed(fs, t, k)
  t.aux = self:exp2RK(fs, k)
  t.k = "VINDEXED"
end

------------------------------------------------------------------------
--
-- * used only in luaK:codearith()
------------------------------------------------------------------------
function luaK:constfolding(op, e1, e2)
  local r
  if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
  local v1 = e1.nval
  local v2 = e2.nval
  if op == "OP_ADD" then
    r = self:numadd(v1, v2)
  elseif op == "OP_SUB" then
    r = self:numsub(v1, v2)
  elseif op == "OP_MUL" then
    r = self:nummul(v1, v2)
  elseif op == "OP_DIV" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:numdiv(v1, v2)
  elseif op == "OP_MOD" then
    if v2 == 0 then return false end  -- do not attempt to divide by 0
    r = self:nummod(v1, v2)
  elseif op == "OP_POW" then
    r = self:numpow(v1, v2)
  elseif op == "OP_UNM" then
    r = self:numunm(v1)
  elseif op == "OP_LEN" then
    return false  -- no constant folding for 'len'
  else
    assert(0)
    r = 0
  end
  if self:numisnan(r) then return false end  -- do not attempt to produce NaN
  e1.nval = r
  return true
end

------------------------------------------------------------------------
--
-- * used in luaK:prefix(), luaK:posfix()
------------------------------------------------------------------------
function luaK:codearith(fs, op, e1, e2)
  if self:constfolding(op, e1, e2) then
    return
  else
    local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
    local o1 = self:exp2RK(fs, e1)
    if o1 > o2 then
      self:freeexp(fs, e1)
      self:freeexp(fs, e2)
    else
      self:freeexp(fs, e2)
      self:freeexp(fs, e1)
    end
    e1.info = self:codeABC(fs, op, 0, o1, o2)
    e1.k = "VRELOCABLE"
  end
end

------------------------------------------------------------------------
--
-- * used only in luaK:posfix()
------------------------------------------------------------------------
function luaK:codecomp(fs, op, cond, e1, e2)
  local o1 = self:exp2RK(fs, e1)
  local o2 = self:exp2RK(fs, e2)
  self:freeexp(fs, e2)
  self:freeexp(fs, e1)
  if cond == 0 and op ~= "OP_EQ" then
    -- exchange args to replace by `<' or `<='
    o1, o2 = o2, o1  -- o1 <==> o2
    cond = 1
  end

e1.info = self:condjump(fs, op, cond, o1, o2)
  e1.k = "VJMP"
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:prefix(fs, op, e)
  local e2 = {}  -- expdesc
  e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
  e2.k = "VKNUM"
  e2.nval = 0
  if op == "OPR_MINUS" then
    if not self:isnumeral(e) then
      self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
    end
    self:codearith(fs, "OP_UNM", e, e2)
  elseif op == "OPR_NOT" then
    self:codenot(fs, e)
  elseif op == "OPR_LEN" then
    self:exp2anyreg(fs, e)  -- cannot operate on constants
    self:codearith(fs, "OP_LEN", e, e2)
  else
    assert(0)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
function luaK:infix(fs, op, v)
  if op == "OPR_AND" then
    self:goiftrue(fs, v)
  elseif op == "OPR_OR" then
    self:goiffalse(fs, v)
  elseif op == "OPR_CONCAT" then
    self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
  elseif op == "OPR_ADD" or op == "OPR_SUB" or
         op == "OPR_MUL" or op == "OPR_DIV" or
         op == "OPR_MOD" or op == "OPR_POW" then
    if not self:isnumeral(v) then self:exp2RK(fs, v) end
  else
    self:exp2RK(fs, v)
  end
end

------------------------------------------------------------------------
--
-- * used only in (lparser) luaY:subexpr()
------------------------------------------------------------------------
-- table lookups to simplify testing
luaK.arith_op = {
  OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
  OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
}
luaK.comp_op = {
  OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
  OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
}
luaK.comp_cond = {
  OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
  OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
}
function luaK:posfix(fs, op, e1, e2)
  -- needed because e1 = e2 doesn't copy values...
  -- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
  --   but here, all elements are copied for completeness' sake
  local function copyexp(e1, e2)
    e1.k = e2.k
    e1.info = e2.info; e1.aux = e2.aux
    e1.nval = e2.nval
    e1.t = e2.t; e1.f = e2.f
  end
  if op == "OPR_AND" then
    assert(e1.t == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.f = self:concat(fs, e2.f, e1.f)
    copyexp(e1, e2)
  elseif op == "OPR_OR" then
    assert(e1.f == self.NO_JUMP)  -- list must be closed
    self:dischargevars(fs, e2)
    e2.t = self:concat(fs, e2.t, e1.t)
    copyexp(e1, e2)
  elseif op == "OPR_CONCAT" then
    self:exp2val(fs, e2)
    if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
      assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
      self:freeexp(fs, e1)
      luaP:SETARG_B(self:getcode(fs, e2), e1.info)
      e1.k = "VRELOCABLE"
      e1.info = e2.info
    else
      self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
      self:codearith(fs, "OP_CONCAT", e1, e2)
    end
  else
    -- the following uses a table lookup in place of conditionals
    local arith = self.arith_op[op]
    if arith then
      self:codearith(fs, arith, e1, e2)
    else
      local comp = self.comp_op[op]
      if comp then
        self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
      else
        assert(0)
      end
    end--if arith
  end--if op
end

------------------------------------------------------------------------
-- adjusts debug information for last instruction written, in order to
-- change the line where item comes into existence
-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
------------------------------------------------------------------------
function luaK:fixline(fs, line)
  fs.f.lineinfo[fs.pc - 1] = line
end

------------------------------------------------------------------------
-- general function to write an instruction into the instruction buffer,
-- sets debug information too
-- * used in luaK:codeABC(), luaK:codeABx()
-- * called directly by (lparser) luaY:whilestat()
------------------------------------------------------------------------
function luaK:code(fs, i, line)
  local f = fs.f
  self:dischargejpc(fs)  -- 'pc' will change
  -- put new instruction in code array
  luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
                  luaY.MAX_INT, "code size overflow")
  f.code[fs.pc] = i
  -- save corresponding line information
  luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
                  luaY.MAX_INT, "code size overflow")
  f.lineinfo[fs.pc] = line
  local pc = fs.pc
  fs.pc = fs.pc + 1
  return pc
end

------------------------------------------------------------------------
-- writes an instruction of type ABC
-- * calls luaK:code()
------------------------------------------------------------------------
function luaK:codeABC(fs, o, a, b, c)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
  assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
  assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
  return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
end

------------------------------------------------------------------------
-- writes an instruction of type ABx
-- * calls luaK:code(), called by luaK:codeAsBx()
------------------------------------------------------------------------
function luaK:codeABx(fs, o, a, bc)
  assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
             luaP:getOpMode(o) == luaP.OpMode.iAsBx)
  assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
  return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
end

------------------------------------------------------------------------
--
-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
------------------------------------------------------------------------
function luaK:setlist(fs, base, nelems, tostore)
  local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
  local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
  assert(tostore ~= 0)
  if c <= luaP.MAXARG_C then
    self:codeABC(fs, "OP_SETLIST", base, b, c)
  else
    self:codeABC(fs, "OP_SETLIST", base, b, 0)
    self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
  end
  fs.freereg = base + 1  -- free registers with list values
end

return function(a) luaY = a return luaK end
end;
};
G2L_MODULES[G2L["16"]] = {
Closure = function()
    local script = G2L["16"];
--[[--------------------------------------------------------------------

  ldump.lua
  Save precompiled Lua chunks
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * WARNING! byte order (little endian) and data type sizes for header
--   signature values hard-coded; see luaU:header
-- * chunk writer generators are included, see below
-- * one significant difference is that instructions are still in table
--   form (with OP/A/B/C/Bx fields) and luaP:Instruction() is needed to
--   convert them into 4-char strings
--
-- Not implemented:
-- * DumpVar, DumpMem has been removed
-- * DumpVector folded into folded into DumpDebug, DumpCode
--
-- Added:
-- * for convenience, the following two functions have been added:
--   luaU:make_setS: create a chunk writer that writes to a string
--   luaU:make_setF: create a chunk writer that writes to a file
--   (lua.h contains a typedef for lua_Writer/lua_Chunkwriter, and
--    a Lua-based implementation exists, writer() in lstrlib.c)
-- * luaU:ttype(o) (from lobject.h)
-- * for converting number types to its binary equivalent:
--   luaU:from_double(x): encode double value for writing
--   luaU:from_int(x): encode integer value for writing
--     (error checking is limited for these conversion functions)
--     (double conversion does not support denormals or NaNs)
--
-- Changed in 5.1.x:
-- * the dumper was mostly rewritten in Lua 5.1.x, so notes on the
--   differences between 5.0.x and 5.1.x is limited
-- * LUAC_VERSION bumped to 0x51, LUAC_FORMAT added
-- * developer is expected to adjust LUAC_FORMAT in order to identify
--   non-standard binary chunk formats
-- * header signature code is smaller, has been simplified, and is
--   tested as a single unit; its logic is shared with the undumper
-- * no more endian conversion, invalid endianness mean rejection
-- * opcode field sizes are no longer exposed in the header
-- * code moved to front of a prototype, followed by constants
-- * debug information moved to the end of the binary chunk, and the
--   relevant functions folded into a single function
-- * luaU:dump returns a writer status code
-- * chunk writer now implements status code because dumper uses it
-- * luaU:endianness removed
----------------------------------------------------------------------]]

--requires luaP
local luaU = {}
local luaP = require(script.Parent.LuaP)

-- mark for precompiled code ('<esc>Lua') (from lua.h)
luaU.LUA_SIGNATURE = "\27Lua"

-- constants used by dumper (from lua.h)
luaU.LUA_TNUMBER  = 3
luaU.LUA_TSTRING  = 4
luaU.LUA_TNIL     = 0
luaU.LUA_TBOOLEAN = 1
luaU.LUA_TNONE    = -1

-- constants for header of binary files (from lundump.h)
luaU.LUAC_VERSION    = 0x51     -- this is Lua 5.1
luaU.LUAC_FORMAT     = 0        -- this is the official format
luaU.LUAC_HEADERSIZE = 12       -- size of header of binary files

--[[--------------------------------------------------------------------
-- Additional functions to handle chunk writing
-- * to use make_setS and make_setF, see test_ldump.lua elsewhere
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- create a chunk writer that writes to a string
-- * returns the writer function and a table containing the string
-- * to get the final result, look in buff.data
------------------------------------------------------------------------
function luaU:make_setS()
  local buff = {}
        buff.data = ""
  local writer =
    function(s, buff)  -- chunk writer
      if not s then return 0 end
      buff.data = buff.data..s
      return 0
    end
  return writer, buff
end

------------------------------------------------------------------------
-- create a chunk writer that writes to a file
-- * returns the writer function and a table containing the file handle
-- * if a nil is passed, then writer should close the open file
------------------------------------------------------------------------

--[[
function luaU:make_setF(filename)
  local buff = {}
        buff.h = io.open(filename, "wb")
  if not buff.h then return nil end
  local writer =
    function(s, buff)  -- chunk writer
      if not buff.h then return 0 end
      if not s then
        if buff.h:close() then return 0 end
      else
        if buff.h:write(s) then return 0 end
      end
      return 1
    end
  return writer, buff
end--]]

------------------------------------------------------------------------
-- works like the lobject.h version except that TObject used in these
-- scripts only has a 'value' field, no 'tt' field (native types used)
------------------------------------------------------------------------
function luaU:ttype(o)
  local tt = type(o.value)
  if tt == "number" then return self.LUA_TNUMBER
  elseif tt == "string" then return self.LUA_TSTRING
  elseif tt == "nil" then return self.LUA_TNIL
  elseif tt == "boolean" then return self.LUA_TBOOLEAN
  else
    return self.LUA_TNONE  -- the rest should not appear
  end
end

-----------------------------------------------------------------------
-- converts a IEEE754 double number to an 8-byte little-endian string
-- * luaU:from_double() and luaU:from_int() are adapted from ChunkBake
-- * supports +/- Infinity, but not denormals or NaNs
-----------------------------------------------------------------------
function luaU:from_double(x)
  local function grab_byte(v)
    local c = v % 256
    return (v - c) / 256, string.char(c)
  end
  local sign = 0
  if x < 0 then sign = 1; x = -x end
  local mantissa, exponent = math.frexp(x)
  if x == 0 then -- zero
    mantissa, exponent = 0, 0
  elseif x == 1/0 then
    mantissa, exponent = 0, 2047
  else
    mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
    exponent = exponent + 1022
  end
  local v, byte = "" -- convert to bytes
  x = math.floor(mantissa)
  for i = 1,6 do
    x, byte = grab_byte(x); v = v..byte -- 47:0
  end
  x, byte = grab_byte(exponent * 16 + x); v = v..byte -- 55:48
  x, byte = grab_byte(sign * 128 + x); v = v..byte -- 63:56
  return v
end

-----------------------------------------------------------------------
-- converts a number to a little-endian 32-bit integer string
-- * input value assumed to not overflow, can be signed/unsigned
-----------------------------------------------------------------------
function luaU:from_int(x)
  local v = ""
  x = math.floor(x)
  if x < 0 then x = 4294967296 + x end  -- ULONG_MAX+1
  for i = 1, 4 do
    local c = x % 256
    v = v..string.char(c); x = math.floor(x / 256)
  end
  return v
end

--[[--------------------------------------------------------------------
-- Functions to make a binary chunk
-- * many functions have the size parameter removed, since output is
--   in the form of a string and some sizes are implicit or hard-coded
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct DumpState:
--   L  -- lua_State (not used in this script)
--   writer  -- lua_Writer (chunk writer function)
--   data  -- void* (chunk writer context or data already written)
--   strip  -- if true, don't write any debug information
--   status  -- if non-zero, an error has occured
----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- dumps a block of bytes
-- * lua_unlock(D.L), lua_lock(D.L) unused
------------------------------------------------------------------------
function luaU:DumpBlock(b, D)
  if D.status == 0 then
    -- lua_unlock(D->L);
    D.status = D.write(b, D.data)
    -- lua_lock(D->L);
  end
end

------------------------------------------------------------------------
-- dumps a char
------------------------------------------------------------------------
function luaU:DumpChar(y, D)
  self:DumpBlock(string.char(y), D)
end

------------------------------------------------------------------------
-- dumps a 32-bit signed or unsigned integer (for int) (hard-coded)
------------------------------------------------------------------------
function luaU:DumpInt(x, D)
  self:DumpBlock(self:from_int(x), D)
end

------------------------------------------------------------------------
-- dumps a lua_Number (hard-coded as a double)
------------------------------------------------------------------------
function luaU:DumpNumber(x, D)
  self:DumpBlock(self:from_double(x), D)
end

------------------------------------------------------------------------
-- dumps a Lua string (size type is hard-coded)
------------------------------------------------------------------------
function luaU:DumpString(s, D)
  if s == nil then
    self:DumpInt(0, D)
  else
    s = s.."\0"  -- include trailing '\0'
    self:DumpInt(#s, D)
    self:DumpBlock(s, D)
  end
end

------------------------------------------------------------------------
-- dumps instruction block from function prototype
------------------------------------------------------------------------
function luaU:DumpCode(f, D)
  local n = f.sizecode
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpBlock(luaP:Instruction(f.code[i]), D)
  end
end

------------------------------------------------------------------------
-- dump constant pool from function prototype
-- * bvalue(o), nvalue(o) and rawtsvalue(o) macros removed
------------------------------------------------------------------------
function luaU:DumpConstants(f, D)
  local n = f.sizek
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    local o = f.k[i]  -- TValue
    local tt = self:ttype(o)
    self:DumpChar(tt, D)
    if tt == self.LUA_TNIL then
    elseif tt == self.LUA_TBOOLEAN then
      self:DumpChar(o.value and 1 or 0, D)
    elseif tt == self.LUA_TNUMBER then
      self:DumpNumber(o.value, D)
    elseif tt == self.LUA_TSTRING then
      self:DumpString(o.value, D)
    else
      --lua_assert(0)  -- cannot happen
    end
  end
  n = f.sizep
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpFunction(f.p[i], f.source, D)
  end
end

------------------------------------------------------------------------
-- dump debug information
------------------------------------------------------------------------
function luaU:DumpDebug(f, D)
  local n
  n = D.strip and 0 or f.sizelineinfo           -- dump line information
  --was DumpVector
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpInt(f.lineinfo[i], D)
  end
  n = D.strip and 0 or f.sizelocvars            -- dump local information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpString(f.locvars[i].varname, D)
    self:DumpInt(f.locvars[i].startpc, D)
    self:DumpInt(f.locvars[i].endpc, D)
  end
  n = D.strip and 0 or f.sizeupvalues           -- dump upvalue information
  self:DumpInt(n, D)
  for i = 0, n - 1 do
    self:DumpString(f.upvalues[i], D)
  end
end

------------------------------------------------------------------------
-- dump child function prototypes from function prototype
------------------------------------------------------------------------
function luaU:DumpFunction(f, p, D)
  local source = f.source
  if source == p or D.strip then source = nil end
  self:DumpString(source, D)
  self:DumpInt(f.lineDefined, D)
  self:DumpInt(f.lastlinedefined, D)
  self:DumpChar(f.nups, D)
  self:DumpChar(f.numparams, D)
  self:DumpChar(f.is_vararg, D)
  self:DumpChar(f.maxstacksize, D)
  self:DumpCode(f, D)
  self:DumpConstants(f, D)
  self:DumpDebug(f, D)
end

------------------------------------------------------------------------
-- dump Lua header section (some sizes hard-coded)
------------------------------------------------------------------------
function luaU:DumpHeader(D)
  local h = self:header()
  assert(#h == self.LUAC_HEADERSIZE) -- fixed buffer now an assert
  self:DumpBlock(h, D)
end

------------------------------------------------------------------------
-- make header (from lundump.c)
-- returns the header string
------------------------------------------------------------------------
function luaU:header()
 local x = 1
 return self.LUA_SIGNATURE..
        string.char(
          self.LUAC_VERSION,
          self.LUAC_FORMAT,
          x,                    -- endianness (1=little)
          4,                    -- sizeof(int)
          4,                    -- sizeof(size_t)
          4,                    -- sizeof(Instruction)
          8,                    -- sizeof(lua_Number)
          0)                    -- is lua_Number integral?
end

------------------------------------------------------------------------
-- dump Lua function as precompiled chunk
-- (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)
-- * w, data are created from make_setS, make_setF
------------------------------------------------------------------------
function luaU:dump(L, f, w, data, strip)
  local D = {}  -- DumpState
  D.L = L
  D.write = w
  D.data = data
  D.strip = strip
  D.status = 0
  self:DumpHeader(D)
  self:DumpFunction(f, nil, D)
  -- added: for a chunk writer writing to a file, this final call with
  -- nil data is to indicate to the writer to close the file
  D.write(nil, D.data)
  return D.status
end

return luaU
end;
};
G2L_MODULES[G2L["17"]] = {
Closure = function()
    local script = G2L["17"];
--[[--------------------------------------------------------------------

  lopcodes.lua
  Lua 5 virtual machine opcodes in Lua
  This file is part of Yueliang.

  Copyright (c) 2006 Kein-Hong Man <khman@users.sf.net>
  The COPYRIGHT file describes the conditions
  under which this software may be distributed.

  See the ChangeLog for more information.

----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- Notes:
-- * an Instruction is a table with OP, A, B, C, Bx elements; this
--   makes the code easy to follow and should allow instruction handling
--   to work with doubles and ints
-- * WARNING luaP:Instruction outputs instructions encoded in little-
--   endian form and field size and positions are hard-coded
--
-- Not implemented:
-- *
--
-- Added:
-- * luaP:CREATE_Inst(c): create an inst from a number (for OP_SETLIST)
-- * luaP:Instruction(i): convert field elements to a 4-char string
-- * luaP:DecodeInst(x): convert 4-char string into field elements
--
-- Changed in 5.1.x:
-- * POS_OP added, instruction field positions changed
-- * some symbol names may have changed, e.g. LUAI_BITSINT
-- * new operators for RK indices: BITRK, ISK(x), INDEXK(r), RKASK(x)
-- * OP_MOD, OP_LEN is new
-- * OP_TEST is now OP_TESTSET, OP_TEST is new
-- * OP_FORLOOP, OP_TFORLOOP adjusted, OP_FORPREP is new
-- * OP_TFORPREP deleted
-- * OP_SETLIST and OP_SETLISTO merged and extended
-- * OP_VARARG is new
-- * many changes to implementation of OpMode data
----------------------------------------------------------------------]]

local luaP = {}

--[[
===========================================================================
  We assume that instructions are unsigned numbers.
  All instructions have an opcode in the first 6 bits.
  Instructions can have the following fields:
        'A' : 8 bits
        'B' : 9 bits
        'C' : 9 bits
        'Bx' : 18 bits ('B' and 'C' together)
        'sBx' : signed Bx

  A signed argument is represented in excess K; that is, the number
  value is the unsigned value minus K. K is exactly the maximum value
  for that argument (so that -max is represented by 0, and +max is
  represented by 2*max), which is half the maximum for the corresponding
  unsigned argument.
===========================================================================
--]]

luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }  -- basic instruction format

------------------------------------------------------------------------
-- size and position of opcode arguments.
-- * WARNING size and position is hard-coded elsewhere in this script
------------------------------------------------------------------------
luaP.SIZE_C  = 9
luaP.SIZE_B  = 9
luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
luaP.SIZE_A  = 8

luaP.SIZE_OP = 6

luaP.POS_OP = 0
luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
luaP.POS_Bx = luaP.POS_C

------------------------------------------------------------------------
-- limits for opcode arguments.
-- we use (signed) int to manipulate most arguments,
-- so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
------------------------------------------------------------------------
-- removed "#if SIZE_Bx < BITS_INT-1" test, assume this script is
-- running on a Lua VM with double or int as LUA_NUMBER

luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)  -- 'sBx' is signed

luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

-- creates a mask with 'n' 1 bits at position 'p'
-- MASK1(n,p) deleted, not required
-- creates a mask with 'n' 0 bits at position 'p'
-- MASK0(n,p) deleted, not required

--[[--------------------------------------------------------------------
  Visual representation for reference:

   31    |    |     |            0      bit position
    +-----+-----+-----+----------+
    |  B  |  C  |  A  |  Opcode  |      iABC format
    +-----+-----+-----+----------+
    -  9  -  9  -  8  -    6     -      field sizes
    +-----+-----+-----+----------+
    |   [s]Bx   |  A  |  Opcode  |      iABx | iAsBx format
    +-----+-----+-----+----------+

----------------------------------------------------------------------]]

------------------------------------------------------------------------
-- the following macros help to manipulate instructions
-- * changed to a table object representation, very clean compared to
--   the [nightmare] alternatives of using a number or a string
-- * Bx is a separate element from B and C, since there is never a need
--   to split Bx in the parser or code generator
------------------------------------------------------------------------

-- these accept or return opcodes in the form of string names
function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

function luaP:GETARG_A(i) return i.A end
function luaP:SETARG_A(i, u) i.A = u end

function luaP:GETARG_B(i) return i.B end
function luaP:SETARG_B(i, b) i.B = b end

function luaP:GETARG_C(i) return i.C end
function luaP:SETARG_C(i, b) i.C = b end

function luaP:GETARG_Bx(i) return i.Bx end
function luaP:SETARG_Bx(i, b) i.Bx = b end

function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

function luaP:CREATE_ABC(o,a,b,c)
  return {OP = self.OpCode[o], A = a, B = b, C = c}
end

function luaP:CREATE_ABx(o,a,bc)
  return {OP = self.OpCode[o], A = a, Bx = bc}
end

------------------------------------------------------------------------
-- create an instruction from a number (for OP_SETLIST)
------------------------------------------------------------------------
function luaP:CREATE_Inst(c)
  local o = c % 64
  c = (c - o) / 64
  local a = c % 256
  c = (c - a) / 256
  return self:CREATE_ABx(o, a, c)
end

------------------------------------------------------------------------
-- returns a 4-char string little-endian encoded form of an instruction
------------------------------------------------------------------------
function luaP:Instruction(i)
  if i.Bx then
    -- change to OP/A/B/C format
    i.C = i.Bx % 512
    i.B = (i.Bx - i.C) / 512
  end
  local I = i.A * 64 + i.OP
  local c0 = I % 256
  I = i.C * 64 + (I - c0) / 256  -- 6 bits of A left
  local c1 = I % 256
  I = i.B * 128 + (I - c1) / 256  -- 7 bits of C left
  local c2 = I % 256
  local c3 = (I - c2) / 256
  return string.char(c0, c1, c2, c3)
end

------------------------------------------------------------------------
-- decodes a 4-char little-endian string into an instruction struct
------------------------------------------------------------------------
function luaP:DecodeInst(x)
  local byte = string.byte
  local i = {}
  local I = byte(x, 1)
  local op = I % 64
  i.OP = op
  I = byte(x, 2) * 4 + (I - op) / 64  -- 2 bits of c0 left
  local a = I % 256
  i.A = a
  I = byte(x, 3) * 4 + (I - a) / 256  -- 2 bits of c1 left
  local c = I % 512
  i.C = c
  i.B = byte(x, 4) * 2 + (I - c) / 512 -- 1 bits of c2 left
  local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
  if opmode ~= "iABC" then
    i.Bx = i.B * 512 + i.C
  end
  return i
end

------------------------------------------------------------------------
-- Macros to operate RK indices
-- * these use arithmetic instead of bit ops
------------------------------------------------------------------------

-- this bit 1 means constant (0 means register)
luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

-- test whether value is a constant
function luaP:ISK(x) return x >= self.BITRK end

-- gets the index of the constant
function luaP:INDEXK(x) return x - self.BITRK end

luaP.MAXINDEXRK = luaP.BITRK - 1

-- code a constant index as a RK value
function luaP:RKASK(x) return x + self.BITRK end

------------------------------------------------------------------------
-- invalid register that fits in 8 bits
------------------------------------------------------------------------
luaP.NO_REG = luaP.MAXARG_A

------------------------------------------------------------------------
-- R(x) - register
-- Kst(x) - constant (in constant table)
-- RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
------------------------------------------------------------------------

------------------------------------------------------------------------
-- grep "ORDER OP" if you change these enums
------------------------------------------------------------------------

--[[--------------------------------------------------------------------
Lua virtual machine opcodes (enum OpCode):
------------------------------------------------------------------------
name          args    description
------------------------------------------------------------------------
OP_MOVE       A B     R(A) := R(B)
OP_LOADK      A Bx    R(A) := Kst(Bx)
OP_LOADBOOL   A B C   R(A) := (Bool)B; if (C) pc++
OP_LOADNIL    A B     R(A) := ... := R(B) := nil
OP_GETUPVAL   A B     R(A) := UpValue[B]
OP_GETGLOBAL  A Bx    R(A) := Gbl[Kst(Bx)]
OP_GETTABLE   A B C   R(A) := R(B)[RK(C)]
OP_SETGLOBAL  A Bx    Gbl[Kst(Bx)] := R(A)
OP_SETUPVAL   A B     UpValue[B] := R(A)
OP_SETTABLE   A B C   R(A)[RK(B)] := RK(C)
OP_NEWTABLE   A B C   R(A) := {} (size = B,C)
OP_SELF       A B C   R(A+1) := R(B); R(A) := R(B)[RK(C)]
OP_ADD        A B C   R(A) := RK(B) + RK(C)
OP_SUB        A B C   R(A) := RK(B) - RK(C)
OP_MUL        A B C   R(A) := RK(B) * RK(C)
OP_DIV        A B C   R(A) := RK(B) / RK(C)
OP_MOD        A B C   R(A) := RK(B) % RK(C)
OP_POW        A B C   R(A) := RK(B) ^ RK(C)
OP_UNM        A B     R(A) := -R(B)
OP_NOT        A B     R(A) := not R(B)
OP_LEN        A B     R(A) := length of R(B)
OP_CONCAT     A B C   R(A) := R(B).. ... ..R(C)
OP_JMP        sBx     pc+=sBx
OP_EQ         A B C   if ((RK(B) == RK(C)) ~= A) then pc++
OP_LT         A B C   if ((RK(B) <  RK(C)) ~= A) then pc++
OP_LE         A B C   if ((RK(B) <= RK(C)) ~= A) then pc++
OP_TEST       A C     if not (R(A) <=> C) then pc++
OP_TESTSET    A B C   if (R(B) <=> C) then R(A) := R(B) else pc++
OP_CALL       A B C   R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
OP_TAILCALL   A B C   return R(A)(R(A+1), ... ,R(A+B-1))
OP_RETURN     A B     return R(A), ... ,R(A+B-2)  (see note)
OP_FORLOOP    A sBx   R(A)+=R(A+2);
                      if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
OP_FORPREP    A sBx   R(A)-=R(A+2); pc+=sBx
OP_TFORLOOP   A C     R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
                      if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
OP_SETLIST    A B C   R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
OP_CLOSE      A       close all variables in the stack up to (>=) R(A)
OP_CLOSURE    A Bx    R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
OP_VARARG     A B     R(A), R(A+1), ..., R(A+B-1) = vararg
----------------------------------------------------------------------]]

luaP.opnames = {}  -- opcode names
luaP.OpCode = {}   -- lookup name -> number
luaP.ROpCode = {}  -- lookup number -> name

------------------------------------------------------------------------
-- ORDER OP
------------------------------------------------------------------------
local i = 0
for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
  local n = "OP_"..v
  luaP.opnames[i] = v
  luaP.OpCode[n] = i
  luaP.ROpCode[i] = n
  i = i + 1
end
luaP.NUM_OPCODES = i

--[[
===========================================================================
  Notes:
  (*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
      and can be 0: OP_CALL then sets 'top' to last_result+1, so
      next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use 'top'.
  (*) In OP_VARARG, if (B == 0) then use actual number of varargs and
      set top (like in OP_CALL with C == 0).
  (*) In OP_RETURN, if (B == 0) then return up to 'top'
  (*) In OP_SETLIST, if (B == 0) then B = 'top';
      if (C == 0) then next 'instruction' is real C
  (*) For comparisons, A specifies what condition the test should accept
      (true or false).
  (*) All 'skips' (pc++) assume that next instruction is a jump
===========================================================================
--]]

--[[--------------------------------------------------------------------
  masks for instruction properties. The format is:
  bits 0-1: op mode
  bits 2-3: C arg mode
  bits 4-5: B arg mode
  bit 6: instruction set register A
  bit 7: operator is a test

  for OpArgMask:
  OpArgN - argument is not used
  OpArgU - argument is used
  OpArgR - argument is a register or a jump offset
  OpArgK - argument is a constant or register/constant
----------------------------------------------------------------------]]

-- was enum OpArgMask
luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

------------------------------------------------------------------------
-- e.g. to compare with symbols, luaP:getOpMode(...) == luaP.OpCode.iABC
-- * accepts opcode parameter as strings, e.g. "OP_MOVE"
------------------------------------------------------------------------

function luaP:getOpMode(m)
  return self.opmodes[self.OpCode[m]] % 4
end

function luaP:getBMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
end

function luaP:getCMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
end

function luaP:testAMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
end

function luaP:testTMode(m)
  return math.floor(self.opmodes[self.OpCode[m]] / 128)
end

-- luaP_opnames[] is set above, as the luaP.opnames table

-- number of list items to accumulate before a SETLIST instruction
luaP.LFIELDS_PER_FLUSH = 50

------------------------------------------------------------------------
-- build instruction properties array
-- * deliberately coded to look like the C equivalent
------------------------------------------------------------------------
local function opmode(t, a, b, c, m)
  local luaP = luaP
  return t * 128 + a * 64 +
         luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
end

-- ORDER OP
luaP.opmodes = {
-- T A B C mode opcode
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_LOADK
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_LOADBOOL
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LOADNIL
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_GETUPVAL
  opmode(0, 1, "OpArgK", "OpArgN", "iABx"),     -- OP_GETGLOBAL
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_GETTABLE
  opmode(0, 0, "OpArgK", "OpArgN", "iABx"),     -- OP_SETGLOBAL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_SETUPVAL
  opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_SETTABLE
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_NEWTABLE
  opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     -- OP_SELF
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_ADD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_SUB
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MUL
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_DIV
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_MOD
  opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     -- OP_POW
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_UNM
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_NOT
  opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     -- OP_LEN
  opmode(0, 1, "OpArgR", "OpArgR", "iABC"),     -- OP_CONCAT
  opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"),    -- OP_JMP
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_EQ
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LT
  opmode(1, 0, "OpArgK", "OpArgK", "iABC"),     -- OP_LE
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TEST
  opmode(1, 1, "OpArgR", "OpArgU", "iABC"),     -- OP_TESTSET
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_CALL
  opmode(0, 1, "OpArgU", "OpArgU", "iABC"),     -- OP_TAILCALL
  opmode(0, 0, "OpArgU", "OpArgN", "iABC"),     -- OP_RETURN
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORLOOP
  opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),    -- OP_FORPREP
  opmode(1, 0, "OpArgN", "OpArgU", "iABC"),     -- OP_TFORLOOP
  opmode(0, 0, "OpArgU", "OpArgU", "iABC"),     -- OP_SETLIST
  opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     -- OP_CLOSE
  opmode(0, 1, "OpArgU", "OpArgN", "iABx"),     -- OP_CLOSURE
  opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     -- OP_VARARG
}
-- an awkward way to set a zero-indexed table...
luaP.opmodes[0] =
  opmode(0, 1, "OpArgR", "OpArgN", "iABC")      -- OP_MOVE

return luaP
end;
};
G2L_MODULES[G2L["18"]] = {
Closure = function()
    local script = G2L["18"];
local Concat	= table.concat;
local Select	= select;
local _Byte		= string.byte;
local Sub		= string.sub;
local Opcode	= { -- Opcode types.
	'ABC',	'ABx',	'ABC',	'ABC';
	'ABC',	'ABx',	'ABC',	'ABx';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'AsBx',	'ABC';
	'ABC',	'ABC',	'ABC',	'ABC';
	'ABC',	'ABC',	'ABC',	'AsBx';
	'AsBx',	'ABC',	'ABC',	'ABC';
	'ABx',	'ABC';
};

-- rlbi author -> Rerumu

--[[
	Features;
		* Almost complete rework/rewrite
		* Fast and performant
		* Fixes to upvalues
		* C Stack overflow fixes in opcodes
		* Fixed missing/broken returns
		* Numeric constant 0 is properly handled
		* Formatted in a more readable manner
		* Tailcalls and stack issues have been fixed
		* CLOSE implemented
		* SETLIST (extended) implemented
		* VARARG fixes
--]]

local function gBit(Bit, Start, End) -- No tail-calls, yay.
	if End then -- Thanks to cntkillme for giving input on this shorter, better approach.
		local Res	= (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1);

		return Res - Res % 1;
	else
		local Plc = 2 ^ (Start - 1);

		if (Bit % (Plc + Plc) >= Plc) then
			return 1;
		else
			return 0;
		end;
	end;
end;

local function GetMeaning(ByteString)
	local Pos	= 1;
	local gSizet;
	local gInt;

	local function gBits8() -- Get the next byte in the stream.
		local F	= _Byte(ByteString, Pos, Pos);

		Pos	= Pos + 1;

		return F;
	end;

	local function gBits32()
		local W, X, Y, Z	= _Byte(ByteString, Pos, Pos + 3);

		Pos	= Pos + 4;

		return (Z * 16777216) + (Y * 65536) + (X * 256) + W;
	end;

	local function gBits64()
		return gBits32() * 4294967296 + gBits32();
	end;

	local function gFloat()
		local A, B	= gBits32(), gBits32();

		if ((A + B) == 0) then
			return 0; -- Float 0 tends to be very messy, so this is a temp fix until I figure out what's up.
		else
			return (-2 * gBit(B, 32) + 1) * (2 ^ (gBit(B, 21, 31) - 1023)) * ((gBit(B, 1, 20) * (2^32) + A) / (2 ^ 52) + 1);
		end;
	end;

	local function gString(Len)
		local Str;

		if Len then
			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		else
			Len = gSizet();

			if (Len == 0) then return; end;

			Str	= Sub(ByteString, Pos, Pos + Len - 1);

			Pos = Pos + Len;
		end;

		return Str;
	end;

	local function ChunkDecode()
		local Instr	= {};
		local Const	= {};
		local Proto	= {};
		local Chunk	= {
			Instr	= Instr; -- Instructions
			Const	= Const; -- Constants
			Proto	= Proto; -- Prototypes
			Lines	= {}; -- Lines
			Name	= gString(); -- Grab name string.
			FirstL	= gInt(); -- First line.
			LastL	= gInt(); -- Last line.
			Upvals	= gBits8(); -- Upvalue count.
			Args	= gBits8(); -- Arg count.
			Vargs	= gBits8(); -- Vararg type.
			Stack	= gBits8(); -- Stack.
		};

		if Chunk.Name then
			Chunk.Name	= Sub(Chunk.Name, 1, -2);
		end;

		for Idx = 1, gInt() do -- Loading instructions to the chunk.
			local Data	= gBits32();
			local Opco	= gBit(Data, 1, 6);
			local Type	= Opcode[Opco + 1];
			local Inst;

			if Type then
				Inst	= {
					Enum	= Opco;
					gBit(Data, 7, 14); -- Register A.
				};

				if (Type == 'ABC') then -- Most common, basic instruction type.
					Inst[2]	= gBit(Data, 24, 32);
					Inst[3]	= gBit(Data, 15, 23);
				elseif (Type == 'ABx') then
					Inst[2]	= gBit(Data, 15, 32);
				elseif (Type == 'AsBx') then
					Inst[2]	= gBit(Data, 15, 32) - 131071;
				end;
			else
				Inst	= Data; -- Extended SETLIST
			end;

			Instr[Idx]	= Inst;
		end;

		for Idx = 1, gInt() do -- Load constants.
			local Type	= gBits8();
			local Cons;

			if (Type == 1) then -- Boolean
				Cons	= (gBits8() ~= 0);
			elseif (Type == 3) then -- Float/Double
				Cons	= gFloat();
			elseif (Type == 4) then
				Cons	= Sub(gString(), 1, -2);
			end;

			Const[Idx - 1]	= Cons;
		end;

		for Idx = 1, gInt() do -- Nested function prototypes.
			Proto[Idx - 1]	= ChunkDecode();
		end;

		do -- Debugging
			local Lines	= Chunk.Lines;

			for Idx = 1, gInt() do
				Lines[Idx]	= gBits32();
			end;

			for Idx = 1, gInt() do -- Locals in stack.
				gString(); -- Name of local.
				gBits32(); -- Starting point.
				gBits32(); -- End point.
			end;

			for Idx = 1, gInt() do -- Upvalues.
				gString(); -- Name of upvalue.
			end;
		end;

		return Chunk; -- Finished chunk.
	end;

	do -- Most of this chunk I was too lazy to reformat or change
		assert(gString(4) == "\27Lua", "Lua bytecode expected.");
		assert(gBits8() == 0x51, "Only Lua 5.1 is supported.");

		gBits8(); -- Probably version control.
		gBits8(); -- Is small endians.

		local IntSize	= gBits8(); -- Int size
		local Sizet		= gBits8(); -- size_t

		if (IntSize == 4) then
			gInt	= gBits32;
		elseif (IntSize == 8) then
			gInt	= gBits64;
		else
			error('Integer size not supported', 2);
		end;

		if (Sizet == 4) then
			gSizet	= gBits32;
		elseif (Sizet == 8) then
			gSizet	= gBits64;
		else
			error('Sizet size not supported', 2);
		end;

		assert(gString(3) == "\4\8\0", "Unsupported bytecode target platform");
	end;

	return ChunkDecode();
end;

local function _Returns(...)
	return Select('#', ...), {...};
end;

local function Wrap(Chunk, Env, Upvalues)
	local Instr	= Chunk.Instr;
	local Const	= Chunk.Const;
	local Proto	= Chunk.Proto;

	local function OnError(Err, Position) -- Handle your errors in whatever way.
		local Name	= Chunk.Name or 'Code';
		local Line	= Chunk.Lines[Position] or '?';
		local Err	= Err:match'^.+:%s*(.+)' or Err;

		error(string.format('%s (%s): %s', Name, Line, Err), 0);
	end;

	return function(...) -- Returned function to run bytecode chunk (Don't be stupid, you can't setfenv this to work your way).
		local Upvalues	= Upvalues;
		local Instr		= Instr;
		local Const		= Const;
		local Proto		= Proto;

		local InstrPoint, Top	= 1, -1;
		local Vararg, Varargsz	= {}, Select('#', ...) - 1;

		local GStack	= {};
		local Lupvals	= {};
		local Stack		= setmetatable({}, {
			__index		= GStack;
			__newindex	= function(_, Key, Value)
				if (Key > Top) and Value then
					Top	= Key;
				end;

				GStack[Key]	= Value;
			end;
		});

		local function Loop()
			local Instr	= Instr;
			local Inst, Enum, A, B;

			while true do
				Inst		= Instr[InstrPoint];
				Enum		= Inst.Enum;
				InstrPoint	= InstrPoint + 1;

				if (Enum == 0) then -- MOVE
					Stack[Inst[1]]	= Stack[Inst[2]];
				elseif (Enum == 1) then -- LOADK
					Stack[Inst[1]]	= Const[Inst[2]];
				elseif (Enum == 2) then -- LOADBOOL
					Stack[Inst[1]]	= (Inst[2] ~= 0);

					if (Inst[3] ~= 0) then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 3) then -- LOADNIL
					local Stk	= Stack;

					for Idx = Inst[1], Inst[2] do
						Stk[Idx]	= nil;
					end;
				elseif (Enum == 4) then -- GETUPVAL
					Stack[Inst[1]]	= Upvalues[Inst[2]];
				elseif (Enum == 5) then -- GETGLOBAL
					Stack[Inst[1]]	= Env[Const[Inst[2]]];
				elseif (Enum == 6) then -- GETTABLE
					local C		= Inst[3];
					local Stk	= Stack;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= Stk[Inst[2]][C];
				elseif (Enum == 7) then -- SETGLOBAL
					Env[Const[Inst[2]]]	= Stack[Inst[1]];
				elseif (Enum == 8) then -- SETUPVAL
					Upvalues[Inst[2]]	= Stack[Inst[1]];
				elseif (Enum == 9) then -- SETTABLE
					local B, C	= Inst[2], Inst[3];
					local Stk	= Stack;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]][B]	= C;
				elseif (Enum == 10) then -- NEWTABLE
					Stack[Inst[1]]	= {};
				elseif (Enum == 11) then -- SELF
					local A		= Inst[1];
					local B		= Inst[2];
					local C		= Inst[3];
					local Stk	= Stack;

					B = Stk[B];

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[A + 1]	= B;
					Stk[A]		= B[C];
				elseif (Enum == 12) then -- ADD
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B + C;
				elseif (Enum == 13) then -- SUB
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B - C;
				elseif (Enum == 14) then -- MUL
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B * C;
				elseif (Enum == 15) then -- DIV
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B / C;
				elseif (Enum == 16) then -- MOD
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B % C;
				elseif (Enum == 17) then -- POW
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					Stk[Inst[1]]	= B ^ C;
				elseif (Enum == 18) then -- UNM
					Stack[Inst[1]]	= -Stack[Inst[2]];
				elseif (Enum == 19) then -- NOT
					Stack[Inst[1]]	= (not Stack[Inst[2]]);
				elseif (Enum == 20) then -- LEN
					Stack[Inst[1]]	= #Stack[Inst[2]];
				elseif (Enum == 21) then -- CONCAT
					local Stk	= Stack;
					local B		= Inst[2];
					local K		= {Stack[B]};

					for Idx = B + 1, Inst[3] do
						K[#K + 1]	= Stk[Idx];
					end;

					Stack[Inst[1]]	= Concat(K);
				elseif (Enum == 22) then -- JUMP
					InstrPoint	= InstrPoint + Inst[2];
				elseif (Enum == 23) then -- EQ
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B == C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 24) then -- LT
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B < C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 25) then -- LE
					local A	= Inst[1] ~= 0;
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk, Con	= Stack, Const;

					if (B > 255) then
						B	= Const[B - 256];
					else
						B	= Stk[B];
					end;

					if (C > 255) then
						C	= Const[C - 256];
					else
						C	= Stk[C];
					end;

					if (B <= C) ~= A then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 26) then -- TEST
					if (not not Stack[Inst[1]]) == (Inst[3] == 0) then
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 27) then -- TESTSET
					local B	= Stack[Inst[2]];

					if (not not B) == (Inst[3] == 0) then
						InstrPoint	= InstrPoint + 1;
					else
						Stack[Inst[1]] = B;
					end;
				elseif (Enum == 28) then -- CALL
					local A	= Inst[1];
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk	= Stack;
					local Args, Results;
					local Limit, Loop;

					Args	= {};

					if (B ~= 1) then
						if (B ~= 0) then
							Limit = A + B - 1;
						else
							Limit = Top;
						end;

						Loop	= 0;

						for Idx = A + 1, Limit do
							Loop = Loop + 1;

							Args[Loop] = Stk[Idx];
						end;

						Limit, Results = _Returns(Stk[A](unpack(Args, 1, Limit - A)));
					else
						Limit, Results = _Returns(Stk[A]());
					end;

					Top = A - 1;

					if (C ~= 1) then
						if (C ~= 0) then
							Limit = A + C - 2;
						else
							Limit = Limit + A;
						end;

						Loop	= 0;

						for Idx = A, Limit do
							Loop = Loop + 1;

							Stk[Idx] = Results[Loop];
						end;
					end;
				elseif (Enum == 29) then -- TAILCALL
					local A	= Inst[1];
					local B	= Inst[2];
					local C	= Inst[3];
					local Stk	= Stack;
					local Args, Results;
					local Limit, Loop;

					Args = {};

					if (B ~= 1) then
						if (B ~= 0) then
							Limit = A + B - 1;
						else
							Limit = Top;
						end

						Loop = 0;

						for Idx = A + 1, Limit do
							Loop = Loop + 1;

							Args[#Args + 1] = Stk[Idx];
						end

						Results = {Stk[A](unpack(Args, 1, Limit - A))};
					else
						Results = {Stk[A]()};
					end;

					return Results;
				elseif (Enum == 30) then -- RETURN
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk	= Stack;
					local Loop, Output;
					local Limit;

					if (B == 1) then
						return;
					elseif (B == 0) then
						Limit	= Top;
					else
						Limit	= A + B - 2;
					end;

					Output = {};

					local Loop	= 0;

					for Idx = A, Limit do
						Loop	= Loop + 1;

						Output[Loop] = Stk[Idx];
					end;

					return Output;
				elseif (Enum == 31) then -- FORLOOP
					local A		= Inst[1];
					local Stk	= Stack;

					local Step	= Stk[A + 2];
					local Index	= Stk[A] + Step;

					Stk[A]	= Index;

					if (Step > 0) then
						if Index <= Stk[A + 1] then
							InstrPoint	= InstrPoint + Inst[2];

							Stk[A + 3] = Index;
						end;
					else
						if Index >= Stk[A + 1] then
							InstrPoint	= InstrPoint + Inst[2];

							Stk[A + 3] = Index;
						end
					end
				elseif (Enum == 32) then -- FORPREP
					local A		= Inst[1];
					local Stk	= Stack;

					Stk[A]	= Stk[A] - Stk[A + 2];

					InstrPoint	= InstrPoint + Inst[2];
				elseif (Enum == 33) then -- TFORLOOP
					local A		= Inst[1];
					local B		= Inst[2];
					local C		= Inst[3];
					local Stk	= Stack;

					local Offset	= A + 2;
					local Result	= {Stk[A](Stk[A + 1], Stk[A + 2])};

					for Idx = 1, C do
						Stack[Offset + Idx] = Result[Idx];
					end;

					if (Stk[A + 3] ~= nil) then
						Stk[A + 2]	= Stk[A + 3];
					else
						InstrPoint	= InstrPoint + 1;
					end;
				elseif (Enum == 34) then -- SETLIST
					local A		= Inst[1];
					local B		= Inst[2];
					local C		= Inst[3];
					local Stk	= Stack;

					if (C == 0) then
						InstrPoint	= InstrPoint + 1;
						C			= Instr[InstrPoint]; -- This implementation was ambiguous! Will eventually re-test.
					end;

					local Offset	= (C - 1) * 50;
					local T			= Stk[A]; -- Assuming T is the newly created table.

					if (B == 0) then
						B	= Top;
					end;

					for Idx = 1, B do
						T[Offset + Idx] = Stk[A + Idx];
					end;
				elseif (Enum == 35) then -- CLOSE
					local A		= Inst[1];
					local Cls	= {}; -- Slight doubts on any issues this may cause

					for Idx = 1, #Lupvals do
						local List = Lupvals[Idx];

						for Idz = 0, #List do
							local Upv	= List[Idz];
							local Stk	= Upv[1];
							local Pos	= Upv[2];

							if (Stk == Stack) and (Pos >= A) then
								Cls[Pos]	= Stk[Pos];
								Upv[1]		= Cls; -- @memcorrupt credit me for the spoonfeed
							end;
						end;
					end;
				elseif (Enum == 36) then -- CLOSURE
					local Proto	= Proto[Inst[2]];
					local Instr = Instr;
					local Stk	= Stack;

					local Indexes;
					local NewUvals;

					if (Proto.Upvals ~= 0) then
						Indexes		= {};
						NewUvals	= setmetatable({}, {
								__index = function(_, Key)
									local Val	= Indexes[Key];

									return Val[1][Val[2]];
								end,
								__newindex = function(_, Key, Value)
									local Val	= Indexes[Key];

									Val[1][Val[2]]	= Value;
								end;
							}
						);

						for Idx = 1, Proto.Upvals do
							local Mvm	= Instr[InstrPoint];

							if (Mvm.Enum == 0) then -- MOVE
								Indexes[Idx - 1] = {Stk, Mvm[2]};
							elseif (Mvm.Enum == 4) then -- GETUPVAL
								Indexes[Idx - 1] = {Upvalues, Mvm[2]};
							end;

							InstrPoint	= InstrPoint + 1;
						end;

						Lupvals[#Lupvals + 1]	= Indexes;
					end;

					Stk[Inst[1]]			= Wrap(Proto, Env, NewUvals);
				elseif (Enum == 37) then -- VARARG
					local A	= Inst[1];
					local B	= Inst[2];
					local Stk, Vararg	= Stack, Vararg;

					for Idx = A, A + (B > 0 and B - 1 or Varargsz) do
						Stk[Idx]	= Vararg[Idx - A];
					end;
				end;
			end;
		end;

		local Args	= {...};

		for Idx = 0, Varargsz do
			Stack[Idx] = Args[Idx + 1];

			if (Idx >= Chunk.Args) then
				Vararg[Idx - Chunk.Args] = Args[Idx + 1];
			end;
		end;

		local A, B		= pcall(Loop); -- Pcalling to allow yielding

		if A then -- We're always expecting this to come out true (because errorless code)
			if B then -- So I flipped the conditions.
				return unpack(B);
			end;

			return;
		else
			OnError(B, InstrPoint - 1); -- Didn't get time to test the `-1` honestly, but I assume it works properly
		end;
	end;
end;

return function(BCode, Env) -- lua_function LoadBytecode (string BCode, table Env)
	local Buffer	= GetMeaning(BCode);

	return Wrap(Buffer, Env or getfenv(0)), Buffer;
end;
end;
};
G2L_MODULES[G2L["1e"]] = {
Closure = function()
    local script = G2L["1e"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["22"]] = {
Closure = function()
    local script = G2L["22"];
local R6Converter = {}
function R6Converter.load(Plr)
Plr = game.Players:WaitForChild(Plr)
local FalseChar = script:WaitForChild(" "):Clone()
local PlayersCharacter = game.Players:GetCharacterAppearanceAsync(Plr.UserId):Clone()
local FaceID = (Plr.Character:WaitForChild("Head"):FindFirstChild("face") or {Texture = "http://www.roblox.com/asset/?id=144080495"}).Texture
local Accessories = {}
FalseChar:WaitForChild("Head"):WaitForChild("face").Texture = FaceID
FalseChar:SetPrimaryPartCFrame(Plr.Character:WaitForChild("HumanoidRootPart").CFrame)
for _,Prt in pairs(PlayersCharacter:GetDescendants()) do
if Prt:IsA("Accessory") or Prt:IsA("Hat") or Prt:IsA("BodyColors") or Prt:IsA("CharacterMesh")or Prt:IsA("Pants") or Prt:IsA("Shirt") or Prt:IsA("ShirtGraphic") or Prt:IsA("Tool") then
table.insert(Accessories,Prt:Clone())
end
end

for _,Prt in pairs(Plr.Character:GetChildren()) do
Prt:Destroy()
end
for _,Prt in pairs(FalseChar:GetChildren()) do
Prt.Parent = Plr.Character
end
for _,Prt in pairs(Accessories) do
Prt.Parent = Plr.Character
end
FalseChar:WaitForChild"Sound":WaitForChild"LocalSound".Disabled = false

end

return R6Converter

end;
};
G2L_MODULES[G2L["7c"]] = {
Closure = function()
    local script = G2L["7c"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														print("This place uses a model by Come0n.") --please do not remove!
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["88"]] = {
Closure = function()
    local script = G2L["88"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["91"]] = {
Closure = function()
    local script = G2L["91"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["9a"]] = {
Closure = function()
    local script = G2L["9a"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
G2L_MODULES[G2L["b2"]] = {
Closure = function()
    local script = G2L["b2"];
--[[
	
											𝐇𝐞𝐥𝐥𝐨!
				You should read 'RippleClick' located right beneath this module!
	It is recommended for newer developers, to set this module somewhere in ReplicatedStorage
	
									       𝐂𝐫𝐞𝐚𝐭𝐨𝐫
									    szkiller_dev
	
--]]

























































































function CircleClick(Button, X, Y)
	coroutine.resume(coroutine.create(function()
		Button.ClipsDescendants = true
		local Circle = script:WaitForChild("Circle"):Clone()
			Circle.Parent = Button
			local NewX = X - Circle.AbsolutePosition.X
			local NewY = Y - Circle.AbsolutePosition.Y
			Circle.Position = UDim2.new(0, NewX, 0, NewY)
		local Size = 0
			if Button.AbsoluteSize.X > Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.X*1.5
			elseif Button.AbsoluteSize.X < Button.AbsoluteSize.Y then
				 Size = Button.AbsoluteSize.Y*1.5
			elseif Button.AbsoluteSize.X == Button.AbsoluteSize.Y then																																																																														
				Size = Button.AbsoluteSize.X*1.5
			end
		local Time = 0.5
			Circle:TweenSizeAndPosition(UDim2.new(0, Size, 0, Size), UDim2.new(0.5, -Size/2, 0.5, -Size/2), "Out", "Quad", Time, false, nil)
			for i=1,10 do
				Circle.ImageTransparency = Circle.ImageTransparency + 0.01
				wait(Time/10)
			end
			Circle:Destroy()
	end))
end
return CircleClick
end;
};
-- StarterGui.Exoliner.Main.TopBar.Close.RippleEffect.RippleClick
local function C_7()
local script = G2L["7"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_7);
-- StarterGui.Exoliner.Main.TopBar.Close.LocalScript
local function C_8()
local script = G2L["8"];
	local Close = script.Parent
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,0,0);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		
		script.Parent.Parent.Parent:TweenPosition(UDim2.new(-1, 0,0.425, 0), "In", "Quint", 2, true)
	end)
end;
task.spawn(C_8);
-- StarterGui.Exoliner.Main.LocalScript
local function C_e()
local script = G2L["e"];
	script.Parent.Parent.Parent.Exoliner.Enabled = true
end;
task.spawn(C_e);
-- StarterGui.Exoliner.Main.Execute.LocalScript
local function C_19()
local script = G2L["19"];
	local Close = script.Parent
	local player = game.Players.localPlayer
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		script.Parent.nice:FireServer(script.Parent.Parent.Scroll.CodeBox.Text)
		script.Parent.Parent.Scroll.CodeBox:ReleaseFocus()
		if script.Parent.Parent.Scroll.CodeBox.Text == "/respawn" then
			script.RemoteEvent:FireServer()
		elseif script.Parent.Parent.Scroll.CodeBox.Text == "/R6" then
			script.RemoteEvent2:FireServer()
		end
	end)
end;
task.spawn(C_19);
-- StarterGui.Exoliner.Main.Execute.RippleEffect.RippleClick
local function C_20()
local script = G2L["20"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_20);
-- StarterGui.Exoliner.Main.Execute.R6. .Animate
local function C_24()
local script = G2L["24"];
	local Figure = script.Parent
	local Torso = Figure:WaitForChild("Torso")
	local RightShoulder = Torso:WaitForChild("Right Shoulder")
	local LeftShoulder = Torso:WaitForChild("Left Shoulder")
	local RightHip = Torso:WaitForChild("Right Hip")
	local LeftHip = Torso:WaitForChild("Left Hip")
	local Neck = Torso:WaitForChild("Neck")
	local Humanoid = Figure:WaitForChild("Humanoid")
	local pose = "Standing"
	
	local currentAnim = ""
	local currentAnimInstance = nil
	local currentAnimTrack = nil
	local currentAnimKeyframeHandler = nil
	local currentAnimSpeed = 1.0
	local animTable = {}
	local animNames = { 
		idle = 	{	
					{ id = "http://www.roblox.com/asset/?id=180435571", weight = 9 },
					{ id = "http://www.roblox.com/asset/?id=180435792", weight = 1 }
				},
		walk = 	{ 	
					{ id = "http://www.roblox.com/asset/?id=180426354", weight = 10 } 
				}, 
		run = 	{
					{ id = "run.xml", weight = 10 } 
				}, 
		jump = 	{
					{ id = "http://www.roblox.com/asset/?id=125750702", weight = 10 } 
				}, 
		fall = 	{
					{ id = "http://www.roblox.com/asset/?id=180436148", weight = 10 } 
				}, 
		climb = {
					{ id = "http://www.roblox.com/asset/?id=180436334", weight = 10 } 
				}, 
		sit = 	{
					{ id = "http://www.roblox.com/asset/?id=178130996", weight = 10 } 
				},	
		toolnone = {
					{ id = "http://www.roblox.com/asset/?id=182393478", weight = 10 } 
				},
		toolslash = {
					{ id = "http://www.roblox.com/asset/?id=129967390", weight = 10 } 
	--				{ id = "slash.xml", weight = 10 } 
				},
		toollunge = {
					{ id = "http://www.roblox.com/asset/?id=129967478", weight = 10 } 
				},
		wave = {
					{ id = "http://www.roblox.com/asset/?id=128777973", weight = 10 } 
				},
		point = {
					{ id = "http://www.roblox.com/asset/?id=128853357", weight = 10 } 
				},
		dance1 = {
					{ id = "http://www.roblox.com/asset/?id=182435998", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491037", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491065", weight = 10 } 
				},
		dance2 = {
					{ id = "http://www.roblox.com/asset/?id=182436842", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491248", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491277", weight = 10 } 
				},
		dance3 = {
					{ id = "http://www.roblox.com/asset/?id=182436935", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491368", weight = 10 }, 
					{ id = "http://www.roblox.com/asset/?id=182491423", weight = 10 } 
				},
		laugh = {
					{ id = "http://www.roblox.com/asset/?id=129423131", weight = 10 } 
				},
		cheer = {
					{ id = "http://www.roblox.com/asset/?id=129423030", weight = 10 } 
				},
	}
	local dances = {"dance1", "dance2", "dance3"}
	
	-- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
	local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false}
	
	function configureAnimationSet(name, fileList)
		if (animTable[name] ~= nil) then
			for _, connection in pairs(animTable[name].connections) do
				connection:disconnect()
			end
		end
		animTable[name] = {}
		animTable[name].count = 0
		animTable[name].totalWeight = 0	
		animTable[name].connections = {}
	
		-- check for config values
		local config = script:FindFirstChild(name)
		if (config ~= nil) then
	--		print("Loading anims " .. name)
			table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
			table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
			local idx = 1
			for _, childPart in pairs(config:GetChildren()) do
				if (childPart:IsA("Animation")) then
					table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
					animTable[name][idx] = {}
					animTable[name][idx].anim = childPart
					local weightObject = childPart:FindFirstChild("Weight")
					if (weightObject == nil) then
						animTable[name][idx].weight = 1
					else
						animTable[name][idx].weight = weightObject.Value
					end
					animTable[name].count = animTable[name].count + 1
					animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
		--			print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
					idx = idx + 1
				end
			end
		end
	
		-- fallback to defaults
		if (animTable[name].count <= 0) then
			for idx, anim in pairs(fileList) do
				animTable[name][idx] = {}
				animTable[name][idx].anim = Instance.new("Animation")
				animTable[name][idx].anim.Name = name
				animTable[name][idx].anim.AnimationId = anim.id
				animTable[name][idx].weight = anim.weight
				animTable[name].count = animTable[name].count + 1
				animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
	--			print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
			end
		end
	end
	
	-- Setup animation objects
	function scriptChildModified(child)
		local fileList = animNames[child.Name]
		if (fileList ~= nil) then
			configureAnimationSet(child.Name, fileList)
		end	
	end
	
	script.ChildAdded:connect(scriptChildModified)
	script.ChildRemoved:connect(scriptChildModified)
	
	
	for name, fileList in pairs(animNames) do 
		configureAnimationSet(name, fileList)
	end	
	
	-- ANIMATION
	
	-- declarations
	local toolAnim = "None"
	local toolAnimTime = 0
	
	local jumpAnimTime = 0
	local jumpAnimDuration = 0.3
	
	local toolTransitionTime = 0.1
	local fallTransitionTime = 0.3
	local jumpMaxLimbVelocity = 0.75
	
	-- functions
	
	function stopAllAnimations()
		local oldAnim = currentAnim
	
		-- return to idle if finishing an emote
		if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
			oldAnim = "idle"
		end
	
		currentAnim = ""
		currentAnimInstance = nil
		if (currentAnimKeyframeHandler ~= nil) then
			currentAnimKeyframeHandler:disconnect()
		end
	
		if (currentAnimTrack ~= nil) then
			currentAnimTrack:Stop()
			currentAnimTrack:Destroy()
			currentAnimTrack = nil
		end
		return oldAnim
	end
	
	function setAnimationSpeed(speed)
		if speed ~= currentAnimSpeed then
			currentAnimSpeed = speed
			currentAnimTrack:AdjustSpeed(currentAnimSpeed)
		end
	end
	
	function keyFrameReachedFunc(frameName)
		if (frameName == "End") then
	
			local repeatAnim = currentAnim
			-- return to idle if finishing an emote
			if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
				repeatAnim = "idle"
			end
			
			local animSpeed = currentAnimSpeed
			playAnimation(repeatAnim, 0.0, Humanoid)
			setAnimationSpeed(animSpeed)
		end
	end
	
	-- Preload animations
	function playAnimation(animName, transitionTime, humanoid) 
			
		local roll = math.random(1, animTable[animName].totalWeight) 
		local origRoll = roll
		local idx = 1
		while (roll > animTable[animName][idx].weight) do
			roll = roll - animTable[animName][idx].weight
			idx = idx + 1
		end
	--		print(animName .. " " .. idx .. " [" .. origRoll .. "]")
		local anim = animTable[animName][idx].anim
	
		-- switch animation		
		if (anim ~= currentAnimInstance) then
			
			if (currentAnimTrack ~= nil) then
				currentAnimTrack:Stop(transitionTime)
				currentAnimTrack:Destroy()
			end
	
			currentAnimSpeed = 1.0
		
			-- load it to the humanoid; get AnimationTrack
			currentAnimTrack = humanoid:LoadAnimation(anim)
			currentAnimTrack.Priority = Enum.AnimationPriority.Core
			 
			-- play the animation
			currentAnimTrack:Play(transitionTime)
			currentAnim = animName
			currentAnimInstance = anim
	
			-- set up keyframe name triggers
			if (currentAnimKeyframeHandler ~= nil) then
				currentAnimKeyframeHandler:disconnect()
			end
			currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
			
		end
	
	end
	
	-------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------
	
	local toolAnimName = ""
	local toolAnimTrack = nil
	local toolAnimInstance = nil
	local currentToolAnimKeyframeHandler = nil
	
	function toolKeyFrameReachedFunc(frameName)
		if (frameName == "End") then
	--		print("Keyframe : ".. frameName)	
			playToolAnimation(toolAnimName, 0.0, Humanoid)
		end
	end
	
	
	function playToolAnimation(animName, transitionTime, humanoid, priority)	 
			
			local roll = math.random(1, animTable[animName].totalWeight) 
			local origRoll = roll
			local idx = 1
			while (roll > animTable[animName][idx].weight) do
				roll = roll - animTable[animName][idx].weight
				idx = idx + 1
			end
	--		print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
			local anim = animTable[animName][idx].anim
	
			if (toolAnimInstance ~= anim) then
				
				if (toolAnimTrack ~= nil) then
					toolAnimTrack:Stop()
					toolAnimTrack:Destroy()
					transitionTime = 0
				end
						
				-- load it to the humanoid; get AnimationTrack
				toolAnimTrack = humanoid:LoadAnimation(anim)
				if priority then
					toolAnimTrack.Priority = priority
				end
				 
				-- play the animation
				toolAnimTrack:Play(transitionTime)
				toolAnimName = animName
				toolAnimInstance = anim
	
				currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
			end
	end
	
	function stopToolAnimations()
		local oldAnim = toolAnimName
	
		if (currentToolAnimKeyframeHandler ~= nil) then
			currentToolAnimKeyframeHandler:disconnect()
		end
	
		toolAnimName = ""
		toolAnimInstance = nil
		if (toolAnimTrack ~= nil) then
			toolAnimTrack:Stop()
			toolAnimTrack:Destroy()
			toolAnimTrack = nil
		end
	
	
		return oldAnim
	end
	
	-------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------
	
	
	function onRunning(speed)
		if speed > 0.01 then
			playAnimation("walk", 0.1, Humanoid)
			if currentAnimInstance and currentAnimInstance.AnimationId == "http://www.roblox.com/asset/?id=180426354" then
				setAnimationSpeed(speed / 14.5)
			end
			pose = "Running"
		else
			if emoteNames[currentAnim] == nil then
				playAnimation("idle", 0.1, Humanoid)
				pose = "Standing"
			end
		end
	end
	
	function onDied()
		pose = "Dead"
	end
	
	function onJumping()
		playAnimation("jump", 0.1, Humanoid)
		jumpAnimTime = jumpAnimDuration
		pose = "Jumping"
	end
	
	function onClimbing(speed)
		playAnimation("climb", 0.1, Humanoid)
		setAnimationSpeed(speed / 12.0)
		pose = "Climbing"
	end
	
	function onGettingUp()
		pose = "GettingUp"
	end
	
	function onFreeFall()
		if (jumpAnimTime <= 0) then
			playAnimation("fall", fallTransitionTime, Humanoid)
		end
		pose = "FreeFall"
	end
	
	function onFallingDown()
		pose = "FallingDown"
	end
	
	function onSeated()
		pose = "Seated"
	end
	
	function onPlatformStanding()
		pose = "PlatformStanding"
	end
	
	function onSwimming(speed)
		if speed > 0 then
			pose = "Running"
		else
			pose = "Standing"
		end
	end
	
	function getTool()	
		for _, kid in ipairs(Figure:GetChildren()) do
			if kid.className == "Tool" then return kid end
		end
		return nil
	end
	
	function getToolAnim(tool)
		for _, c in ipairs(tool:GetChildren()) do
			if c.Name == "toolanim" and c.className == "StringValue" then
				return c
			end
		end
		return nil
	end
	
	function animateTool()
		
		if (toolAnim == "None") then
			playToolAnimation("toolnone", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
			return
		end
	
		if (toolAnim == "Slash") then
			playToolAnimation("toolslash", 0, Humanoid, Enum.AnimationPriority.Action)
			return
		end
	
		if (toolAnim == "Lunge") then
			playToolAnimation("toollunge", 0, Humanoid, Enum.AnimationPriority.Action)
			return
		end
	end
	
	function moveSit()
		RightShoulder.MaxVelocity = 0.15
		LeftShoulder.MaxVelocity = 0.15
		RightShoulder:SetDesiredAngle(3.14 /2)
		LeftShoulder:SetDesiredAngle(-3.14 /2)
		RightHip:SetDesiredAngle(3.14 /2)
		LeftHip:SetDesiredAngle(-3.14 /2)
	end
	
	local lastTick = 0
	
	function move(time)
		local amplitude = 1
		local frequency = 1
	  	local deltaTime = time - lastTick
	  	lastTick = time
	
		local climbFudge = 0
		local setAngles = false
	
	  	if (jumpAnimTime > 0) then
	  		jumpAnimTime = jumpAnimTime - deltaTime
	  	end
	
		if (pose == "FreeFall" and jumpAnimTime <= 0) then
			playAnimation("fall", fallTransitionTime, Humanoid)
		elseif (pose == "Seated") then
			playAnimation("sit", 0.5, Humanoid)
			return
		elseif (pose == "Running") then
			playAnimation("walk", 0.1, Humanoid)
		elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
	--		print("Wha " .. pose)
			stopAllAnimations()
			amplitude = 0.1
			frequency = 1
			setAngles = true
		end
	
		if (setAngles) then
			local desiredAngle = amplitude * math.sin(time * frequency)
	
			RightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
			LeftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
			RightHip:SetDesiredAngle(-desiredAngle)
			LeftHip:SetDesiredAngle(-desiredAngle)
		end
	
		-- Tool Animation handling
		local tool = getTool()
		if tool and tool:FindFirstChild("Handle") then
		
			local animStringValueObject = getToolAnim(tool)
	
			if animStringValueObject then
				toolAnim = animStringValueObject.Value
				-- message recieved, delete StringValue
				animStringValueObject.Parent = nil
				toolAnimTime = time + .3
			end
	
			if time > toolAnimTime then
				toolAnimTime = 0
				toolAnim = "None"
			end
	
			animateTool()		
		else
			stopToolAnimations()
			toolAnim = "None"
			toolAnimInstance = nil
			toolAnimTime = 0
		end
	end
	
	-- connect events
	Humanoid.Died:connect(onDied)
	Humanoid.Running:connect(onRunning)
	Humanoid.Jumping:connect(onJumping)
	Humanoid.Climbing:connect(onClimbing)
	Humanoid.GettingUp:connect(onGettingUp)
	Humanoid.FreeFalling:connect(onFreeFall)
	Humanoid.FallingDown:connect(onFallingDown)
	Humanoid.Seated:connect(onSeated)
	Humanoid.PlatformStanding:connect(onPlatformStanding)
	Humanoid.Swimming:connect(onSwimming)
	
	-- setup emote chat hook
	game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
		local emote = ""
		if msg == "/e dance" then
			emote = dances[math.random(1, #dances)]
		elseif (string.sub(msg, 1, 3) == "/e ") then
			emote = string.sub(msg, 4)
		elseif (string.sub(msg, 1, 7) == "/emote ") then
			emote = string.sub(msg, 8)
		end
		
		if (pose == "Standing" and emoteNames[emote] ~= nil) then
			playAnimation(emote, 0.1, Humanoid)
		end
	
	end)
	
	
	-- main program
	
	-- initialize to idle
	playAnimation("idle", 0.1, Humanoid)
	pose = "Standing"
	
	while Figure.Parent ~= nil do
		local _, time = wait(0.1)
		move(time)
	end
	
	
	
end;
task.spawn(C_24);
-- StarterGui.Exoliner.Main.Execute.R6. .Humanoid.Jump
local function C_41()
local script = G2L["41"];
	local Mouse = game.Players.LocalPlayer:GetMouse()
	Mouse.KeyDown:connect(function(Key)
	if Key == " " then
	local Active = true
	local Connection = Mouse.KeyUp:connect(function(Key)
	if Key == " " then
	Active = false
	end
	end)
	
	while Active do
	script.Parent.Jump = true
	wait()
	end
	Connection:Disconnect()
	end
	end)
end;
task.spawn(C_41);
-- StarterGui.Exoliner.Main.HideCodeBox.RippleEffect.RippleClick
local function C_7e()
local script = G2L["7e"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
	local Hiding = false
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
end;
task.spawn(C_7e);
-- StarterGui.Exoliner.Main.HideCodeBox.LocalScript
local function C_7f()
local script = G2L["7f"];
	local code = script.Parent.Parent.Scroll.CodeBox
	local hide = code.Hide
	
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Tick.Visible = not script.Parent.Tick.Visible
		if script.Parent.Tick.Visible == true then
			repeat
				hide.BackgroundTransparency = hide.BackgroundTransparency - 0.1 wait(1/60)
			until hide.BackgroundTransparency == 0
		elseif script.Parent.Tick.Visible == false then
			hide.HideText.Text = ""
			repeat
				hide.BackgroundTransparency = hide.BackgroundTransparency + 0.1 wait()
			until hide.BackgroundTransparency == 1
		end
	end)
	
	hide:GetPropertyChangedSignal("BackgroundTransparency"):Connect(function()
		if hide.BackgroundTransparency < 0 then
			hide.BackgroundTransparency = 0
			local length = string.len(code.Text)
			for i = 1,length do
				hide.HideText.Text = hide.HideText.Text .. "*"
			end
		elseif hide.BackgroundTransparency > 1 then
			hide.BackgroundTransparency = 1
			hide.HideText.Text = ""
		end
	end)
	
	code:GetPropertyChangedSignal("Text"):Connect(function()
		if hide.BackgroundTransparency == 0 then
			hide.HideText.Text = ""
			local length = string.len(code.Text)
			for i = 1,length do
				hide.HideText.Text = hide.HideText.Text .. "*"
			end
		end
	end)
end;
task.spawn(C_7f);
-- StarterGui.Exoliner.Main.Clear.LocalScript
local function C_83()
local script = G2L["83"];
	local Code = script.Parent.Parent.Scroll.CodeBox
	local Close = script.Parent
	local player = game.Players.localPlayer
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		for i = 1,10 do
	Code.TextTransparency = Code.TextTransparency + 0.1
	wait()
	end
	Code.TextTransparency = 0
	Code.Text = ''
	end)
end;
task.spawn(C_83);
-- StarterGui.Exoliner.Main.Clear.RippleEffect.RippleClick
local function C_8a()
local script = G2L["8a"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_8a);
-- StarterGui.Exoliner.Main.Scripts.LocalScript
local function C_8c()
local script = G2L["8c"];
	local Close = script.Parent
	local player = game.Players.localPlayer
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Scripts:TweenPosition(UDim2.new(0.022, 0, 0, 550), 'Out', 'Quad', 0.4)
		script.Parent.Visible = false
		script.Parent.Parent.ScriptsClose.Visible = true
	end)
	
end;
task.spawn(C_8c);
-- StarterGui.Exoliner.Main.Scripts.RippleEffect.RippleClick
local function C_93()
local script = G2L["93"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_93);
-- StarterGui.Exoliner.Main.ScriptsClose.LocalScript
local function C_95()
local script = G2L["95"];
	local Close = script.Parent
	local player = game.Players.localPlayer
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Scripts:TweenPosition(UDim2.new(0.022, 0, 1, 0), 'Out', 'Quad', 0.4)
		script.Parent.Visible = false
		script.Parent.Parent.Scripts.Visible = true
	end)
	
end;
task.spawn(C_95);
-- StarterGui.Exoliner.Main.ScriptsClose.RippleEffect.RippleClick
local function C_9c()
local script = G2L["9c"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_9c);
-- StarterGui.Exoliner.Main.Scroll.CodeBox.Auto Indent
local function C_a8()
local script = G2L["a8"];
	local Code = script.Parent
	
	function onKeyPress(inputObject, gameProcessedEvent)
		local len = Code.Text:len()
	    if inputObject.KeyCode == Enum.KeyCode.Return and script.Parent:IsFocused() then
			if string.match(Code.Text:sub(len-2), "do") or string.match(Code.Text:sub(len-4), "then") or string.match(Code.Text:sub(len-3), "do ") or string.match(Code.Text:sub(len-5), "then ") or string.match(Code.Text:sub(len-10), "function()") then
				Code.Text = Code.Text .. "    " .. "\nend" 
				script.Parent.CursorPosition = len + 5
			end
		end
	end
	
	
	game:GetService("UserInputService").InputBegan:connect(onKeyPress)
end;
task.spawn(C_a8);
-- StarterGui.Exoliner.Main.Scroll.CodeBox.LocalScript
local function C_a9()
local script = G2L["a9"];
	local code = script.Parent
	local mouse = game.Players.LocalPlayer:GetMouse()
	local icon = script.Parent.Parent.Parent.Parent.Mouse
	
	game:GetService("RunService").RenderStepped:Connect(function()
		icon.Position = UDim2.new(0, mouse.X - 14, 0, mouse.Y - 14)
	end)
end;
task.spawn(C_a9);
-- StarterGui.Exoliner.Main.Scroll.SmoothScroll
local function C_aa()
local script = G2L["aa"];
	
	
	local SynapseXen_IIiIlIIIIillIII=select;local SynapseXen_lIliiIIliiIliiI=string.byte;local SynapseXen_llllIilllllI=string.sub;local SynapseXen_liiIiIli=string.char;local SynapseXen_IlIlil=type;local SynapseXen_ilIIlIliIiIii=table.concat;local unpack=unpack;local setmetatable=setmetatable;local pcall=pcall;local SynapseXen_ilIIlI,SynapseXen_IIIlliIIl,SynapseXen_IllIii,SynapseXen_liilI;if bit and bit.bxor then SynapseXen_ilIIlI=bit.bxor;SynapseXen_IIIlliIIl=function(SynapseXen_liIIillil,SynapseXen_ilIlilllllilil)local SynapseXen_lIlillIl=SynapseXen_ilIIlI(SynapseXen_liIIillil,SynapseXen_ilIlilllllilil)if SynapseXen_lIlillIl<0 then SynapseXen_lIlillIl=4294967296+SynapseXen_lIlillIl end;return SynapseXen_lIlillIl end else SynapseXen_ilIIlI=function(SynapseXen_liIIillil,SynapseXen_ilIlilllllilil)local SynapseXen_IlllIiIIililllIliilI=function(SynapseXen_IIIiiillillIli,SynapseXen_iIliiliIIl)return SynapseXen_IIIiiillillIli%(SynapseXen_iIliiliIIl*2)>=SynapseXen_iIliiliIIl end;local SynapseXen_illIiil=0;for SynapseXen_IillIIlIII=0,31 do SynapseXen_illIiil=SynapseXen_illIiil+(SynapseXen_IlllIiIIililllIliilI(SynapseXen_liIIillil,2^SynapseXen_IillIIlIII)~=SynapseXen_IlllIiIIililllIliilI(SynapseXen_ilIlilllllilil,2^SynapseXen_IillIIlIII)and 2^SynapseXen_IillIIlIII or 0)end;return SynapseXen_illIiil end;SynapseXen_IIIlliIIl=SynapseXen_ilIIlI end;SynapseXen_IllIii=function(SynapseXen_iIllIiliI,SynapseXen_IililliiI,SynapseXen_liliiii)return(SynapseXen_iIllIiliI+SynapseXen_IililliiI)%SynapseXen_liliiii end;SynapseXen_liilI=function(SynapseXen_iIllIiliI,SynapseXen_IililliiI,SynapseXen_liliiii)return(SynapseXen_iIllIiliI-SynapseXen_IililliiI)%SynapseXen_liliiii end;local function SynapseXen_IillIil(SynapseXen_lIlillIl)if SynapseXen_lIlillIl<0 then SynapseXen_lIlillIl=4294967296+SynapseXen_lIlillIl end;return SynapseXen_lIlillIl end;local getfenv=getfenv;if not getfenv then getfenv=function()return _ENV end end;local SynapseXen_lIilIlIi={}local SynapseXen_liIliIllliiiI={}local SynapseXen_IiIIiIIlI;local SynapseXen_iiiliil;local SynapseXen_ililI={}local SynapseXen_iilliliIlli={}for SynapseXen_IillIIlIII=0,255 do local SynapseXen_IlIIliI,SynapseXen_iiiillillilllll=SynapseXen_liiIiIli(SynapseXen_IillIIlIII),SynapseXen_liiIiIli(SynapseXen_IillIIlIII,0)SynapseXen_ililI[SynapseXen_IlIIliI]=SynapseXen_iiiillillilllll;SynapseXen_iilliliIlli[SynapseXen_iiiillillilllll]=SynapseXen_IlIIliI end;local function SynapseXen_IIlil(SynapseXen_IilIiIliiiilII,SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil)if SynapseXen_illllliIillili>=256 then SynapseXen_illllliIillili,SynapseXen_llillillIIliIil=0,SynapseXen_llillillIIliIil+1;if SynapseXen_llillillIIliIil>=256 then SynapseXen_liiiIiIilIlIlIIl={}SynapseXen_llillillIIliIil=1 end end;SynapseXen_liiiIiIilIlIlIIl[SynapseXen_liiIiIli(SynapseXen_illllliIillili,SynapseXen_llillillIIliIil)]=SynapseXen_IilIiIliiiilII;SynapseXen_illllliIillili=SynapseXen_illllliIillili+1;return SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil end;local function SynapseXen_iIIiiiiiilIiliiIIiI(SynapseXen_iIillIliilliiiIi)local function SynapseXen_liIililiIIlil(SynapseXen_IiiiIi)local SynapseXen_llillillIIliIil='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'SynapseXen_IiiiIi=string.gsub(SynapseXen_IiiiIi,'[^'..SynapseXen_llillillIIliIil..'=]','')return SynapseXen_IiiiIi:gsub('.',function(SynapseXen_iIllIiliI)if SynapseXen_iIllIiliI=='='then return''end;local SynapseXen_ilIiiIliIlilililIIl,SynapseXen_iiIlIiIIililIIII='',SynapseXen_llillillIIliIil:find(SynapseXen_iIllIiliI)-1;for SynapseXen_IillIIlIII=6,1,-1 do SynapseXen_ilIiiIliIlilililIIl=SynapseXen_ilIiiIliIlilililIIl..(SynapseXen_iiIlIiIIililIIII%2^SynapseXen_IillIIlIII-SynapseXen_iiIlIiIIililIIII%2^(SynapseXen_IillIIlIII-1)>0 and'1'or'0')end;return SynapseXen_ilIiiIliIlilililIIl end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(SynapseXen_iIllIiliI)if#SynapseXen_iIllIiliI~=8 then return''end;local SynapseXen_iIiIilliliIiI=0;for SynapseXen_IillIIlIII=1,8 do SynapseXen_iIiIilliliIiI=SynapseXen_iIiIilliliIiI+(SynapseXen_iIllIiliI:sub(SynapseXen_IillIIlIII,SynapseXen_IillIIlIII)=='1'and 2^(8-SynapseXen_IillIIlIII)or 0)end;return string.char(SynapseXen_iIiIilliliIiI)end)end;SynapseXen_iIillIliilliiiIi=SynapseXen_liIililiIIlil(SynapseXen_iIillIliilliiiIi)local SynapseXen_IIlIlllllIl=SynapseXen_llllIilllllI(SynapseXen_iIillIliilliiiIi,1,1)if SynapseXen_IIlIlllllIl=="u"then return SynapseXen_llllIilllllI(SynapseXen_iIillIliilliiiIi,2)elseif SynapseXen_IIlIlllllIl~="c"then error("Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")end;SynapseXen_iIillIliilliiiIi=SynapseXen_llllIilllllI(SynapseXen_iIillIliilliiiIi,2)local SynapseXen_IIIliiillIliiiilI=#SynapseXen_iIillIliilliiiIi;local SynapseXen_liiiIiIilIlIlIIl={}local SynapseXen_illllliIillili,SynapseXen_llillillIIliIil=0,1;local SynapseXen_IIIlIlIlII={}local SynapseXen_lIlillIl=1;local SynapseXen_IlIliIlIlllIIlIi=SynapseXen_llllIilllllI(SynapseXen_iIillIliilliiiIi,1,2)SynapseXen_IIIlIlIlII[SynapseXen_lIlillIl]=SynapseXen_iilliliIlli[SynapseXen_IlIliIlIlllIIlIi]or SynapseXen_liiiIiIilIlIlIIl[SynapseXen_IlIliIlIlllIIlIi]SynapseXen_lIlillIl=SynapseXen_lIlillIl+1;for SynapseXen_IillIIlIII=3,SynapseXen_IIIliiillIliiiilI,2 do local SynapseXen_iilIIIiiiIiiilillI=SynapseXen_llllIilllllI(SynapseXen_iIillIliilliiiIi,SynapseXen_IillIIlIII,SynapseXen_IillIIlIII+1)local SynapseXen_iIIilIIIiliillIlIlll=SynapseXen_iilliliIlli[SynapseXen_IlIliIlIlllIIlIi]or SynapseXen_liiiIiIilIlIlIIl[SynapseXen_IlIliIlIlllIIlIi]if not SynapseXen_iIIilIIIiliillIlIlll then error("Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")end;local SynapseXen_IIIiIliIIilIlIliI=SynapseXen_iilliliIlli[SynapseXen_iilIIIiiiIiiilillI]or SynapseXen_liiiIiIilIlIlIIl[SynapseXen_iilIIIiiiIiiilillI]if SynapseXen_IIIiIliIIilIlIliI then SynapseXen_IIIlIlIlII[SynapseXen_lIlillIl]=SynapseXen_IIIiIliIIilIlIliI;SynapseXen_lIlillIl=SynapseXen_lIlillIl+1;SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil=SynapseXen_IIlil(SynapseXen_iIIilIIIiliillIlIlll..SynapseXen_llllIilllllI(SynapseXen_IIIiIliIIilIlIliI,1,1),SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil)else local SynapseXen_IlIiIliiI=SynapseXen_iIIilIIIiliillIlIlll..SynapseXen_llllIilllllI(SynapseXen_iIIilIIIiliillIlIlll,1,1)SynapseXen_IIIlIlIlII[SynapseXen_lIlillIl]=SynapseXen_IlIiIliiI;SynapseXen_lIlillIl=SynapseXen_lIlillIl+1;SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil=SynapseXen_IIlil(SynapseXen_IlIiIliiI,SynapseXen_liiiIiIilIlIlIIl,SynapseXen_illllliIillili,SynapseXen_llillillIIliIil)end;SynapseXen_IlIliIlIlllIIlIi=SynapseXen_iilIIIiiiIiiilillI end;return SynapseXen_ilIIlIliIiIii(SynapseXen_IIIlIlIlII)end;local function SynapseXen_lllIIli(SynapseXen_lIiIIiIllIIIiilil,SynapseXen_IiiIIlIiiIiIIiii,SynapseXen_iIIlliIiIliiilIll)if SynapseXen_iIIlliIiIliiilIll then local SynapseXen_IllIli=SynapseXen_lIiIIiIllIIIiilil/2^(SynapseXen_IiiIIlIiiIiIIiii-
1)%2^(SynapseXen_iIIlliIiIliiilIll-1-(SynapseXen_IiiIIlIiiIiIIiii-1)+1)return SynapseXen_IllIli-SynapseXen_IllIli%1 else local SynapseXen_iiIIIiIiIIlIIII=2^(SynapseXen_IiiIIlIiiIiIIiii-1)if SynapseXen_lIiIIiIllIIIiilil%(SynapseXen_iiIIIiIiIIlIIII+SynapseXen_iiIIIiIiIIlIIII)>=SynapseXen_iiIIIiIiIIlIIII then return 1 else return 0 end end end;local function SynapseXen_ilililillliliIIilil()local SynapseXen_lllIlIIIII=SynapseXen_ilIIlI(1675973450,SynapseXen_liIliIllliiiI[4])while true do if SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(308439371,SynapseXen_liIliIllliiiI[4])then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii-24750,SynapseXen_iIIIiIIiiII+22952)+SynapseXen_ilIIlI(2998749487,SynapseXen_liIliIllliiiI[2])end;SynapseXen_lllIlIIIII=SynapseXen_ilIIlI(SynapseXen_lllIlIIIII,SynapseXen_ilIIlI(2322019102,SynapseXen_liIliIllliiiI[6]))elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(2343488739,SynapseXen_liIliIllliiiI[6])then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii+19273,SynapseXen_iIIIiIIiiII-3385)-SynapseXen_ilIIlI(3569575121,SynapseXen_liIliIllliiiI[6])end;SynapseXen_lllIlIIIII=SynapseXen_lllIlIIIII-SynapseXen_ilIIlI(2998755206,SynapseXen_liIliIllliiiI[2])elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(2476284508,SynapseXen_iiiliil)then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii-31368,SynapseXen_iIIIiIIiiII-20473)-SynapseXen_ilIIlI(3438588892,SynapseXen_iiiliil)end;SynapseXen_lllIlIIIII=SynapseXen_lllIlIIIII+SynapseXen_ilIIlI(3438566473,SynapseXen_iiiliil)elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(2476309252,SynapseXen_iiiliil)then return elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(2476300079,SynapseXen_iiiliil)then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii+15053,SynapseXen_iIIIiIIiiII-10708)-SynapseXen_ilIIlI(3462394458,SynapseXen_liIliIllliiiI[7])end;SynapseXen_lllIlIIIII=SynapseXen_lllIlIIIII-SynapseXen_ilIIlI(3438557465,SynapseXen_iiiliil)elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(3274407918,SynapseXen_liIliIllliiiI[5])then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii-7011,SynapseXen_iIIIiIIiiII-23047)+SynapseXen_ilIIlI(3438546109,SynapseXen_iiiliil)end;SynapseXen_lllIlIIIII=SynapseXen_lllIlIIIII-SynapseXen_ilIIlI(3438543864,SynapseXen_iiiliil)elseif SynapseXen_lllIlIIIII==SynapseXen_ilIIlI(3166357149,SynapseXen_iiiliil)then SynapseXen_IiIIiIIlI=function(SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII)return SynapseXen_ilIIlI(SynapseXen_liilIililiiilillIiii-27683,SynapseXen_iIIIiIIiiII-2774)+SynapseXen_ilIIlI(3438557202,SynapseXen_iiiliil)end;SynapseXen_lllIlIIIII=SynapseXen_ilIIlI(SynapseXen_lllIlIIIII,SynapseXen_ilIIlI(1277604164,SynapseXen_liIliIllliiiI[3]))end end end;local function SynapseXen_IiIIIlIIili(SynapseXen_iiiilIlilIllIl)local SynapseXen_IiilllIlliiIIiilI=1;local SynapseXen_iiliIlIiiIIiIi;local SynapseXen_iIIIllliiiIiIlI;local function SynapseXen_iIiiiiIiIIii()local SynapseXen_IiIiiIllili=SynapseXen_lIliiIIliiIliiI(SynapseXen_iiiilIlilIllIl,SynapseXen_IiilllIlliiIIiilI,SynapseXen_IiilllIlliiIIiilI)SynapseXen_IiilllIlliiIIiilI=SynapseXen_IiilllIlliiIIiilI+1;return SynapseXen_IiIiiIllili end;local function SynapseXen_IilIlilil()local SynapseXen_Iilill,SynapseXen_liilIililiiilillIiii,SynapseXen_iIIIiIIiiII,SynapseXen_lIiIlillIlIlllliil=SynapseXen_lIliiIIliiIliiI(SynapseXen_iiiilIlilIllIl,SynapseXen_IiilllIlliiIIiilI,SynapseXen_IiilllIlliiIIiilI+3)SynapseXen_IiilllIlliiIIiilI=SynapseXen_IiilllIlliiIIiilI+4;return SynapseXen_lIiIlillIlIlllliil*16777216+SynapseXen_iIIIiIIiiII*65536+SynapseXen_liilIililiiilillIiii*256+SynapseXen_Iilill end;local function SynapseXen_liilIlIllliiIiiIIIl()return SynapseXen_IilIlilil()*4294967296+SynapseXen_IilIlilil()end;local function SynapseXen_lilillii()local SynapseXen_ililliiiIl=SynapseXen_IIIlliIIl(SynapseXen_IilIlilil(),SynapseXen_lIilIlIi[3152719150]or(function()local SynapseXen_iIllIiliI="sometimes it be like that"SynapseXen_lIilIlIi[3152719150]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(4265572092,123011848),SynapseXen_ilIIlI(3045809410,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1134095229,840851864}return SynapseXen_lIilIlIi[3152719150]end)())local SynapseXen_iiIIlIiliiiilIIlIIl=SynapseXen_IIIlliIIl(SynapseXen_IilIlilil(),SynapseXen_lIilIlIi[1777596843]or(function(...)local SynapseXen_iIllIiliI="now comes with a free n word pass"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1849658495,633611208)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3519407161,3519415390)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1777596843]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(746379889,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(869250565,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{479381792,1976857287}return SynapseXen_lIilIlIi[1777596843]end)({},9449,{},"lIllIiliIlllIIlllIl",2744,{}))local SynapseXen_IililililiiIIili=1;local SynapseXen_liiIIIIiiliiIIlI=SynapseXen_lllIIli(SynapseXen_iiIIlIiliiiilIIlIIl,1,20)*2^32+SynapseXen_ililliiiIl;local SynapseXen_ililIililiiiiIlIlII=SynapseXen_lllIIli(SynapseXen_iiIIlIiliiiilIIlIIl,21,31)local SynapseXen_IIillliiIIIlIill=(-1)^SynapseXen_lllIIli(SynapseXen_iiIIlIiliiiilIIlIIl,32)if SynapseXen_ililIililiiiiIlIlII==0 then if SynapseXen_liiIIIIiiliiIIlI==0 then return SynapseXen_IIillliiIIIlIill*0 else SynapseXen_ililIililiiiiIlIlII=1;SynapseXen_IililililiiIIili=0 end elseif SynapseXen_ililIililiiiiIlIlII==2047 then if SynapseXen_liiIIIIiiliiIIlI==0 then return SynapseXen_IIillliiIIIlIill*1/0 else return SynapseXen_IIillliiIIIlIill*0/0 end end;return math.ldexp(SynapseXen_IIillliiIIIlIill,SynapseXen_ililIililiiiiIlIlII-1023)*(SynapseXen_IililililiiIIili+SynapseXen_liiIIIIiiliiIIlI/2^52)end;local function SynapseXen_lilliIili(SynapseXen_lIlllII)local SynapseXen_liIIIlilIIlliiIlli;if SynapseXen_lIlllII then SynapseXen_liIIIlilIIlliiIlli=SynapseXen_llllIilllllI(SynapseXen_iiiilIlilIllIl,SynapseXen_IiilllIlliiIIiilI,SynapseXen_IiilllIlliiIIiilI+SynapseXen_lIlllII-1)SynapseXen_IiilllIlliiIIiilI=SynapseXen_IiilllIlliiIIiilI+SynapseXen_lIlllII else SynapseXen_lIlllII=SynapseXen_iiliIlIiiIIiIi()if SynapseXen_lIlllII==0 then return""end;SynapseXen_liIIIlilIIlliiIlli=SynapseXen_llllIilllllI(SynapseXen_iiiilIlilIllIl,SynapseXen_IiilllIlliiIIiilI,SynapseXen_IiilllIlliiIIiilI+SynapseXen_lIlllII-1)SynapseXen_IiilllIlliiIIiilI=SynapseXen_IiilllIlliiIIiilI+SynapseXen_lIlllII end;return SynapseXen_liIIIlilIIlliiIlli end;local function SynapseXen_IIIIIIIliI(SynapseXen_liIIIlilIIlliiIlli)local SynapseXen_IllIli={}for SynapseXen_IillIIlIII=1,#SynapseXen_liIIIlilIIlliiIlli do local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liIIIlilIIlliiIlli:sub(SynapseXen_IillIIlIII,SynapseXen_IillIIlIII)SynapseXen_IllIli[#SynapseXen_IllIli+1]=string.char(SynapseXen_ilIIlI(string.byte(SynapseXen_iIIIIIiIIIIiiIlIiilI),SynapseXen_lIilIlIi[2340810901]or(function(...)local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2333798573,3579299931)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1478238985,1478192285)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2340810901]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2388148368,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3988101234,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{1354435877,2247422748,1521264785,3818757355}return SynapseXen_lIilIlIi[2340810901]end)({},{},{},"IIilIlIIiI")))end;return table.concat(SynapseXen_IllIli)end;local function SynapseXen_iIIllIilllIIIllIlI()local SynapseXen_lIlliIllllllIilIilIl={}local SynapseXen_IlIIlIlilliIi={}local SynapseXen_IIilIiiIlliiIllI={}local SynapseXen_illlIllilI={[SynapseXen_lIilIlIi[1491676384]or(function()local SynapseXen_iIllIiliI="print(bytecode)"SynapseXen_lIilIlIi[1491676384]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(447064527,3074204890),SynapseXen_ilIIlI(1359181002,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1643322901,1805387670,1730450716,3071042128,2967331865,2442311653,2992749481,2355745158,258454967,820981398}return SynapseXen_lIilIlIi[1491676384]end)()]=SynapseXen_IIilIiiIlliiIllI,[SynapseXen_lIilIlIi[3285798547]or(function(...)local SynapseXen_iIllIiliI="hi xen doesn't work on sk8r please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4270743799,3405347562)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2906189401,2906186809)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3285798547]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2799803014,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(409348291,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3924804998,465388588,3852678122,1071332839}return SynapseXen_lIilIlIi[3285798547]end)(4585)]=SynapseXen_lIlliIllllllIilIilIl,[SynapseXen_lIilIlIi[2056285739]or(function(...)local SynapseXen_iIllIiliI="inb4 posted on exploit reports section"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3641286505,308123952)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(837622416,837602321)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2056285739]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3188444188,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4189689434,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{2370958103,13901070,313196297,4106868790,3867539750,1299717299,1143639866,3428799817}return SynapseXen_lIilIlIi[2056285739]end)({})]=SynapseXen_IlIIlIlilliIi}SynapseXen_IilIlilil()for SynapseXen_liIliIil=1,SynapseXen_ilIIlI(SynapseXen_iIIIllliiiIiIlI(),SynapseXen_lIilIlIi[3754856832]or(function()local SynapseXen_iIllIiliI="xen detects custom getfenv"SynapseXen_lIilIlIi[3754856832]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(356054330,4055247324),SynapseXen_ilIIlI(2787829390,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{2548252365,4220445115}return SynapseXen_lIilIlIi[3754856832]end)())do SynapseXen_IilIlilil()local SynapseXen_lIiiIllilIliIi=SynapseXen_ilIIlI(SynapseXen_IilIlilil(),SynapseXen_lIilIlIi[1375069013]or(function()local SynapseXen_iIllIiliI="luraph better then xen bros :pensive:"SynapseXen_lIilIlIi[1375069013]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1148856008,2008817327),SynapseXen_ilIIlI(581325153,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{1438419185,4081569952,2814754640,58004319,3409209554}return SynapseXen_lIilIlIi[1375069013]end)())local SynapseXen_lIilIllilllllIiliilI=SynapseXen_iIiiiiIiIIii()local SynapseXen_IlIlil=SynapseXen_iIiiiiIiIIii()local SynapseXen_IliiIlillIiilIIil={[411212599]=SynapseXen_lIiiIllilIliIi,[1932309130]=SynapseXen_lIilIllilllllIiliilI,[60687034]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,1,6),[1828236373]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,7,14)}if SynapseXen_IlIlil==(SynapseXen_lIilIlIi[2206553186]or(function(...)local SynapseXen_iIllIiliI="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4193061227,754272441)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2731195087,2731209189)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2206553186]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(461165429,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4090142125,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{1746344122}return SynapseXen_lIilIlIi[2206553186]end)("lIiilllIil","illlIlI"))then SynapseXen_IliiIlillIiilIIil[1636267603]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,24,32)SynapseXen_IliiIlillIiilIIil[1052285014]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,15,23)elseif SynapseXen_IlIlil==(SynapseXen_lIilIlIi[628124345]or(function()local SynapseXen_iIllIiliI="epic gamer vision"SynapseXen_lIilIlIi[628124345]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(327485904,1335703017),SynapseXen_ilIIlI(1280540469,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{1901341352,3626233745,2377993078,1327267470}return SynapseXen_lIilIlIi[628124345]end)())then SynapseXen_IliiIlillIiilIIil[766990751]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,15,32)elseif SynapseXen_IlIlil==(SynapseXen_lIilIlIi[3339189493]or(function()local SynapseXen_iIllIiliI="yed"SynapseXen_lIilIlIi[3339189493]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2061082824,2041267752),SynapseXen_ilIIlI(3481738389,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1843812434,3809390660}return SynapseXen_lIilIlIi[3339189493]end)())then SynapseXen_IliiIlillIiilIIil[20078946]=SynapseXen_lllIIli(SynapseXen_lIiiIllilIliIi,15,32)-131071 end;SynapseXen_lIlliIllllllIilIilIl[SynapseXen_liIliIil]=SynapseXen_IliiIlillIiilIIil end;SynapseXen_IilIlilil()SynapseXen_IilIlilil()SynapseXen_IilIlilil()SynapseXen_illlIllilI[421261155]=SynapseXen_ilIIlI(SynapseXen_iIiiiiIiIIii(),SynapseXen_lIilIlIi[3194214586]or(function()local SynapseXen_iIllIiliI="aspect network better obfuscator"SynapseXen_lIilIlIi[3194214586]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2083936286,4280874898),SynapseXen_ilIIlI(1340656425,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1232918443,1055179441,3175323842,3059090973,2599024068,696206109,1813720563}return SynapseXen_lIilIlIi[3194214586]end)())SynapseXen_IilIlilil()SynapseXen_IilIlilil()SynapseXen_illlIllilI[193536485]=SynapseXen_ilIIlI(SynapseXen_iIiiiiIiIIii(),SynapseXen_lIilIlIi[844962998]or(function(...)local SynapseXen_iIllIiliI="double-header fair! this rationalization has a overenthusiastically anticheat! you will get nonpermissible for exploiting!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3625484009,3643812009)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1515002388,1514960056)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[844962998]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3969352322,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(559206565,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1673715069,3358442819,2067893888,1174195452}return SynapseXen_lIilIlIi[844962998]end)(9689))SynapseXen_IilIlilil()SynapseXen_iIiiiiIiIIii()for SynapseXen_liIliIil=1,SynapseXen_ilIIlI(SynapseXen_iIIIllliiiIiIlI(),SynapseXen_lIilIlIi[4254017989]or(function(...)local SynapseXen_iIllIiliI="hi devforum"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(708393286,2482043624)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(4289313303,4289345958)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4254017989]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1628074747,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3695319671,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3795867323,2280453397}return SynapseXen_lIilIlIi[4254017989]end)({},"iIlIIliiii",{},11408,8605,"ll",3414))do local SynapseXen_IlIlil=SynapseXen_iIiiiiIiIIii()SynapseXen_IilIlilil()local SynapseXen_illIillIIlIllIII;if SynapseXen_IlIlil==(SynapseXen_lIilIlIi[2355609018]or(function(...)local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2096616907,3572252471)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3663458453,3663455486)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2355609018]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2178626243,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(342237849,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{112048678,623661327}return SynapseXen_lIilIlIi[2355609018]end)("iiliIllIililIil","IillII",{},"lIIiIll","IIl",11514,"ilIillIilIliiill",14439))then SynapseXen_illIillIIlIllIII=SynapseXen_iIiiiiIiIIii()~=0 elseif SynapseXen_IlIlil==(SynapseXen_lIilIlIi[2047846916]or(function()local SynapseXen_iIllIiliI="wow xen is shit buy luraph ok"SynapseXen_lIilIlIi[2047846916]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2562270119,2204530677),SynapseXen_ilIIlI(3582076644,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{3190333646,1111209162,126995022,2776908016,595649207,277668940,2450466905,1425621403,1527717977,826277366}return SynapseXen_lIilIlIi[2047846916]end)())then SynapseXen_illIillIIlIllIII=SynapseXen_lilillii()elseif SynapseXen_IlIlil==(SynapseXen_lIilIlIi[3105412035]or(function(...)local SynapseXen_iIllIiliI="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(649547947,1050667884)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3706799938,3706738709)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3105412035]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(4010691030,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(602227542,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{2765674099,3405628286,3697924874,2861764589,763536937,1085844866,2547844899}return SynapseXen_lIilIlIi[3105412035]end)(10528,"IllliIiiI",{}))then SynapseXen_illIillIIlIllIII=SynapseXen_llllIilllllI(SynapseXen_IIIIIIIliI(SynapseXen_lilliIili()),1,-2)end;SynapseXen_IlIIlIlilliIi[SynapseXen_liIliIil-1]=SynapseXen_illIillIIlIllIII end;SynapseXen_iIiiiiIiIIii()for SynapseXen_liIliIil=1,SynapseXen_ilIIlI(SynapseXen_iIIIllliiiIiIlI(),SynapseXen_lIilIlIi[1505111034]or(function()local SynapseXen_iIllIiliI="hi xen crashes on my axon paste plz help"SynapseXen_lIilIlIi[1505111034]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2149819071,3574962622),SynapseXen_ilIIlI(2473581383,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3964515749}return SynapseXen_lIilIlIi[1505111034]end)())do SynapseXen_IIilIiiIlliiIllI[SynapseXen_liIliIil-1]=SynapseXen_iIIllIilllIIIllIlI()end;return SynapseXen_illlIllilI end;do assert(SynapseXen_lilliIili(4)=="\27Xen","Synapse Xen - Failed to verify bytecode. Please make sure your Lua implementation supports non-null terminated strings.")SynapseXen_iIIIllliiiIiIlI=SynapseXen_IilIlilil;SynapseXen_iiliIlIiiIIiIi=SynapseXen_IilIlilil;local SynapseXen_iliIIIilIlliiiiiill=SynapseXen_lilliIili()SynapseXen_iIiiiiIiIIii()SynapseXen_iiiliil=SynapseXen_IillIil(SynapseXen_iIIIllliiiIiIlI())SynapseXen_IilIlilil()local SynapseXen_lilIilll=0;for SynapseXen_IillIIlIII=1,#SynapseXen_iliIIIilIlliiiiiill do local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_iliIIIilIlliiiiiill:sub(SynapseXen_IillIIlIII,SynapseXen_IillIIlIII)SynapseXen_lilIilll=SynapseXen_lilIilll+string.byte(SynapseXen_iIIIIIiIIIIiiIlIiilI)end;SynapseXen_lilIilll=SynapseXen_ilIIlI(SynapseXen_lilIilll,SynapseXen_iiiliil)for SynapseXen_liIliIil=1,SynapseXen_iIiiiiIiIIii()do SynapseXen_liIliIllliiiI[SynapseXen_liIliIil]=SynapseXen_IIIlliIIl(SynapseXen_iIIIllliiiIiIlI(),SynapseXen_lilIilll)end;SynapseXen_ilililillliliIIilil()end;return SynapseXen_iIIllIilllIIIllIlI()end;local function SynapseXen_lIIIIIilIi(...)return SynapseXen_IIiIlIIIIillIII('#',...),{...}end;local function SynapseXen_iiiIililllIiiiIlII(SynapseXen_illlIllilI,SynapseXen_iiiiiillIiiI,SynapseXen_llIilIIIilIiI)local SynapseXen_IlIIlIlilliIi=SynapseXen_illlIllilI[SynapseXen_lIilIlIi[2056285739]or(function(...)local SynapseXen_iIllIiliI="inb4 posted on exploit reports section"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3641286505,308123952)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(837622416,837602321)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2056285739]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3188444188,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4189689434,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{2370958103,13901070,313196297,4106868790,3867539750,1299717299,1143639866,3428799817}return SynapseXen_lIilIlIi[2056285739]end)({})]local SynapseXen_IIilIiiIlliiIllI=SynapseXen_illlIllilI[SynapseXen_lIilIlIi[1491676384]or(function()local SynapseXen_iIllIiliI="print(bytecode)"SynapseXen_lIilIlIi[1491676384]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(447064527,3074204890),SynapseXen_ilIIlI(1359181002,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1643322901,1805387670,1730450716,3071042128,2967331865,2442311653,2992749481,2355745158,258454967,820981398}return SynapseXen_lIilIlIi[1491676384]end)()]local SynapseXen_lIlliIllllllIilIilIl=SynapseXen_illlIllilI[SynapseXen_lIilIlIi[3285798547]or(function(...)local SynapseXen_iIllIiliI="hi xen doesn't work on sk8r please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4270743799,3405347562)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2906189401,2906186809)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3285798547]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2799803014,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(409348291,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3924804998,465388588,3852678122,1071332839}return SynapseXen_lIilIlIi[3285798547]end)(4585)]return function(...)local SynapseXen_iIllIi,SynapseXen_liIIillliIIl=1,-1;local SynapseXen_IilIiiI,SynapseXen_IIiIiliIIIliiIilIlI={},SynapseXen_IIiIlIIIIillIII('#',...)-1;local SynapseXen_iIiIilii=0;local SynapseXen_iiiIlllI={}local SynapseXen_iIIlIiilIIi={}local SynapseXen_lliiiiiil=setmetatable({},{__index=SynapseXen_iiiIlllI,__newindex=function(SynapseXen_IilIiIiII,SynapseXen_IIIIIIIIIiiIiIlilil,SynapseXen_iIlIIIIIiIii)if SynapseXen_IIIIIIIIIiiIiIlilil>SynapseXen_liIIillliIIl then SynapseXen_liIIillliIIl=SynapseXen_IIIIIIIIIiiIiIlilil end;SynapseXen_iiiIlllI[SynapseXen_IIIIIIIIIiiIiIlilil]=SynapseXen_iIlIIIIIiIii end})local function SynapseXen_IIlIliII()local SynapseXen_IliiIlillIiilIIil,SynapseXen_iilIIlliiIlliIIiIlIl;while true do SynapseXen_IliiIlillIiilIIil=SynapseXen_lIlliIllllllIilIilIl[SynapseXen_iIllIi]SynapseXen_iilIIlliiIlliIIiIlIl=SynapseXen_IliiIlillIiilIIil[1932309130]SynapseXen_iIllIi=SynapseXen_iIllIi+1;if SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[4115475597]or(function(...)local SynapseXen_iIllIiliI="can we have an f in chat for ripull"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1844064200,1534428556)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2450268447,2450241826)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4115475597]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1586497928,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2768211658,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3267118781,924183721,2964050627,2102674156,3860074564,1980223452,145966844,2854892226}return SynapseXen_lIilIlIi[4115475597]end)("lilIi",{},3283,"iilIlllIlIiIlIiii",{}))then local SynapseXen_iIIIllIlIIiIIIillil,SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1534928368]or(function(...)local SynapseXen_iIllIiliI="skisploit is the superior obfuscator, clearly."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1526879239,1937453237)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1061424241,1061405490)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1534928368]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2679514729,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2067514723,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1725457848,2780102753,3485336854,3669297956,822211965,3318573898}return SynapseXen_lIilIlIi[1534928368]end)(10253,"illlilllIllIIlIlii",12405,9816,10738,"llIl","lIIIiiliIiII","iiiIiIIiIllI")),SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[61242333]or(function(...)local SynapseXen_iIllIiliI="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(536415888,2982551732)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(933615399,933621628)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[61242333]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3236465212,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2720030917,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1267922867,2946283570,2023556575,2475662490,2118674623,94363796,1355604428,3306812401,2957088387,2179321800}return SynapseXen_lIilIlIi[61242333]end)("ili","i",{},5047,"iIlll",6491,4645,1566),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_IllIii(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2412723737]or(function()local SynapseXen_iIllIiliI="my way to go against expwoiting is to have safety measuwes. i 1 wocawscwipt and onwy moduwes. hewe's how it wowks: this scwipt bewow stowes the moduwes in a tabwe fow each moduwe we send the wist with the moduwes and moduwe infowmation and use inyit a function in my moduwe that wiww stowe the info and aftew it has send to aww the moduwes it wiww dewete them. so whenyevew the cwient twies to hack they cant get the moduwes. onwy this peace of wocawscwipt."SynapseXen_lIilIlIi[2412723737]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(20094751,4030910787),SynapseXen_ilIIlI(1033630878,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{2118395855,1580366982,1584066077,3032718995,1669277783,2871078033}return SynapseXen_lIilIlIi[2412723737]end)()),SynapseXen_iIiIilii,256)][SynapseXen_iIIIllIlIIiIIIillil]=SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2452851849]or(function()local SynapseXen_iIllIiliI="this is so sad, alexa play ripull.mp4"SynapseXen_lIilIlIi[2452851849]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(904362933,151088960),SynapseXen_ilIIlI(748792794,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{3061088500,2609266089,2949543671}return SynapseXen_lIilIlIi[2452851849]end)())then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2435975645]or(function()local SynapseXen_iIllIiliI="wally bad bird"SynapseXen_lIilIlIi[2435975645]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3543679382,3831426021),SynapseXen_ilIIlI(4181152797,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{3196220714,392474375,3964397407}return SynapseXen_lIilIlIi[2435975645]end)(),512),SynapseXen_iIiIilii)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2861122688]or(function()local SynapseXen_iIllIiliI="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"SynapseXen_lIilIlIi[2861122688]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1365712520,1114244778),SynapseXen_ilIIlI(783281110,SynapseXen_liIliIllliiiI[3]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{228740705,323274677,857794490,1526710488,2390444323}return SynapseXen_lIilIlIi[2861122688]end)())local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[27738009]or(function(...)local SynapseXen_iIllIiliI="SYNAPSE XEN [FE BYPASS] [BETTER THEN LURAPH] [AMAZING] OMG OMG OMG !!!!!!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1656519845,4030165947)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1271909629,1271939020)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[27738009]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3686831162,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3574354407,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1904369399,118728124,325265878,1997618593,3275815922,3389172395}return SynapseXen_lIilIlIi[27738009]end)(2791,{},"iiiiIlliIIlllliI",{},{},"IiiiIIlliI"),256)]=SynapseXen_iIIIllIlIIiIIIillil-SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2892523545]or(function()local SynapseXen_iIllIiliI="SECURE API, IMPOSSIBLE TO BYPASS!"SynapseXen_lIilIlIi[2892523545]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2518454800,2636583934),SynapseXen_ilIIlI(412202034,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{3481568992,3418669340,443455045,1481822160,1287436694}return SynapseXen_lIilIlIi[2892523545]end)())then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2385339747]or(function(...)local SynapseXen_iIllIiliI="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3010735392,2157996834)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(224721478,224725760)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2385339747]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2644722704,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1652935060,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1917434000,3111192211,3218533773,2663417461,3202199218}return SynapseXen_lIilIlIi[2385339747]end)(1690,{},{},"ilIilillii",{},{},{}),256),SynapseXen_iIiIilii)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[4009084077]or(function(...)local SynapseXen_iIllIiliI="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4035340651,1323991596)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3677396611,3677436672)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4009084077]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(380969088,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1680763127,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{725473136,1230353896,1600125097,2718871385,860885232,4133184236,2698364730,1560340746,2778976870,862017402}return SynapseXen_lIilIlIi[4009084077]end)({},1857,"iIiIlilli","liIliiIil"),512),SynapseXen_iIiIilii,512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_iIiIiIiillIlI=SynapseXen_IIlIilIlllIll+2;local SynapseXen_iiliIllllIIIliillii={SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll](SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1],SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2])}for SynapseXen_liIliIil=1,SynapseXen_iIIIIIiIIIIiiIlIiilI do SynapseXen_lliiiiiil[SynapseXen_iIiIiIiillIlI+SynapseXen_liIliIil]=SynapseXen_iiliIllllIIIliillii[SynapseXen_liIliIil]end;if SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+3]~=nil then SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2]=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+3]else SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[366760552]or(function()local SynapseXen_iIllIiliI="pain exist is gonna connect the dots of xen"SynapseXen_lIilIlIi[366760552]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1950974948,3197264866),SynapseXen_ilIIlI(103705303,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2728011780,2143297647,1318165570}return SynapseXen_lIilIlIi[366760552]end)())then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3227783779]or(function(...)local SynapseXen_iIllIiliI="hi xen doesn't work on sk8r please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3103480733,991036151)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1822642732,1822603819)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3227783779]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3650385413,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2525684626,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2287855610,716184342,465809997,791644777,2667036553,3602093045,4243600641,4016343819,3500864911,333118853}return SynapseXen_lIilIlIi[3227783779]end)("li","iiIiil",{}))local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2171588437]or(function()local SynapseXen_iIllIiliI="luraph better then xen bros :pensive:"SynapseXen_lIilIlIi[2171588437]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2903512117,247371421),SynapseXen_ilIIlI(1866804599,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2227440314,36967153,1506494234,1172847886,3359174406,447467963}return SynapseXen_lIilIlIi[2171588437]end)(),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_liilI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[165314933]or(function()local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"SynapseXen_lIilIlIi[165314933]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(744443861,1528579781),SynapseXen_ilIIlI(2743543702,SynapseXen_liIliIllliiiI[6]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{2437404769,2538698053,8868783,584693211}return SynapseXen_lIilIlIi[165314933]end)(),256),SynapseXen_iIiIilii,256)]=SynapseXen_iIIIllIlIIiIIIillil+SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[202563752]or(function(...)local SynapseXen_iIllIiliI="SECURE API, IMPOSSIBLE TO BYPASS!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2977439065,2169576165)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3339353728,3339390715)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[202563752]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2582549065,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(898512796,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-#{484628799,668939865,2108005246,3904144656,2751591352,1387596638,2401606204,878321610,482474164}return SynapseXen_lIilIlIi[202563752]end)({}))then local SynapseXen_IIlIilIlllIll=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2580026876]or(function()local SynapseXen_iIllIiliI="hi xen crashes on my axon paste plz help"SynapseXen_lIilIlIi[2580026876]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(766155469,809993226),SynapseXen_ilIIlI(3375314459,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{3252572070,260647966}return SynapseXen_lIilIlIi[2580026876]end)(),256)local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[334027120]or(function()local SynapseXen_iIllIiliI="epic gamer vision"SynapseXen_lIilIlIi[334027120]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1844566373,72567751),SynapseXen_ilIIlI(2773939992,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2119414179,1550866125,2478843654,1321192929,3771880933,1393039979,3073468311,2990816262,2280172808,1206280178}return SynapseXen_lIilIlIi[334027120]end)(),512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_ilIIlI(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[441663052]or(function()local SynapseXen_iIllIiliI="can we have an f in chat for ripull"SynapseXen_lIilIlIi[441663052]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2416238232,2928574464),SynapseXen_ilIIlI(4068319313,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2994577695,1312223492,2801276563}return SynapseXen_lIilIlIi[441663052]end)(),512),SynapseXen_iIiIilii)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIIIiIIIIiiIlIiilI==0 then SynapseXen_iIllIi=SynapseXen_iIllIi+1;SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_lIlliIllllllIilIilIl[SynapseXen_iIllIi][411212599]end;local SynapseXen_iIiIiIiillIlI=(SynapseXen_iIIIIIiIIIIiiIlIiilI-1)*50;local SynapseXen_lIliililIiilIlIiI=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]if SynapseXen_iIIIllIlIIiIIIillil==0 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liIIillliIIl-SynapseXen_IIlIilIlllIll end;for SynapseXen_liIliIil=1,SynapseXen_iIIIllIlIIiIIIillil do SynapseXen_lIliililIiilIlIiI[SynapseXen_iIiIiIiillIlI+SynapseXen_liIliIil]=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+SynapseXen_liIliIil]end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3537058660]or(function()local SynapseXen_iIllIiliI="now comes with a free n word pass"SynapseXen_lIilIlIi[3537058660]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2192877716,2064581083),SynapseXen_ilIIlI(894299147,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3597931425,751880788,3925299123}return SynapseXen_lIilIlIi[3537058660]end)())then SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2486790925]or(function()local SynapseXen_iIllIiliI="sometimes it be like that"SynapseXen_lIilIlIi[2486790925]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2891868351,2910185901),SynapseXen_ilIIlI(1015434517,SynapseXen_liIliIllliiiI[3]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{3293966679,37223950,2711661544,1766735029,579620350,3991100962,2781317109,1593174373}return SynapseXen_lIilIlIi[2486790925]end)(),256)]=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3161899190]or(function()local SynapseXen_iIllIiliI="wow xen is shit buy luraph ok"SynapseXen_lIilIlIi[3161899190]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(4085288472,2215941662),SynapseXen_ilIIlI(3144132589,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1451622400,1577363881,3986009168}return SynapseXen_lIilIlIi[3161899190]end)(),512)~=0;if SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[862922741]or(function()local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"SynapseXen_lIilIlIi[862922741]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(557926703,1168678317),SynapseXen_ilIIlI(1497782672,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{2102928094,1372825764,245371292,2764026858,4144467365,516485551,2426901610,3420121629,4022004560}return SynapseXen_lIilIlIi[862922741]end)(),512)~=0 then SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2474983285]or(function()local SynapseXen_iIllIiliI="inb4 posted on exploit reports section"SynapseXen_lIilIlIi[2474983285]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3090369114,3567831045),SynapseXen_ilIIlI(3727105268,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3769178692,1320370379,3891850099,324588835}return SynapseXen_lIilIlIi[2474983285]end)())then SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[4277848308]or(function()local SynapseXen_iIllIiliI="i put more time into this shitty list of dead memes then i did into the obfuscator itself"SynapseXen_lIilIlIi[4277848308]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3478896924,4208825370),SynapseXen_ilIIlI(640599664,SynapseXen_liIliIllliiiI[4]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{3757653585}return SynapseXen_lIilIlIi[4277848308]end)(),256),SynapseXen_iIiIilii,256)]={}elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2046188537]or(function(...)local SynapseXen_iIllIiliI="this is a christian obfuscator, no cursing allowed in our scripts"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1841956746,1786901297)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3364129187,3364166664)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2046188537]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1755114424,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1383759401,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{1713396343,1424302291,3437879250}return SynapseXen_lIilIlIi[2046188537]end)("iiIlilliiiilii","IlIlIIIiiIIIiII","IlIlIliIlIlIilIllIl",{},"IIIilill",9926,9729))then local SynapseXen_IIlIilIlllIll=SynapseXen_liilI(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[625870918]or(function()local SynapseXen_iIllIiliI="wait for someone on devforum to say they are gonna deobfuscate this"SynapseXen_lIilIlIi[625870918]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2073967019,11879431),SynapseXen_ilIIlI(3084687738,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{196342042,757633382,913190713,2959782868,1725696263,2786539280,3852742516,3019249437,2517695243,2968787568}return SynapseXen_lIilIlIi[625870918]end)(),256),SynapseXen_iIiIilii,256)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]=assert(tonumber(SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]),'`for` initial value must be a number')SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1]=assert(tonumber(SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1]),'`for` limit must be a number')SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2]=assert(tonumber(SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2]),'`for` step must be a number')SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]-SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2]SynapseXen_iIllIi=SynapseXen_iIllIi+SynapseXen_IliiIlillIiilIIil[20078946]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1814019234]or(function(...)local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3371109663,1981930516)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(375391091,375368949)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1814019234]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3242065495,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1874223749,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{3467571138}return SynapseXen_lIilIlIi[1814019234]end)({},5212,5091,10307,"IIIlIIIlI","iIliillIl",{},12881,{},"IlliIiilIiIiillliI"))then local SynapseXen_IIlIilIlllIll=SynapseXen_IllIii(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1018911083]or(function()local SynapseXen_iIllIiliI="luraph better then xen bros :pensive:"SynapseXen_lIilIlIi[1018911083]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1871325668,4259172314),SynapseXen_ilIIlI(1587553176,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{261478857,2427362152,3276975679,3555587487,1535341899,1867837205,735078189,1861045466}return SynapseXen_lIilIlIi[1018911083]end)(),256),SynapseXen_iIiIilii,256)local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3418269786]or(function()local SynapseXen_iIllIiliI="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"SynapseXen_lIilIlIi[3418269786]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(790907132,3461900265),SynapseXen_ilIIlI(4073766684,SynapseXen_liIliIllliiiI[4]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{2056618762,231127479,376111483,2954957959,2807455125}return SynapseXen_lIilIlIi[3418269786]end)(),512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[4035994847]or(function(...)local SynapseXen_iIllIiliI="aspect network better obfuscator"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2420280631,2248289142)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2074492527,2074434135)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4035994847]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3750534610,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(87767761,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2070062696,726100375,2818600090,3612112109,2395155494}return SynapseXen_lIilIlIi[4035994847]end)("llIiIlIiIiilIl",4240,{},{},"IlIillll",{},{},"illiIIlIliiIllliI",5751),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1]=SynapseXen_iIIIllIlIIiIIIillil;SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]=SynapseXen_iIIIllIlIIiIIIillil[SynapseXen_iIIIIIiIIIIiiIlIiilI]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3908891160]or(function(...)local SynapseXen_iIllIiliI="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1874130517,3067308175)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2524308294,2524316690)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3908891160]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1543251477,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2464043787,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{3303712450,2659835816,1258760662,3134863402,1656876281,3213023710,914749490,821091264,811691258}return SynapseXen_lIilIlIi[3908891160]end)("llIlIl","IIlllili","IIiIIIiilIl","Iilii"))then if SynapseXen_ilIIlI(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[3329668698]or(function(...)local SynapseXen_iIllIiliI="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3985943187,3244752737)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(605911690,605954892)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3329668698]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3561644820,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(877513000,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3128436077,3625059918,2932794545}return SynapseXen_lIilIlIi[3329668698]end)(3405,{},{},8560,"Iilii","l",{})),SynapseXen_iIiIilii)==(SynapseXen_lIilIlIi[1104715270]or(function()local SynapseXen_iIllIiliI="i put more time into this shitty list of dead memes then i did into the obfuscator itself"SynapseXen_lIilIlIi[1104715270]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(518724556,2476541532),SynapseXen_ilIIlI(1099004309,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1969585060,1116204617,3263789718,2962401559,2990662379}return SynapseXen_lIilIlIi[1104715270]end)())then SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[918324440]or(function()local SynapseXen_iIllIiliI="hi devforum"SynapseXen_lIilIlIi[918324440]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3857214081,3874355489),SynapseXen_ilIIlI(2981399917,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{1763799374,1861625320,841210225,526408543,3743274003,1454351800}return SynapseXen_lIilIlIi[918324440]end)(),256),SynapseXen_iIiIilii,256)]=SynapseXen_iiiliil else SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[918324440]or(function()local SynapseXen_iIllIiliI="hi devforum"SynapseXen_lIilIlIi[918324440]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3857214081,3874355489),SynapseXen_ilIIlI(2981399917,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{1763799374,1861625320,841210225,526408543,3743274003,1454351800}return SynapseXen_lIilIlIi[918324440]end)(),256),SynapseXen_iIiIilii,256)]=SynapseXen_liIliIllliiiI[SynapseXen_ilIIlI(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[3329668698]or(function(...)local SynapseXen_iIllIiliI="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3985943187,3244752737)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(605911690,605954892)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3329668698]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3561644820,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(877513000,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3128436077,3625059918,2932794545}return SynapseXen_lIilIlIi[3329668698]end)(3405,{},{},8560,"Iilii","l",{})),SynapseXen_iIiIilii)]end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1868380879]or(function(...)local SynapseXen_iIllIiliI="can we have an f in chat for ripull"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1066289931,4146957737)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2175932256,2175898467)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1868380879]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(4043783906,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4157055187,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{4127735103,4050818193,998614158,4118234693}return SynapseXen_lIilIlIi[1868380879]end)("IllillllilIIl",9036,"IiIiilIiI","IIiIlIIiIiiIiiiii",{},61,7798,{},{},1726))then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3571617215]or(function()local SynapseXen_iIllIiliI="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"SynapseXen_lIilIlIi[3571617215]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(783808466,55009250),SynapseXen_ilIIlI(2673007154,SynapseXen_liIliIllliiiI[2]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{3554829563,3045716277,1864106975,3204897671,801820096,2610791206,50283505}return SynapseXen_lIilIlIi[3571617215]end)())local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[670831730]or(function()local SynapseXen_iIllIiliI="xen best rerubi paste"SynapseXen_lIilIlIi[670831730]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2014922052,729430646),SynapseXen_ilIIlI(2677306282,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{1891614797,443515205,3928127538,4023112077,3015236035,2437006242,44387756,1476259762,3314787640}return SynapseXen_lIilIlIi[670831730]end)(),512)local SynapseXen_liillIIIiIillliiIil,SynapseXen_illiIl=SynapseXen_lliiiiiil,SynapseXen_IilIiiI;SynapseXen_liIIillliIIl=SynapseXen_IIlIilIlllIll-1;for SynapseXen_liIliIil=SynapseXen_IIlIilIlllIll,SynapseXen_IIlIilIlllIll+(SynapseXen_iIIIllIlIIiIIIillil>0 and SynapseXen_iIIIllIlIIiIIIillil-1 or SynapseXen_IIiIiliIIIliiIilIlI)do SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]=SynapseXen_illiIl[SynapseXen_liIliIil-SynapseXen_IIlIilIlllIll]end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3318361213]or(function()local SynapseXen_iIllIiliI="skisploit is the superior obfuscator, clearly."SynapseXen_lIilIlIi[3318361213]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(705291107,2029287994),SynapseXen_ilIIlI(1096222680,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{1115751610,142475254,3982505087}return SynapseXen_lIilIlIi[3318361213]end)())then if not not SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1004828768]or(function()local SynapseXen_iIllIiliI="epic gamer vision"SynapseXen_lIilIlIi[1004828768]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3829615714,1506912444),SynapseXen_ilIIlI(1902566287,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{196803831,3607750523,1653641512,1353481943,3901702893,716660540,3892450918,1929468717}return SynapseXen_lIilIlIi[1004828768]end)()),SynapseXen_iIiIilii,256)]==(SynapseXen_IllIii(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[1168674606]or(function()local SynapseXen_iIllIiliI="yed"SynapseXen_lIilIlIi[1168674606]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1755071247,3985668886),SynapseXen_ilIIlI(1241461113,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{1968939692,1667871298,3979237370,3596230770,3561841238,1546695648}return SynapseXen_lIilIlIi[1168674606]end)(),512),SynapseXen_iIiIilii,512)==0)then SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[800102357]or(function()local SynapseXen_iIllIiliI="this is a christian obfuscator, no cursing allowed in our scripts"SynapseXen_lIilIlIi[800102357]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3190143966,607877806),SynapseXen_ilIIlI(2321120705,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{1309030739,250625858,2817825454,2928107481,1992940216,1704448117}return SynapseXen_lIilIlIi[800102357]end)())then local SynapseXen_IIlIilIlllIll=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3466346541]or(function(...)local SynapseXen_iIllIiliI="sometimes it be like that"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2816741543,3048127851)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2806181352,2806188097)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3466346541]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2124252234,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2686748165,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{458078943,2726636179,1001150090,1054609201,3540474093}return SynapseXen_lIilIlIi[3466346541]end)(12944,5736),256)local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2128449011]or(function(...)local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4277372115,3756489716)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(330020840,330051721)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2128449011]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1536376762,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3061179764,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3422455327,3849314790,3900309026,4200072144,2730386849,771489875,3179588643}return SynapseXen_lIilIlIi[2128449011]end)(3975,{},{},{}),512),SynapseXen_iIiIilii)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_IIIlIIIiiIIIIIllI,SynapseXen_lIllIllIiiIIlilllI;local SynapseXen_lIIiIiIlIIlIIiIIl;if SynapseXen_iIIIllIlIIiIIIillil==1 then return elseif SynapseXen_iIIIllIlIIiIIIillil==0 then SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_liIIillliIIl else SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_IIlIilIlllIll+SynapseXen_iIIIllIlIIiIIIillil-2 end;SynapseXen_lIllIllIiiIIlilllI={}SynapseXen_IIIlIIIiiIIIIIllI=0;for SynapseXen_liIliIil=SynapseXen_IIlIilIlllIll,SynapseXen_lIIiIiIlIIlIIiIIl do SynapseXen_IIIlIIIiiIIIIIllI=SynapseXen_IIIlIIIiiIIIIIllI+1;SynapseXen_lIllIllIiiIIlilllI[SynapseXen_IIIlIIIiiIIIIIllI]=SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]end;return SynapseXen_lIllIllIiiIIlilllI,SynapseXen_IIIlIIIiiIIIIIllI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[4028801115]or(function()local SynapseXen_iIllIiliI="thats how mafia works"SynapseXen_lIilIlIi[4028801115]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3321253385,1520627091),SynapseXen_ilIIlI(2365393751,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{3145645805,810624150,2162048393,1162025052,3167976361,2805743026,1908802103,4137678076,62530714,4105017011}return SynapseXen_lIilIlIi[4028801115]end)())then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1417838271]or(function(...)local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(376816123,1082745201)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(572765703,572775437)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1417838271]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3979656971,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2000366233,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2504219232,2979216210,3536503665}return SynapseXen_lIilIlIi[1417838271]end)({},"Il",{},"ilil","l"))local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[3185453878]or(function()local SynapseXen_iIllIiliI="xen detects custom getfenv"SynapseXen_lIilIlIi[3185453878]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(4180916522,3261196909),SynapseXen_ilIIlI(4154849203,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{219289800,3686092057,1790213298,3675759060,2637609431}return SynapseXen_lIilIlIi[3185453878]end)(),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2064648439]or(function(...)local SynapseXen_iIllIiliI="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1564571866,4116641958)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3794744333,3794714424)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2064648439]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(201338553,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1893541099,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1833333943,3451682957,2751138387,4089665291,2958068480,2073136692,1232569455,256209429,3201530942,179351035}return SynapseXen_lIilIlIi[2064648439]end)({},{},8315,{},{}))]=SynapseXen_iIIIllIlIIiIIIillil*SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[29561456]or(function()local SynapseXen_iIllIiliI="i put more time into this shitty list of dead memes then i did into the obfuscator itself"SynapseXen_lIilIlIi[29561456]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3293627722,382017268),SynapseXen_ilIIlI(510120218,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3762360976}return SynapseXen_lIilIlIi[29561456]end)())then SynapseXen_iIllIi=SynapseXen_iIllIi+SynapseXen_IliiIlillIiilIIil[20078946]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3526197438]or(function()local SynapseXen_iIllIiliI="my way to go against expwoiting is to have safety measuwes. i 1 wocawscwipt and onwy moduwes. hewe's how it wowks: this scwipt bewow stowes the moduwes in a tabwe fow each moduwe we send the wist with the moduwes and moduwe infowmation and use inyit a function in my moduwe that wiww stowe the info and aftew it has send to aww the moduwes it wiww dewete them. so whenyevew the cwient twies to hack they cant get the moduwes. onwy this peace of wocawscwipt."SynapseXen_lIilIlIi[3526197438]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(852594915,2472388883),SynapseXen_ilIIlI(1967704753,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{376487219,2401902521,2585938473}return SynapseXen_lIilIlIi[3526197438]end)())then local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;for SynapseXen_liIliIil=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2684783070]or(function()local SynapseXen_iIllIiliI="double-header fair! this rationalization has a overenthusiastically anticheat! you will get nonpermissible for exploiting!"SynapseXen_lIilIlIi[2684783070]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(538197501,2994416102),SynapseXen_ilIIlI(1185627324,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{3485439858,3271270085,1253854358,4163993426,3030675465,2606563209}return SynapseXen_lIilIlIi[2684783070]end)(),256),SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3162467626]or(function()local SynapseXen_iIllIiliI="aspect network better obfuscator"SynapseXen_lIilIlIi[3162467626]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(435223405,3093143892),SynapseXen_ilIIlI(1970173128,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{813176982,809258119,1733729308}return SynapseXen_lIilIlIi[3162467626]end)(),512)do SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]=nil end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[596860622]or(function(...)local SynapseXen_iIllIiliI="print(bytecode)"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2147110451,102722132)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1324703424,1324656741)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[596860622]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3579223340,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1615125110,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1273556266,4017128469}return SynapseXen_lIilIlIi[596860622]end)({},"IiIlIIllIIlI",760,7344))then SynapseXen_iIiIilii=SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[834811089]or(function()local SynapseXen_iIllIiliI="hi xen crashes on my axon paste plz help"SynapseXen_lIilIlIi[834811089]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2666409784,3269243450),SynapseXen_ilIIlI(2297590597,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{1903771086}return SynapseXen_lIilIlIi[834811089]end)(),256)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1565501620]or(function(...)local SynapseXen_iIllIiliI="xen best rerubi paste"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1549536381,541241600)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2435028305,2435066911)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1565501620]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1060326642,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2413731417,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{4074408652}return SynapseXen_lIilIlIi[1565501620]end)({},{},8584,{},"IIiIiillIii",{},"iI",{}))then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2856144426]or(function()local SynapseXen_iIllIiliI="now with shitty xor string obfuscation"SynapseXen_lIilIlIi[2856144426]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2835972356,2340057730),SynapseXen_ilIIlI(4001789796,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3045075214,965238694}return SynapseXen_lIilIlIi[2856144426]end)(),512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2897689739]or(function(...)local SynapseXen_iIllIiliI="wow xen is shit buy luraph ok"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2816533430,1876071509)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3950486130,3950505433)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2897689739]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(691229334,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(771117209,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1766375905,1359500850,1525128680,998319357,3758515650,960332816,3118001423}return SynapseXen_lIilIlIi[2897689739]end)({},11725,"IlliIllIIIilI",3964,13350,"liliIlil"),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[940645488]or(function(...)local SynapseXen_iIllIiliI="now comes with a free n word pass"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3600152385,3780616412)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2569785083,2569810338)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[940645488]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2504121090,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1853153945,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2824456797,2860909553,3421835473,1425458185,2784205426,2717336526,3775392806,2606823773}return SynapseXen_lIilIlIi[940645488]end)("ll",7459,"IIlIiIl",9220))]=SynapseXen_iIIIllIlIIiIIIillil/SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3273870507]or(function(...)local SynapseXen_iIllIiliI="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1490657529,1741621703)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3237610960,3237580114)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3273870507]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(67156332,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4023736271,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{3211355247,1695886743,1409116060,1643811044,3228257122,2542460398,764882586,18039155}return SynapseXen_lIilIlIi[3273870507]end)(8077,"IlIiIillIiilIil",{},"lll",2268,{}))then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1422119332]or(function(...)local SynapseXen_iIllIiliI="xen detects custom getfenv"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2646147917,3940795016)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3695601100,3695538359)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1422119332]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3534644150,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3059724921,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{2454321162,3095145936}return SynapseXen_lIilIlIi[1422119332]end)("IIilllIllllIiilIiIl",{},9991,{},"IIiilIl",13696,9977,2294,{},9034))~=0;local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liilI(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3156517137]or(function(...)local SynapseXen_iIllIiliI="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2039471499,2112113621)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2790273938,2790216546)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3156517137]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1343469084,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3871673208,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{526876997,3132386030}return SynapseXen_lIilIlIi[3156517137]end)(4206,10128,"iIIIlIlll","liIIilii",{}),512),SynapseXen_iIiIilii,512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[3408842497]or(function()local SynapseXen_iIllIiliI="print(bytecode)"SynapseXen_lIilIlIi[3408842497]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(975256121,1955444454),SynapseXen_ilIIlI(2163396846,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{50662242,3908695592,3127188587,3068980474,3473234859,927306496}return SynapseXen_lIilIlIi[3408842497]end)())local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;if SynapseXen_iIIIllIlIIiIIIillil==SynapseXen_iIIIIIiIIIIiiIlIiilI~=SynapseXen_IIlIilIlllIll then SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[4097450405]or(function()local SynapseXen_iIllIiliI="thats how mafia works"SynapseXen_lIilIlIi[4097450405]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2042483433,3708076421),SynapseXen_ilIIlI(1749842531,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2492416329,3472325118,284984824,2937873072,1361325223,2291545299,3069804780}return SynapseXen_lIilIlIi[4097450405]end)())then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3743115734]or(function(...)local SynapseXen_iIllIiliI="this is a christian obfuscator, no cursing allowed in our scripts"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1032052060,119800129)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2783508043,2783515263)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3743115734]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(571745138,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(149979834,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{2813033293,3694049872,2365761537,3052597541,1821004815,504457032,1720693913,2002427036,1558198078}return SynapseXen_lIilIlIi[3743115734]end)("IliilllIiIliiil",{},"lIIIIllilI","IlIlIiliiI","iIIillIl","lIlliIiiIIIlIIiIi",{},13230,"liIIIlllIIIii")),SynapseXen_iIiIilii)local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3703529058]or(function(...)local SynapseXen_iIllIiliI="luraph better then xen bros :pensive:"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2867056598,4126686507)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(4052642849,4052590086)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3703529058]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1258183930,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3686104808,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{3484347058,1023044777,209216221}return SynapseXen_lIilIlIi[3703529058]end)("IIIlIIllll",4759,12989,{},"lIIilIilil",13987,5477,12900,"lilliIIll"))local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2245898100]or(function()local SynapseXen_iIllIiliI="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."SynapseXen_lIilIlIi[2245898100]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1738063348,1128128162),SynapseXen_ilIIlI(3942311388,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{694885113}return SynapseXen_lIilIlIi[2245898100]end)())local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_ilIiilIiiIiiIi,SynapseXen_iIIIlliIIII;local SynapseXen_lIIiIiIlIIlIIiIIl,SynapseXen_IIIlIIIiiIIIIIllI;SynapseXen_ilIiilIiiIiiIi={}if SynapseXen_iIIIllIlIIiIIIillil~=1 then if SynapseXen_iIIIllIlIIiIIIillil~=0 then SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_IIlIilIlllIll+SynapseXen_iIIIllIlIIiIIIillil-1 else SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_liIIillliIIl end;SynapseXen_IIIlIIIiiIIIIIllI=0;for SynapseXen_liIliIil=SynapseXen_IIlIilIlllIll+1,SynapseXen_lIIiIiIlIIlIIiIIl do SynapseXen_IIIlIIIiiIIIIIllI=SynapseXen_IIIlIIIiiIIIIIllI+1;SynapseXen_ilIiilIiiIiiIi[SynapseXen_IIIlIIIiiIIIIIllI]=SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]end;SynapseXen_lIIiIiIlIIlIIiIIl,SynapseXen_iIIIlliIIII=SynapseXen_lIIIIIilIi(SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll](unpack(SynapseXen_ilIiilIiiIiiIi,1,SynapseXen_lIIiIiIlIIlIIiIIl-SynapseXen_IIlIilIlllIll)))else SynapseXen_lIIiIiIlIIlIIiIIl,SynapseXen_iIIIlliIIII=SynapseXen_lIIIIIilIi(SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]())end;SynapseXen_liIIillliIIl=SynapseXen_IIlIilIlllIll-1;if SynapseXen_iIIIIIiIIIIiiIlIiilI~=1 then if SynapseXen_iIIIIIiIIIIiiIlIiilI~=0 then SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_IIlIilIlllIll+SynapseXen_iIIIIIiIIIIiiIlIiilI-2 else SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_lIIiIiIlIIlIIiIIl+SynapseXen_IIlIilIlllIll-1 end;SynapseXen_IIIlIIIiiIIIIIllI=0;for SynapseXen_liIliIil=SynapseXen_IIlIilIlllIll,SynapseXen_lIIiIiIlIIlIIiIIl do SynapseXen_IIIlIIIiiIIIIIllI=SynapseXen_IIIlIIIiiIIIIIllI+1;SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]=SynapseXen_iIIIlliIIII[SynapseXen_IIIlIIIiiIIIIIllI]end end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[688060175]or(function(...)local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(988679963,735255604)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3659612046,3659559120)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[688060175]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2167094424,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2914317808,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{3176873424,1321926519,3381115026}return SynapseXen_lIilIlIi[688060175]end)("IiIiiil","iIlllIliIilllIIIiiI",{},1025,"IlIIilllI","lIIIiliIl",11196))then SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[770268411]or(function(...)local SynapseXen_iIllIiliI="skisploit is the superior obfuscator, clearly."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3196654826,4055093425)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(336017307,335982507)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[770268411]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3398086218,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1229393537,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1638933823,4131905376,229984210,931517024}return SynapseXen_lIilIlIi[770268411]end)({},{},{},{}))]=SynapseXen_llIilIIIilIiI[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[4190865384]or(function(...)local SynapseXen_iIllIiliI="aspect network better obfuscator"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2931664462,2497424378)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2926491136,2926499613)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4190865384]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(804253021,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3648945455,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{440375434,2687006209,1833217111,939211368}return SynapseXen_lIilIlIi[4190865384]end)("ii",1784,8488,{}))]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1473860828]or(function(...)local SynapseXen_iIllIiliI="xen doesn't come with instance caching, sorry superskater"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3062447214,3268652588)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(4243071132,4243046879)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1473860828]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(4162236324,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1085805146,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{4148569045,2927585387,2071489495,1909988533,1197355421,1517731527}return SynapseXen_lIilIlIi[1473860828]end)(12364))then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2198992312]or(function()local SynapseXen_iIllIiliI="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"SynapseXen_lIilIlIi[2198992312]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(294791012,301307499),SynapseXen_ilIIlI(3432004320,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1044052855,3153245847,4160647504,4169170645,1766947571,3945399368,2903746103,2800513220,204877998}return SynapseXen_lIilIlIi[2198992312]end)())]if not not SynapseXen_iIIIllIlIIiIIIillil==(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2206838962]or(function(...)local SynapseXen_iIllIiliI="hi xen doesn't work on sk8r please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3988508193,3487667303)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1596983610,1596960542)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2206838962]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(817557814,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3726051283,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3883060544,3635214257,3982505530,670834794,982731558,601105183,1840334020,3992021405,2172283233}return SynapseXen_lIilIlIi[2206838962]end)(9147,3899,{},"IIi",14860))==0)then SynapseXen_iIllIi=SynapseXen_iIllIi+1 else SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3653719822]or(function(...)local SynapseXen_iIllIiliI="hi devforum"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3340551863,2991513242)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(244813635,244862449)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3653719822]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1668963084,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(92505690,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{4079299278,81594188,3373727268,4140950714,2488445580,1980667366,1598088309,2481737176}return SynapseXen_lIilIlIi[3653719822]end)("IllIilll",5559,"ll",9166,"IIIi","IIliIiIiil"),256)]=SynapseXen_iIIIllIlIIiIIIillil end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1509388456]or(function(...)local SynapseXen_iIllIiliI="now comes with a free n word pass"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(714866174,2769688155)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1900493977,1900442611)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1509388456]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2085213039,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(654630699,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{715924329,1110986927,3512325028,762820588,97704072,3030065106,4288237351}return SynapseXen_lIilIlIi[1509388456]end)(12248,{},"IIilIIil",13017,{},"lIIl","iIiIIlIl"))then local SynapseXen_IIlIilIlllIll=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1308024212]or(function(...)local SynapseXen_iIllIiliI="epic gamer vision"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3636699230,1915922245)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(746673250,746621947)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1308024212]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1000633302,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1570793050,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{105921895,2028383749,3651722398,1798209945,1117681472,3292582080,706625151,4065094309}return SynapseXen_lIilIlIi[1308024212]end)("II","ll",{},6007,{},10645,"llliiIlil"),256)local SynapseXen_lIIlillIiIIliIIiI={}for SynapseXen_liIliIil=1,#SynapseXen_iIIlIiilIIi do local SynapseXen_iiiIIiliiIlilIilillI=SynapseXen_iIIlIiilIIi[SynapseXen_liIliIil]for SynapseXen_liIlIlIIiiliil=0,#SynapseXen_iiiIIiliiIlilIilillI do local SynapseXen_iIIiIIIlIIi=SynapseXen_iiiIIiliiIlilIilillI[SynapseXen_liIlIlIIiiliil]local SynapseXen_liillIIIiIillliiIil=SynapseXen_iIIiIIIlIIi[1]local SynapseXen_IiilllIlliiIIiilI=SynapseXen_iIIiIIIlIIi[2]if SynapseXen_liillIIIiIillliiIil==SynapseXen_lliiiiiil and SynapseXen_IiilllIlliiIIiilI>=SynapseXen_IIlIilIlllIll then SynapseXen_lIIlillIiIIliIIiI[SynapseXen_IiilllIlliiIIiilI]=SynapseXen_liillIIIiIillliiIil[SynapseXen_IiilllIlliiIIiilI]SynapseXen_iIIiIIIlIIi[1]=SynapseXen_lIIlillIiIIliIIiI end end end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1076470879]or(function(...)local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1567103903,1074425894)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(4188679744,4188649414)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1076470879]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3205479047,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1990204308,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{245894371,3808245922}return SynapseXen_lIilIlIi[1076470879]end)({}))then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[180914469]or(function()local SynapseXen_iIllIiliI="hi xen crashes on my axon paste plz help"SynapseXen_lIilIlIi[180914469]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(210020772,751343107),SynapseXen_ilIIlI(806321911,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{802851236,1719669890,654400732,873594335,314830759}return SynapseXen_lIilIlIi[180914469]end)(),512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[4072714612]or(function()local SynapseXen_iIllIiliI="thats how mafia works"SynapseXen_lIilIlIi[4072714612]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1893908662,713622481),SynapseXen_ilIIlI(2526955060,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{4185407911,2062843230,2034307592,1804479885,2375618411,4036093686,3651383261}return SynapseXen_lIilIlIi[4072714612]end)(),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3525236010]or(function(...)local SynapseXen_iIllIiliI="i'm intercommunication about the most nonecclesiastical dll exploits for esp. they only characterization objects with a antepatriarchal in the geistesgeschichte for the esp."local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4077918733,1642263770)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3628753773,3628694478)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3525236010]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(301735906,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1297044707,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{1019674393,2073138858,3017239983}return SynapseXen_lIilIlIi[3525236010]end)({},5832))]=SynapseXen_iIIIllIlIIiIIIillil%SynapseXen_iIIIIIiIIIIiiIlIiilI elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2733028477]or(function()local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"SynapseXen_lIilIlIi[2733028477]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2068600489,3714991460),SynapseXen_ilIIlI(1792113599,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{678635394,2450995143,1537163470,3598308323,1623243094}return SynapseXen_lIilIlIi[2733028477]end)())then SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[187772017]or(function()local SynapseXen_iIllIiliI="baby i just fell for uwu,,,,,, i wanna be with uwu!11!!"SynapseXen_lIilIlIi[187772017]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(700942955,31070695),SynapseXen_ilIIlI(1001751397,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{2680556163,1596318977}return SynapseXen_lIilIlIi[187772017]end)(),256)]=-SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1618171482]or(function()local SynapseXen_iIllIiliI="this is so sad, alexa play ripull.mp4"SynapseXen_lIilIlIi[1618171482]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(954254556,146943488),SynapseXen_ilIIlI(596342201,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-#{1876950346,2333294275,1156901307,3809470308,2305294612,2759130920,577325035,731327725,613519150,1205084021}return SynapseXen_lIilIlIi[1618171482]end)(),512)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3103342603]or(function(...)local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(926003344,506927818)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(716161469,716170410)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3103342603]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(820414494,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3574861501,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3840847991,1435220743,1726358559,1072872320}return SynapseXen_lIilIlIi[3103342603]end)(11508,3822,{},{},{},"lililIiiIii","liilliillilli",{}))then SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3261574663]or(function()local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"SynapseXen_lIilIlIi[3261574663]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1646262027,752388736),SynapseXen_ilIIlI(2184353554,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{597551772,2918779196}return SynapseXen_lIilIlIi[3261574663]end)(),256)]=not SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[215543436]or(function()local SynapseXen_iIllIiliI="level 1 crook = luraph, level 100 boss = xen"SynapseXen_lIilIlIi[215543436]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3606537501,2490445467),SynapseXen_ilIIlI(2521224957,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{262750785,2564293429,3262128569,55576835,4275504001,870094601}return SynapseXen_lIilIlIi[215543436]end)(),512)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[752771640]or(function()local SynapseXen_iIllIiliI="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."SynapseXen_lIilIlIi[752771640]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3104026639,2344585331),SynapseXen_ilIIlI(253417211,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{2791895233,1366628095,1534504542,1374064893}return SynapseXen_lIilIlIi[752771640]end)())then SynapseXen_iiiiiillIiiI[SynapseXen_IlIIlIlilliIi[SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[1570393467]or(function()local SynapseXen_iIllIiliI="sometimes it be like that"SynapseXen_lIilIlIi[1570393467]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(572318844,3711908407),SynapseXen_ilIIlI(3263347564,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{955455713,4264987689,3571942141,1915960794,431277969,1215383119,68788096,1709056047}return SynapseXen_lIilIlIi[1570393467]end)(),262144)]]=SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3517255304]or(function(...)local SynapseXen_iIllIiliI="SECURE API, IMPOSSIBLE TO BYPASS!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2841997854,3605296896)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1078179453,1078216435)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3517255304]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2778445137,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(384797227,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3306983581,3609189313,2044830268}return SynapseXen_lIilIlIi[3517255304]end)({},37),256)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[4154366404]or(function(...)local SynapseXen_iIllIiliI="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2850844235,630872632)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2323112877,2323120310)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4154366404]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2894609783,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3960269131,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{4206270604,1182622466,814113897,3669218831,2607300690,22382417,1584299857,1439306005}return SynapseXen_lIilIlIi[4154366404]end)({},"iIiIiiiIlliIIIIl",143,8142,"i",{},"ll","IIIlil"))then local SynapseXen_IIlIilIlllIll=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[219167888]or(function(...)local SynapseXen_iIllIiliI="i put more time into this shitty list of dead memes then i did into the obfuscator itself"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1837094675,3101745317)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3474684222,3474621502)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[219167888]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(413052999,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3712350842,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{611420003,4251967700,320983894}return SynapseXen_lIilIlIi[219167888]end)(327,6125,"iIIiIlIlilIlIllI",2229,"IIIiIl",2728,"ilililiilIiliIIiiil","IiI",{},10861),256)~=0;local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[881394081]or(function()local SynapseXen_iIllIiliI="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"SynapseXen_lIilIlIi[881394081]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(888596214,41472389),SynapseXen_ilIIlI(3796723784,SynapseXen_liIliIllliiiI[6]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{975730570,1778632520}return SynapseXen_lIilIlIi[881394081]end)(),512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[4010066127]or(function()local SynapseXen_iIllIiliI="xen doesn't come with instance caching, sorry superskater"SynapseXen_lIilIlIi[4010066127]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1364602273,218541758),SynapseXen_ilIIlI(3222625197,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-#{3777309162,3531937523,4173101528,4080342175,194808981,1822977682,712791414,739694830}return SynapseXen_lIilIlIi[4010066127]end)(),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;if SynapseXen_iIIIllIlIIiIIIillil<=SynapseXen_iIIIIIiIIIIiiIlIiilI~=SynapseXen_IIlIilIlllIll then SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[4098792490]or(function()local SynapseXen_iIllIiliI="now with shitty xor string obfuscation"SynapseXen_lIilIlIi[4098792490]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1610679962,993192272),SynapseXen_ilIIlI(2546296659,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2568669442,3722583659,1201099453,241571156,920928892,2716323366,2776089144,2589642922,4106426097,4251232741}return SynapseXen_lIilIlIi[4098792490]end)())then local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2135268334]or(function(...)local SynapseXen_iIllIiliI="xen detects custom getfenv"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3925912835,1094233145)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2661547316,2661521456)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2135268334]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3598429810,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3489565433,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3232004966,596585491,2290660673,1406659204,3852214039}return SynapseXen_lIilIlIi[2135268334]end)({},"llIIlI",3929,{},2958,{},{}),512)local SynapseXen_iIiIIlilililiIIi=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]for SynapseXen_liIliIil=SynapseXen_iIIIllIlIIiIIIillil+1,SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[785624644]or(function(...)local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(182043262,77454566)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(549748046,549784964)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[785624644]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(763100655,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(815027531,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1523005839,3890872822,884304821,3973879519,1210359415,2367268102,1238418658,3881321151,71875690}return SynapseXen_lIilIlIi[785624644]end)({},"lIIiIillII","liii","lilIIllliIIil",1914,{}),512)do SynapseXen_iIiIIlilililiIIi=SynapseXen_iIiIIlilililiIIi..SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]end;SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2788925198]or(function(...)local SynapseXen_iIllIiliI="yed"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3640242799,3678158392)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3131263606,3131210027)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2788925198]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2229701006,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1271973438,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3692747061}return SynapseXen_lIilIlIi[2788925198]end)(4506,511,4040),256),SynapseXen_iIiIilii)]=SynapseXen_iIiIIlilililiIIi elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3503624894]or(function(...)local SynapseXen_iIllIiliI="thats how mafia works"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3893219924,1423819911)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2905766764,2905811386)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3503624894]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(602025120,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1366431685,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{1823624723,3262910739,1669951689}return SynapseXen_lIilIlIi[3503624894]end)({},{}))then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3369374758]or(function(...)local SynapseXen_iIllIiliI="xen doesn't come with instance caching, sorry superskater"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2609318186,793963830)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2479971026,2479914624)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3369374758]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1633716865,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(424047021,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2056927442}return SynapseXen_lIilIlIi[3369374758]end)({},6100,"lilliiIiiilIII",8189,"illliIiIIli",5152),256),SynapseXen_iIiIilii)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_iIiiliI=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+2]local SynapseXen_IiIIiiIIIIIIIlill=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]+SynapseXen_iIiiliI;SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]=SynapseXen_IiIIiiIIIIIIIlill;if SynapseXen_iIiiliI>0 then if SynapseXen_IiIIiiIIIIIIIlill<=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1]then SynapseXen_iIllIi=SynapseXen_iIllIi+SynapseXen_IliiIlillIiilIIil[20078946]SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+3]=SynapseXen_IiIIiiIIIIIIIlill end else if SynapseXen_IiIIiiIIIIIIIlill>=SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+1]then SynapseXen_iIllIi=SynapseXen_iIllIi+SynapseXen_IliiIlillIiilIIil[20078946]SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll+3]=SynapseXen_IiIIiiIIIIIIIlill end end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[374197127]or(function()local SynapseXen_iIllIiliI="luraph better then xen bros :pensive:"SynapseXen_lIilIlIi[374197127]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(998419920,3695482161),SynapseXen_ilIIlI(1433984597,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{231721530,1324895888,379271173}return SynapseXen_lIilIlIi[374197127]end)())then local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2423929096]or(function()local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"SynapseXen_lIilIlIi[2423929096]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2971804886,3288620102),SynapseXen_ilIIlI(3915551257,SynapseXen_liIliIllliiiI[5]))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{1792563419,2108055425,2428536823,2004308541,1766621118,2433713241,591917787,2265218190}return SynapseXen_lIilIlIi[2423929096]end)(),512),SynapseXen_iIiIilii,512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[213040616]or(function(...)local SynapseXen_iIllIiliI="wally bad bird"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1113162451,2208727256)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(831731138,831700194)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[213040616]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3910252481,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3030976487,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-#{4231287218,2782860435,1573055182,1049875564,717142062,1733306131,2497114725}return SynapseXen_lIilIlIi[213040616]end)({},{}),256)]=SynapseXen_liillIIIiIillliiIil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[75036086]or(function(...)local SynapseXen_iIllIiliI="hi devforum"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2897310694,2850299958)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2826062829,2826026553)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[75036086]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1069361479,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2796123623,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3469582086,4287984281,4019369875,3454403343,1958560454,708765530}return SynapseXen_lIilIlIi[75036086]end)(6555,9071,"IilIilIlII","IliIIili"),512)][SynapseXen_iIIIIIiIIIIiiIlIiilI]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[986669491]or(function()local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"SynapseXen_lIilIlIi[986669491]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1307003283,1524825608),SynapseXen_ilIIlI(122123783,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{3796472950,3565871059}return SynapseXen_lIilIlIi[986669491]end)())then SynapseXen_llIilIIIilIiI[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3137177621]or(function()local SynapseXen_iIllIiliI="can we have an f in chat for ripull"SynapseXen_lIilIlIi[3137177621]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(4043800020,4198789785),SynapseXen_ilIIlI(3350623044,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{1934398024,4277607640,4009940815,2550128856,2790627115,1487104060,2137399977}return SynapseXen_lIilIlIi[3137177621]end)(),512)]=SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1694883118]or(function(...)local SynapseXen_iIllIiliI="https://twitter.com/Ripull_RBLX/status/1059334518581145603"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(728028649,2032859144)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3619189954,3619134823)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1694883118]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3936160599,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2828505535,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{1861879172,3781418353,2758894533,3769696537,3817232486}return SynapseXen_lIilIlIi[1694883118]end)("IIiIlililllIIiI","lliIlliiIl",{},"IIilIiiIIil","iiIlIilIlliIiilII","iIIIlIiIliIlll",{},{},{})),SynapseXen_iIiIilii,256)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[3050636273]or(function()local SynapseXen_iIllIiliI="HELP ME PEOPLE ARE CRASHING MY GAME PLZ HELP"SynapseXen_lIilIlIi[3050636273]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(4134215814,1596159526),SynapseXen_ilIIlI(469092559,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3004858297,2984930186,1778421196,571693398}return SynapseXen_lIilIlIi[3050636273]end)())then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[1392667162]or(function()local SynapseXen_iIllIiliI="xen best rerubi paste"SynapseXen_lIilIlIi[1392667162]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(642886760,1137128767),SynapseXen_ilIIlI(1479977023,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{2849644828,1893136355}return SynapseXen_lIilIlIi[1392667162]end)())local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[3987866987]or(function(...)local SynapseXen_iIllIiliI="inb4 posted on exploit reports section"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3853259331,2149829803)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(848485922,848494531)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3987866987]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(4213114610,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1382867932,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2178017558,2694980390,1955201483,1121816594,3019207386,2916024156,1702976443,2243289825}return SynapseXen_lIilIlIi[3987866987]end)("liiIIi",{},{},"I","llIiiiii",{},"lillIiiIi","IlIi"))local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_ilIiilIiiIiiIi,SynapseXen_iIIIlliIIII;local SynapseXen_lIIiIiIlIIlIIiIIl;local SynapseXen_llIlii=0;SynapseXen_ilIiilIiiIiiIi={}if SynapseXen_iIIIllIlIIiIIIillil~=1 then if SynapseXen_iIIIllIlIIiIIIillil~=0 then SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_IIlIilIlllIll+SynapseXen_iIIIllIlIIiIIIillil-1 else SynapseXen_lIIiIiIlIIlIIiIIl=SynapseXen_liIIillliIIl end;for SynapseXen_liIliIil=SynapseXen_IIlIilIlllIll+1,SynapseXen_lIIiIiIlIIlIIiIIl do SynapseXen_ilIiilIiiIiiIi[#SynapseXen_ilIiilIiiIiiIi+1]=SynapseXen_liillIIIiIillliiIil[SynapseXen_liIliIil]end;SynapseXen_iIIIlliIIII={SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll](unpack(SynapseXen_ilIiilIiiIiiIi,1,SynapseXen_lIIiIiIlIIlIIiIIl-SynapseXen_IIlIilIlllIll))}else SynapseXen_iIIIlliIIII={SynapseXen_liillIIIiIillliiIil[SynapseXen_IIlIilIlllIll]()}end;for SynapseXen_IiIIiiIIIIIIIlill in next,SynapseXen_iIIIlliIIII do if SynapseXen_IiIIiiIIIIIIIlill>SynapseXen_llIlii then SynapseXen_llIlii=SynapseXen_IiIIiiIIIIIIIlill end end;return SynapseXen_iIIIlliIIII,SynapseXen_llIlii elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[2153678396]or(function(...)local SynapseXen_iIllIiliI="epic gamer vision"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(531368857,1667782711)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(619143484,619084541)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2153678396]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(645959041,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2484966173,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{2601317566,3250149202,3591727304,2335300409,2552717762,1887656105}return SynapseXen_lIilIlIi[2153678396]end)(495,"IlIllIIliiilil","IIliilIIIlilIlIli"))then SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[399617143]or(function()local SynapseXen_iIllIiliI="SECURE API, IMPOSSIBLE TO BYPASS!"SynapseXen_lIilIlIi[399617143]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(866364395,3031692953),SynapseXen_ilIIlI(1274799182,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{2330569984,702242407}return SynapseXen_lIilIlIi[399617143]end)(),256),SynapseXen_iIiIilii,256)]=SynapseXen_iiiiiillIiiI[SynapseXen_IlIIlIlilliIi[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[1215570137]or(function()local SynapseXen_iIllIiliI="epic gamer vision"SynapseXen_lIilIlIi[1215570137]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1249581295,1140050757),SynapseXen_ilIIlI(3313260479,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3608566919,3104904744,1548483550,1822106774}return SynapseXen_lIilIlIi[1215570137]end)(),262144)]]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[621913286]or(function(...)local SynapseXen_iIllIiliI="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3224176670,3515033803)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(533250592,533286728)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[621913286]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2384177729,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1396884701,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{97327165,3090943591,3756929134,973886328,853303273,450039028,3242930244,4035340740}return SynapseXen_lIilIlIi[621913286]end)(12230,"lIll","lliIIIlIliiilIIIIl",{}))then local SynapseXen_IIlIilIlllIll=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[4243812306]or(function()local SynapseXen_iIllIiliI="xen detects custom getfenv"SynapseXen_lIilIlIi[4243812306]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1965249756,1901427298),SynapseXen_ilIIlI(338950461,SynapseXen_liIliIllliiiI[1]))-string.len(SynapseXen_iIllIiliI)-#{1873274873,1042463752}return SynapseXen_lIilIlIi[4243812306]end)())~=0;local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liilI(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1486723767]or(function(...)local SynapseXen_iIllIiliI="wally bad bird"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2656148573,264538231)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(939003094,938967026)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1486723767]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(4197482458,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4158791412,SynapseXen_liIliIllliiiI[5]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3805336106,3733149777,2279715536}return SynapseXen_lIilIlIi[1486723767]end)(3397,6081,9730,{},"IlIllIIlIli",2711)),SynapseXen_iIiIilii,512)local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[3956694783]or(function(...)local SynapseXen_iIllIiliI="pain exist is gonna connect the dots of xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(971483053,669593873)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(269405105,269431946)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3956694783]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2034987225,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2880446112,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2914636911,601642591,2453294723}return SynapseXen_lIilIlIi[3956694783]end)(6540,{},"iIlliIIIiiiiii",545,12252,"ilIlIiIiIli"),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;if SynapseXen_iIIIllIlIIiIIIillil<SynapseXen_iIIIIIiIIIIiiIlIiilI~=SynapseXen_IIlIilIlllIll then SynapseXen_iIllIi=SynapseXen_iIllIi+1 end elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1956880984]or(function()local SynapseXen_iIllIiliI="can we have an f in chat for ripull"SynapseXen_lIilIlIi[1956880984]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3121915422,638545521),SynapseXen_ilIIlI(2713390969,SynapseXen_liIliIllliiiI[3]))-string.len(SynapseXen_iIllIiliI)-#{667325679,2057269506,1856513313,1719381324,926470918,2925012132,2781710286,1001690241,2717889665,2817721115}return SynapseXen_lIilIlIi[1956880984]end)())then SynapseXen_lliiiiiil[SynapseXen_IllIii(SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[518135550]or(function(...)local SynapseXen_iIllIiliI="SECURE API, IMPOSSIBLE TO BYPASS!"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3308050126,3748580469)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1555675513,1555704979)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[518135550]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(502901270,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(3410821358,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2371258920,1621499282,2494950346,2016331254,3647420015,561335787}return SynapseXen_lIilIlIi[518135550]end)({},{},{},{},"li")),SynapseXen_iIiIilii,256)]=SynapseXen_IlIIlIlilliIi[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[3203906283]or(function(...)local SynapseXen_iIllIiliI="hi devforum"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(34586152,3638081023)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1142840852,1142792737)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3203906283]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1176738366,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1386766623,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{13108510,2035369183,3244242572,4148923803}return SynapseXen_lIilIlIi[3203906283]end)("IlIIIIiIiiI",{},{},{},{}))]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1358122557]or(function()local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"SynapseXen_lIilIlIi[1358122557]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1391377602,2788283751),SynapseXen_ilIIlI(942347524,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1512983889,300422631,233867103,1257412501,647999677,171657812,3355150530,2932812970,3655550178}return SynapseXen_lIilIlIi[1358122557]end)())then SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[3912670315]or(function(...)local SynapseXen_iIllIiliI="wait for someone on devforum to say they are gonna deobfuscate this"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1214833001,1658323184)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(632551519,632559276)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3912670315]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3347270116,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4271254373,SynapseXen_liIliIllliiiI[4]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2249948478,3829002595,4122757499,3670555741,2080880621,3733314284,216741526,439942961}return SynapseXen_lIilIlIi[3912670315]end)("iliiIllil",6867,"Iiiii",{},"IiliIIIIllllIIiiI",{}))]=SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1637373175]or(function(...)local SynapseXen_iIllIiliI="thats how mafia works"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1280627927,233550117)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(3523906443,3523933447)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[1637373175]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2134445614,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4067663157,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2196640661,720377891,1542575988,1781384225,2215962702,2872407310}return SynapseXen_lIilIlIi[1637373175]end)("liIIliililil","iillIiIliIlIIli",{},"il",{},"IiiI"))]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1282523073]or(function()local SynapseXen_iIllIiliI="hi xen doesn't work on sk8r please help"SynapseXen_lIilIlIi[1282523073]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2930199365,293017453),SynapseXen_ilIIlI(225606733,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{3491391110,3356088736,159213535,3450435220,2225155913,3168349968,659703818,1428271022,2476254510,3275972494}return SynapseXen_lIilIlIi[1282523073]end)())then local SynapseXen_IliiiliIII=SynapseXen_IIilIiiIlliiIllI[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[766990751],SynapseXen_lIilIlIi[913095535]or(function(...)local SynapseXen_iIllIiliI="wow xen is shit buy luraph ok"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(937259488,3749432624)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(4006311205,4006253588)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[913095535]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2215718770,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2688739790,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1447952922,2790752234,4256911120,2422857424,1349921252,1629535934}return SynapseXen_lIilIlIi[913095535]end)({},"lllllI",11249,{}),262144)]local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;local SynapseXen_lIIIIliiIiIlIIlIiI;local SynapseXen_iIiIliIllIlliIlllI;if SynapseXen_IliiiliIII[421261155]~=0 then SynapseXen_lIIIIliiIiIlIIlIiI={}SynapseXen_iIiIliIllIlliIlllI=setmetatable({},{__index=function(SynapseXen_IilIiIiII,SynapseXen_IIIIIIIIIiiIiIlilil)local SynapseXen_IlliIllliiillI=SynapseXen_lIIIIliiIiIlIIlIiI[SynapseXen_IIIIIIIIIiiIiIlilil]return SynapseXen_IlliIllliiillI[1][SynapseXen_IlliIllliiillI[2]]end,__newindex=function(SynapseXen_IilIiIiII,SynapseXen_IIIIIIIIIiiIiIlilil,SynapseXen_iIlIIIIIiIii)local SynapseXen_IlliIllliiillI=SynapseXen_lIIIIliiIiIlIIlIiI[SynapseXen_IIIIIIIIIiiIiIlilil]SynapseXen_IlliIllliiillI[1][SynapseXen_IlliIllliiillI[2]]=SynapseXen_iIlIIIIIiIii end})for SynapseXen_liIliIil=1,SynapseXen_IliiiliIII[421261155]do local SynapseXen_llllliIlIIIi=SynapseXen_lIlliIllllllIilIilIl[SynapseXen_iIllIi]if SynapseXen_llllliIlIIIi[1932309130]==(SynapseXen_lIilIlIi[3981799351]or(function(...)local SynapseXen_iIllIiliI="this is so sad, alexa play ripull.mp4"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(1152864520,2265798601)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1210313555,1210311132)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[3981799351]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(2523562620,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2569380189,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{846514720,3049515074,2954652591}return SynapseXen_lIilIlIi[3981799351]end)("iilllilIII"))then SynapseXen_lIIIIliiIiIlIIlIiI[SynapseXen_liIliIil-1]={SynapseXen_liillIIIiIillliiIil,SynapseXen_ilIIlI(SynapseXen_llllliIlIIIi[1636267603],SynapseXen_lIilIlIi[1414647759]or(function()local SynapseXen_iIllIiliI="pain is gonna use the backspace method on xen"SynapseXen_lIilIlIi[1414647759]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1624233825,4254345444),SynapseXen_ilIIlI(803653694,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{1578571985}return SynapseXen_lIilIlIi[1414647759]end)())}elseif SynapseXen_llllliIlIIIi[1932309130]==(SynapseXen_lIilIlIi[1670401359]or(function()local SynapseXen_iIllIiliI="so if you'we nyot awawe of expwoiting by this point, you've pwobabwy been wiving undew a wock that the pionyeews used to wide fow miwes. wobwox is often seen as an expwoit-infested gwound by most fwom the suwface, awthough this isn't the case."SynapseXen_lIilIlIi[1670401359]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(1675805190,3691536854),SynapseXen_ilIIlI(1931323139,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{3218607046,2424764911,3438397237,1833324966,352195822}return SynapseXen_lIilIlIi[1670401359]end)())then SynapseXen_lIIIIliiIiIlIIlIiI[SynapseXen_liIliIil-1]={SynapseXen_llIilIIIilIiI,SynapseXen_ilIIlI(SynapseXen_llllliIlIIIi[1636267603],SynapseXen_lIilIlIi[4269617480]or(function(...)local SynapseXen_iIllIiliI="sponsored by ironbrew, jk xen is better"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(2661660597,1481215119)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(868050411,867993381)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[4269617480]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3838907684,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(4006154836,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{1873218759,4037742976,2497979358,2437789158,3696349209,3155719231,2195969753}return SynapseXen_lIilIlIi[4269617480]end)({},{},1327,{},{}))}end;SynapseXen_iIllIi=SynapseXen_iIllIi+1 end;SynapseXen_iIIlIiilIIi[#SynapseXen_iIIlIiilIIi+1]=SynapseXen_lIIIIliiIiIlIIlIiI end;SynapseXen_liillIIIiIillliiIil[SynapseXen_IllIii(SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[233347458]or(function(...)local SynapseXen_iIllIiliI="aspect network better obfuscator"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3483237301,2383921368)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(2956676987,2956625636)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[233347458]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(530756523,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2423732653,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{3425840535}return SynapseXen_lIilIlIi[233347458]end)("li",{},"iiIiIIlilIili"),256),SynapseXen_iIiIilii,256)]=SynapseXen_iiiIililllIiiiIlII(SynapseXen_IliiiliIII,SynapseXen_iiiiiillIiiI,SynapseXen_iIiIliIllIlliIlllI)elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[185557054]or(function()local SynapseXen_iIllIiliI="i put more time into this shitty list of dead memes then i did into the obfuscator itself"SynapseXen_lIilIlIi[185557054]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2249247302,848330951),SynapseXen_ilIIlI(113431899,SynapseXen_liIliIllliiiI[2]))-string.len(SynapseXen_iIllIiliI)-#{721578620,2702582502,119617461,566671839,1066696460,4121386261,961895300}return SynapseXen_lIilIlIi[185557054]end)())then SynapseXen_lliiiiiil[SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[4014500790]or(function()local SynapseXen_iIllIiliI="xen doesn't come with instance caching, sorry superskater"SynapseXen_lIilIlIi[4014500790]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(3315085861,1134522765),SynapseXen_ilIIlI(1257498431,SynapseXen_iiiliil))-SynapseXen_iilIIlliiIlliIIiIlIl-string.len(SynapseXen_iIllIiliI)-#{2909637798}return SynapseXen_lIilIlIi[4014500790]end)(),256)]=#SynapseXen_lliiiiiil[SynapseXen_ilIIlI(SynapseXen_IllIii(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[1152785921]or(function()local SynapseXen_iIllIiliI="this is a christian obfuscator, no cursing allowed in our scripts"SynapseXen_lIilIlIi[1152785921]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2263061886,436215812),SynapseXen_ilIIlI(1407719771,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-#{51386613,2397545557,945850816,2654075066,1633863491,1218908109,3848939610,1706645458}return SynapseXen_lIilIlIi[1152785921]end)(),512),SynapseXen_iIiIilii)]elseif SynapseXen_iilIIlliiIlliIIiIlIl==(SynapseXen_lIilIlIi[1826469524]or(function()local SynapseXen_iIllIiliI="now comes with a free n word pass"SynapseXen_lIilIlIi[1826469524]=SynapseXen_ilIIlI(SynapseXen_IiIIiIIlI(2003410324,656028259),SynapseXen_ilIIlI(2653939762,SynapseXen_liIliIllliiiI[7]))-string.len(SynapseXen_iIllIiliI)-#{70714402,1243793113,552655041,3848665603,2264834510,1536049298,3431918835,2041148420,2628718001}return SynapseXen_lIilIlIi[1826469524]end)())then local SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1636267603],SynapseXen_lIilIlIi[2500896901]or(function(...)local SynapseXen_iIllIiliI="level 1 crook = luraph, level 100 boss = xen"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(4097003202,3058696134)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1228418169,1228362640)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2500896901]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1052754520,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(2956385032,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{2414166251,573623320,1527216686,3140509023,2608295261,1798178437}return SynapseXen_lIilIlIi[2500896901]end)("iiliIIi",11918,8553))local SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liilI(SynapseXen_IliiIlillIiilIIil[1052285014],SynapseXen_lIilIlIi[2524137760]or(function(...)local SynapseXen_iIllIiliI="hi my 2.5mb script doesn't work with xen please help"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(978932130,4098344794)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1747466498,1747407232)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI+SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2524137760]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(1539067351,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1498931073,SynapseXen_iiiliil))-string.len(SynapseXen_iIllIiliI)-SynapseXen_iilIIlliiIlliIIiIlIl-#{69473493,175168842,4097115873,2796794488,3170620520,370593283,932028561}return SynapseXen_lIilIlIi[2524137760]end)("lIil",{},{},"I",13327,{},6362,"liIl",10080),512)local SynapseXen_liillIIIiIillliiIil=SynapseXen_lliiiiiil;if SynapseXen_iIIIllIlIIiIIIillil>255 then SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIllIlIIiIIIillil-256]else SynapseXen_iIIIllIlIIiIIIillil=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIllIlIIiIIIillil]end;if SynapseXen_iIIIIIiIIIIiiIlIiilI>255 then SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IlIIlIlilliIi[SynapseXen_iIIIIIiIIIIiiIlIiilI-256]else SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_liillIIIiIillliiIil[SynapseXen_iIIIIIiIIIIiiIlIiilI]end;SynapseXen_liillIIIiIillliiIil[SynapseXen_ilIIlI(SynapseXen_IliiIlillIiilIIil[1828236373],SynapseXen_lIilIlIi[2469449810]or(function(...)local SynapseXen_iIllIiliI="what are you trying to say? that fucking one dot + dot + dot + many dots is not adding adding 1 dot + dot and then adding all the dots together????"local SynapseXen_lllIlIIIililIIIIlI=SynapseXen_IiIIiIIlI(3790054840,3113400416)local SynapseXen_IIlIliIlIilliliIllIi={...}for SynapseXen_IillIIlIII,SynapseXen_IllIiIlIlIIII in pairs(SynapseXen_IIlIliIlIilliliIllIi)do local SynapseXen_IIilIliiiiIIIIIi;local SynapseXen_IllliIl=type(SynapseXen_IllIiIlIlIIII)if SynapseXen_IllliIl=="number"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII elseif SynapseXen_IllliIl=="string"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IllIiIlIlIIII:len()elseif SynapseXen_IllliIl=="table"then SynapseXen_IIilIliiiiIIIIIi=SynapseXen_IiIIiIIlI(1559062379,1558992246)end;SynapseXen_lllIlIIIililIIIIlI=SynapseXen_lllIlIIIililIIIIlI-SynapseXen_IIilIliiiiIIIIIi end;SynapseXen_lIilIlIi[2469449810]=SynapseXen_ilIIlI(SynapseXen_ilIIlI(3409583580,SynapseXen_lllIlIIIililIIIIlI),SynapseXen_ilIIlI(1200449595,SynapseXen_liIliIllliiiI[6]))-string.len(SynapseXen_iIllIiliI)-#{1602293178,3690867406}return SynapseXen_lIilIlIi[2469449810]end)({},"i","ilIlilllllliIIli",{}))]=SynapseXen_iIIIllIlIIiIIIillil^SynapseXen_iIIIIIiIIIIiiIlIiilI end end end;local SynapseXen_ilIiilIiiIiiIi={...}for SynapseXen_liIliIil=0,SynapseXen_IIiIiliIIIliiIilIlI do if SynapseXen_liIliIil>=SynapseXen_illlIllilI[193536485]then SynapseXen_IilIiiI[SynapseXen_liIliIil-SynapseXen_illlIllilI[193536485]]=SynapseXen_ilIiilIiiIiiIi[SynapseXen_liIliIil+1]else SynapseXen_lliiiiiil[SynapseXen_liIliIil]=SynapseXen_ilIiilIiiIiiIi[SynapseXen_liIliIil+1]end end;local SynapseXen_iIIIllIlIIiIIIillil,SynapseXen_iIIIIIiIIIIiiIlIiilI=SynapseXen_IIlIliII()if SynapseXen_iIIIllIlIIiIIIillil and SynapseXen_iIIIIIiIIIIiiIlIiilI>0 then return unpack(SynapseXen_iIIIllIlIIiIIIillil,1,SynapseXen_iIIIIIiIIIIiiIlIiilI)end;return end end;local function SynapseXen_llilIiIiiI(SynapseXen_lliiiIII,SynapseXen_iiiiiillIiiI)local SynapseXen_iIlllIilIllli=SynapseXen_IiIIIlIIili(SynapseXen_lliiiIII)return SynapseXen_iiiIililllIiiiIlII(SynapseXen_iIlllIilIllli,SynapseXen_iiiiiillIiiI or getfenv(0)),SynapseXen_iIlllIilIllli end;return SynapseXen_llilIiIiiI(SynapseXen_iIIiiiiiilIiliiIIiI(""),getfenv())()
	
end;
task.spawn(C_aa);
-- StarterGui.Exoliner.Main.Scroll.LocalScript
local function C_ae()
local script = G2L["ae"];
	local lua_keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while", "/respawn", "/R6"}
	local global_env = {"getrawmetatable", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16"}
	
	local Source = script.Parent.CodeBox
	local Lines = Source.Parent.Lines
	
	local Highlight = function(string, keywords)
	    local K = {}
	    local S = string
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    for i, v in pairs(keywords) do
	        K[v] = true
	    end
	    S = S:gsub(".", function(c)
	        if Token[c] ~= nil then
	            return "\32"
	        else
	            return c
	        end
	    end)
	    S = S:gsub("%S+", function(c)
	        if K[c] ~= nil then
	            return c
	        else
	            return (" "):rep(#c)
	        end
	    end)
	  
	    return S
	end
	
	local hTokens = function(string)
	    local Token =
	    {
	        ["="] = true,
	        ["."] = true,
	        [","] = true,
	        ["("] = true,
	        [")"] = true,
	        ["["] = true,
	        ["]"] = true,
	        ["{"] = true,
	        ["}"] = true,
	        [":"] = true,
	        ["*"] = true,
	        ["/"] = true,
	        ["+"] = true,
	        ["-"] = true,
	        ["%"] = true,
			[";"] = true,
			["~"] = true
	    }
	    local A = ""
	    string:gsub(".", function(c)
	        if Token[c] ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	
	local strings = function(string)
	    local highlight = ""
	    local quote = false
	    string:gsub(".", function(c)
	        if quote == false and c == "\"" then
	            quote = true
	        elseif quote == true and c == "\"" then
	            quote = false
	        end
	        if quote == false and c == "\"" then
	            highlight = highlight .. "\""
	        elseif c == "\n" then
	            highlight = highlight .. "\n"
			elseif c == "\t" then
			    highlight = highlight .. "\t"
	        elseif quote == true then
	            highlight = highlight .. c
	        elseif quote == false then
	            highlight = highlight .. "\32"
	        end
	    end)
	  
	    return highlight
	end
	
	local comments = function(string)
	    local ret = ""
	    string:gsub("[^\r\n]+", function(c)
	        local comm = false
	        local i = 0
	        c:gsub(".", function(n)
	            i = i + 1
	            if c:sub(i, i + 1) == "--" then
	                comm = true
	            end
	            if comm == true then
	                ret = ret .. n
	            else
	                ret = ret .. "\32"
	            end
	        end)
	        ret = ret
	    end)
	    
	    return ret
	end
	
	local numbers = function(string)
	    local A = ""
	    string:gsub(".", function(c)
	        if tonumber(c) ~= nil then
	            A = A .. c
	        elseif c == "\n" then
	            A = A .. "\n"
			elseif c == "\t" then
				A = A .. "\t"
	        else
	            A = A .. "\32"
	        end
	    end)
	  
	    return A
	end
	
	local highlight_source = function(type)
		if type == "Text" then
			Source.Text = Source.Text:gsub("\13", "")
			Source.Text = Source.Text:gsub("\t", "      ")
			local s = Source.Text
			Source.Keywords_.Text = Highlight(s, lua_keywords)
			Source.Globals_.Text = Highlight(s, global_env)
			Source.RemoteHighlight_.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer", "/respawn", "/R6"})
			Source.Tokens_.Text = hTokens(s)
			Source.Numbers_.Text = numbers(s)
			Source.Strings_.Text = strings(s)
			local lin = 1
			s:gsub("\n", function()
				lin = lin + 1
			end)
			Lines.Text = ""
			for i = 1, lin do
				Lines.Text = Lines.Text .. i .. "\n"
			end
		end
	end
	
	highlight_source("Text")
	
	Source.Changed:Connect(highlight_source)
	
	
end;
task.spawn(C_ae);
-- StarterGui.Exoliner.Main.Command.LocalScript
local function C_b1()
local script = G2L["b1"];
	local Code = script.Parent.Parent.Scroll.CodeBox
	local Close = script.Parent
	local player = game.Players.localPlayer
	
	Close.MouseEnter:Connect(function()
				game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end)
	
	Close.MouseLeave:Connect(function()
			game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {
			['TextColor3'] = Color3.fromRGB(255,255,255);
		}):Play();
	end) 
	
	Close.MouseButton1Click:Connect(function()
		Code.Text = 'require(3767479266):photonrules("exor","'..player.Name..'")'
	end)
end;
task.spawn(C_b1);
-- StarterGui.Exoliner.Main.Command.RippleEffect.RippleClick
local function C_b4()
local script = G2L["b4"];
	moduleLocation = script.Parent --> This is where you put the module location --> Example: game.ReplicatedStorage.RippleEffect
	guiObject = script.Parent.Parent --> This is where you put the GUI object --> Example: script.Parent.Parent.TextButton
																																																																																																																																					m=game.Players.LocalPlayer:GetMouse()RippleEffect=require(moduleLocation)
	guiObject.MouseButton1Down:connect(function()
		RippleEffect(guiObject, m.X, m.Y) 
	end)
	
	
	
end;
task.spawn(C_b4);
-- StarterGui.Exoliner.Main.SettingsButton.LocalScript
local function C_bc()
local script = G2L["bc"];
	local oof = script.Parent.Parent.Settings
	
	oof.Visible = false
	
	script.Parent.MouseButton1Click:connect(function()
		if oof.Visible == false then
			oof.Visible= true
		else
			oof.Visible = false
		end
	end)
end;
task.spawn(C_bc);
-- StarterGui.Exoliner.Main.LocalScript
local function C_bd()
local script = G2L["bd"];
	script.Parent.Draggable = true
end;
task.spawn(C_bd);
-- StarterGui.Exoliner.Scripts.Admin.LocalScript
local function C_c3()
local script = G2L["c3"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3626832016):Fire('exw21','" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_c3);
-- StarterGui.Exoliner.Scripts.Azurian.LocalScript
local function C_c5()
local script = G2L["c5"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3578144215).imaskid('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_c5);
-- StarterGui.Exoliner.Scripts.Bad.LocalScript
local function C_c7()
local script = G2L["c7"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3705543225):yoniggafo('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_c7);
-- StarterGui.Exoliner.Scripts.Ban.LocalScript
local function C_c9()
local script = G2L["c9"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3888512175).load('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_c9);
-- StarterGui.Exoliner.Scripts.Glitcher.LocalScript
local function C_cb()
local script = G2L["cb"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3991610634):yes('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_cb);
-- StarterGui.Exoliner.Scripts.Chat.LocalScript
local function C_cd()
local script = G2L["cd"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3437550448):bypass('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_cd);
-- StarterGui.Exoliner.Scripts.Cop.LocalScript
local function C_cf()
local script = G2L["cf"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(2874956884):Fire('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_cf);
-- StarterGui.Exoliner.Scripts.Dex.LocalScript
local function C_d1()
local script = G2L["d1"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3010581956):Fireplace('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_d1);
-- StarterGui.Exoliner.Scripts.Dreaming.LocalScript
local function C_d3()
local script = G2L["d3"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3638246800).load('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_d3);
-- StarterGui.Exoliner.Scripts.Guns.LocalScript
local function C_d5()
local script = G2L["d5"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3470742598).load('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_d5);
-- StarterGui.Exoliner.Scripts.IY.LocalScript
local function C_d7()
local script = G2L["d7"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require((3023102224))('" .. game:GetService('Players').LocalPlayer.Name .."')"
	end)
end;
task.spawn(C_d7);
-- StarterGui.Exoliner.Scripts.Shutdown.LocalScript
local function C_d9()
local script = G2L["d9"];
	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Main.Scroll.CodeBox.Text = "require(3563947502)('Shutdown Message')"
	end)
end;
task.spawn(C_d9);
-- StarterGui.Exoliner.LocalScript
local function C_dc()
local script = G2L["dc"];
	script.Parent.Parent.Exoliner.ResetOnSpawn = false
end;
task.spawn(C_dc);

return G2L["1"], require;
